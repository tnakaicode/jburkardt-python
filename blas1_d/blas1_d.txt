Sat Jan 18 12:01:45 2020

DASUM_TEST
  Python version: 3.6.9
  DASUM adds the absolute values of elements of a vector.

  Vector x:

     0:            -2
     1:             4
     2:            -6
     3:             8
     4:           -10
     5:            12
     6:           -14
     7:            16
     8:           -18
     9:            20

  DASUM ( NX,    X, 1     ) = 110
  DASUM ( NX//2, X, 2     ) = 50
  DASUM ( 2,     X, NX//2 ) = 14

  Matrix A:

            11           -12            13           -14
           -21            22           -23            24
            31           -32            33           -34
           -41            42           -43            44
            51           -52            53           -54

  DASUM(MA,A(1:MA,2),1) = 160
  DASUM(NA,A(2,1:NA),1) = 90

DASUM_TEST
  Normal end of execution.

DAXPY_TEST
  Python version: 3.6.9
  DAXPY adds a multiple of vector X to vector Y.

  X:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5
     5:             6

  Y:

     0:           100
     1:           200
     2:           300
     3:           400
     4:           500
     5:           600

  z = daxpy ( 6, 1.000000, x, 1, y, 1 )

       0    101.000000
       1    202.000000
       2    303.000000
       3    404.000000
       4    505.000000
       5    606.000000

  z = daxpy ( 6, -2.000000, x, 1, y, 1 )

       0     98.000000
       1    196.000000
       2    294.000000
       3    392.000000
       4    490.000000
       5    588.000000

  z = daxpy ( 3, 3.000000, x, 2, y, 1 )

       0    103.000000
       1    209.000000
       2    315.000000

  z = daxpy ( 3, -4.000000, x, 1, y, 2 )

       0     96.000000
       1    292.000000
       2    488.000000

DAXPY_TEST
  Normal end of execution.

DCOPY_TEST
  DCOPY copies one vector into another.


  X = 

       0      1.000000
       1      2.000000
       2      3.000000
       3      4.000000
       4      5.000000
       5      6.000000
       6      7.000000
       7      8.000000
       8      9.000000
       9     10.000000

  Y = 

       0     10.000000
       1     20.000000
       2     30.000000
       3     40.000000
       4     50.000000
       5     60.000000
       6     70.000000
       7     80.000000
       8     90.000000
       9    100.000000

  A = 

  11.000000  12.000000  13.000000  14.000000  15.000000
  21.000000  22.000000  23.000000  24.000000  25.000000
  31.000000  32.000000  33.000000  34.000000  35.000000
  41.000000  42.000000  43.000000  44.000000  45.000000
  51.000000  52.000000  53.000000  54.000000  55.000000

  DCOPY ( 5, X, 1, Y, 1 )

       0      1.000000
       1      2.000000
       2      3.000000
       3      4.000000
       4      5.000000
       5     60.000000
       6     70.000000
       7     80.000000
       8     90.000000
       9    100.000000

  DCOPY ( 3, X, 2, Y, 3 )

       0      1.000000
       1     20.000000
       2     30.000000
       3      3.000000
       4     50.000000
       5     60.000000
       6      5.000000
       7     80.000000
       8     90.000000
       9    100.000000

  A[0:5,0] = DCOPY ( 5, X, 1, A[0:5,0], 1 )


  A = 

  1.000000  12.000000  13.000000  14.000000  15.000000
  2.000000  22.000000  23.000000  24.000000  25.000000
  3.000000  32.000000  33.000000  34.000000  35.000000
  4.000000  42.000000  43.000000  44.000000  45.000000
  5.000000  52.000000  53.000000  54.000000  55.000000

  A[0,0:5] = DCOPY ( 5, X, 2, A[0,0:5], 1 )

  A = 

  1.000000  3.000000  5.000000  7.000000  9.000000
  21.000000  22.000000  23.000000  24.000000  25.000000
  31.000000  32.000000  33.000000  34.000000  35.000000
  41.000000  42.000000  43.000000  44.000000  45.000000
  51.000000  52.000000  53.000000  54.000000  55.000000

DCOPY_TEST
  Normal end of execution.

DDOT_TEST
  Python version: 3.6.9
  DDOT computes the dot product of vectors.

  ddot ( n, x, 1, y, 1 ) = -55

  ddot ( n, a[1,0:n], 1, x, 1 ) = 85

  ddot ( n, a[0:n,1], 1, x, 1 ) = 85

  Matrix product computed with c[i,j] = ddot ( n, a[i,0:n], 1, b[0:n,j), 1 ):

     50.000000     30.000000     10.000000    -10.000000    -30.000000
     60.000000     35.000000     10.000000    -15.000000    -40.000000
     70.000000     40.000000     10.000000    -20.000000    -50.000000
     80.000000     45.000000     10.000000    -25.000000    -60.000000
     90.000000     50.000000     10.000000    -30.000000    -70.000000

DDOT_TEST
  Normal end of execution.

DMACH_TEST
  Python version: 3.6.9
  DMACH returns some approximate machine numbers.

  dmach(1) = eps =  2.22045e-16
  dmach(2) = tiny = 8.9003e-306
  dmach(3) = huge = 1.12356e+305

DMACH_TEST
  Normal end of execution.

DNRM2_TEST
  Python version: 3.6.9
  DNRM2 computes the Euclidean norm of a vector.

  x:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5

  dnrm2 ( n, x, incx ) = 7.4162

  dnrm2 ( n, a[1,0:n], incx ) = 11.619

  dnrm2 ( n, a[0:n,1], incx ) = 11.619

DNRM2_TEST
  Normal end of execution.

DROT_TEST
  Python version: 3.6.9
  DROT carries out a Givens rotation.

  Vectors X and Y

       0               1             -11
       1               2              -8
       2               3              -3
       3               4               4
       4               5              13
       5               6              24

  xr, yr = drot ( n, x, 1, y, 1, 0.5, 0.866025 )

  Rotated vectors XR and YR

       0        -9.02628        -6.36603
       1         -5.9282        -5.73205
       2        -1.09808        -4.09808
       3          5.4641         -1.4641
       4         13.7583         2.16987
       5         23.7846         6.80385

  xr, yr = drot ( n, x, 1, y, 1, 0.0905357, -0.995893 )

  Rotated vectors XR and YR

       0         11.0454    -8.88178e-16
       1         8.14822          1.2675
       2         3.25929         2.71607
       3        -3.62143         4.34572
       4        -12.4939         6.15643
       5        -23.3582         8.14822

DROT_TEST
  Normal end of execution.

DROTG_TEST
  Python version: 3.6.9
  DROTG generates a real Givens rotation
    (  C  S ) * ( A ) = ( R )
    ( -S  C )   ( B )   ( 0 )


  A =  0.218418  B =  0.956318
  C =  0.222661  S =  0.974896
  R =  0.980943  Z =  4.49112
   C*A+S*B = 0.980943
  -S*A+C*B = 0

  A =  0.829509  B =  0.561695
  C =  0.828025  S =  0.560691
  R =  1.00179  Z =  0.560691
   C*A+S*B = 1.00179
  -S*A+C*B = 0

  A =  0.415307  B =  0.0661187
  C =  0.987563  S =  0.157224
  R =  0.420537  Z =  0.157224
   C*A+S*B = 0.420537
  -S*A+C*B = 0

  A =  0.257578  B =  0.109957
  C =  0.919705  S =  0.392611
  R =  0.280066  Z =  0.392611
   C*A+S*B = 0.280066
  -S*A+C*B = 0

  A =  0.043829  B =  0.633966
  C =  0.06897  S =  0.997619
  R =  0.635479  Z =  14.4991
   C*A+S*B = 0.635479
  -S*A+C*B = 6.93889e-18

DROTG_TEST
  Normal end of execution.

DSCAL_TEST
  Python version: 3.6.9
  DSCAL multiplies a vector X by a scalar S.

  x:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5
     5:             6

  y = dscal ( 6, 5.0, x, 1 )

     0:             5
     1:            10
     2:            15
     3:            20
     4:            25
     5:            30

  y = dscal ( 3, -2.0, x, 2 )

     0:            -2
     1:            -6
     2:           -10

DSCAL_TEST
  Normal end of execution.

IDAMAX_TEST
  Python version: 3.6.9
  IDAMAX returns the index of maximum magnitude

  The vector X:

     0:             2
     1:            -2
     2:             5
     3:             1
     4:            -3
     5:             4
     6:             0
     7:            -4
     8:             3
     9:            -1
    10:            -5

  The index of maximum magnitude = 2

IDAMAX_TEST
  Normal end of execution.
Sat Jan 18 12:01:45 2020
