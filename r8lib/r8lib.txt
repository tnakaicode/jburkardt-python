Sun Feb  2 08:30:46 2020

r8lib_test
  Python version: 3.6.9
  Test r8lib.

AGM_VALUES_TEST:
  Python version: 3.6.9
  AGM_VALUES stores values of
  the arithmetic geometric mean function.

      A           B         AGM(A,B)

     22.000000     96.000000       52.2746411987042379
     83.000000     56.000000       68.8365300598585179
     42.000000      7.000000       20.6593011967340097
     26.000000     11.000000       17.6968548737436500
      4.000000     63.000000       23.8670497217533004
      6.000000     45.000000       20.7170159828059930
     40.000000     75.000000       56.1278422556166845
     80.000000      0.000000        0.0000000000000000
     90.000000     35.000000       59.2695650812296364
      9.000000      1.000000        3.9362355036495553
     53.000000     53.000000       53.0000000000000000
      1.000000      2.000000        1.4567910310469068
      1.000000      4.000000        2.2430285802876027
      1.000000      8.000000        3.6157561775973628

AGM_VALUES_TEST:
  Normal end of execution.

GAMMA_VALUES_TEST:
  Python version: 3.6.9
  GAMMA_VALUES stores values of the Gamma function.

      X            GAMMA(X)

     -0.500000       -3.5449077018110322
     -0.010000     -100.5871979644108052
      0.010000       99.4325851191506018
      0.100000        9.5135076986687324
      0.200000        4.5908437119988026
      0.400000        2.2181595437576882
      0.500000        1.7724538509055161
      0.600000        1.4891922488128171
      0.800000        1.1642297137253030
      1.000000        1.0000000000000000
      1.100000        0.9513507698668732
      1.200000        0.9181687423997607
      1.300000        0.8974706963062772
      1.400000        0.8872638175030753
      1.500000        0.8862269254527581
      1.600000        0.8935153492876903
      1.700000        0.9086387328532904
      1.800000        0.9313837709802427
      1.900000        0.9617658319073874
      2.000000        1.0000000000000000
      3.000000        2.0000000000000000
      4.000000        6.0000000000000000
     10.000000   362880.0000000000000000
     20.000000  121645100408832000.0000000000000000
     30.000000  8841761993739701898620088352768.0000000000000000

GAMMA_VALUES_TEST:
  Normal end of execution.

GAMMA_LOG_VALUES:
  Python version: 3.6.9
  GAMMA_LOG_VALUES stores values of
  the logarithm of the Gamma function.

      X            GAMMA_LOG(X)

      0.200000        1.5240638224307841
      0.400000        0.7966778177017837
      0.600000        0.3982338580692348
      0.800000        0.1520596783998375
      1.000000        0.0000000000000000
      1.100000       -0.0498724412598397
      1.200000       -0.0853740900033158
      1.300000       -0.1081748095078604
      1.400000       -0.1196129141723712
      1.500000       -0.1207822376352452
      1.600000       -0.1125917656967557
      1.700000       -0.0958076974070659
      1.800000       -0.0710838729143722
      1.900000       -0.0389842759230833
      2.000000        0.0000000000000000
      3.000000        0.6931471805599453
      4.000000        1.7917594692280550
     10.000000       12.8018274800814691
     20.000000       39.3398841871994946
     30.000000       71.2570389671680147

GAMMA_LOG_VALUES_TEST:
  Normal end of execution.

I4_LOG_10_TEST
  Python version: 3.6.9
  I4_LOG_10: whole part of log base 10,

  X, I4_LOG_10

     0             0
     1             0
     2             0
     3             0
     9             0
    10             1
    11             1
    99             1
   101             2
    -1             0
    -2             0
    -3             0
    -9             0

I4_LOG_10_TEST
  Normal end of execution.

I4_MODP_TEST
  Python version: 3.6.9
  I4_MODP factors a number
  into a multiple M and a positive remainder R.

    Number   Divisor  Multiple Remainder

       107        50         2         7
       107       -50        -2         7
      -107        50        -3        43
      -107       -50         3        43

  Repeat using Python % Operator:

       107        50         2         7
       107       -50        -3       -43
      -107        50        -3        43
      -107       -50         2        -7

I4_MODP_TEST
  Normal end of execution.

I4_SIGN_TEST
  Python version: 3.6.9
  I4_SIGN returns the sign of an I4.

    I4  I4_SIGN(I4)

   -10           -1
    -7           -1
     0            1
     5            1
     9            1

I4_SIGN_TEST
  Normal end of execution.

I4_UNIFORM_AB_TEST
  Python version: 3.6.9
  I4_UNIFORM_AB computes pseudorandom values
  in an interval [A,B].

  The lower endpoint A = -100
  The upper endpoint B = 200
  The initial seed is 123456789

         1       -35
         2       187
         3       149
         4        69
         5        25
         6       -81
         7       -23
         8       -67
         9       -87
        10        90
        11       -82
        12        35
        13        20
        14       127
        15       139
        16      -100
        17       170
        18         5
        19       -72
        20       -96

I4_UNIFORM_AB_TEST:
  Normal end of execution.

I4_WRAP_TEST
  Python version: 3.6.9
  I4_WRAP forces an integer to lie within given limits.

  ILO = 4
  IHI = 8

     I  I4_WRAP(I)

     -10       5
      -9       6
      -8       7
      -7       8
      -6       4
      -5       5
      -4       6
      -3       7
      -2       8
      -1       4
       0       5
       1       6
       2       7
       3       8
       4       4
       5       5
       6       6
       7       7
       8       8
       9       4
      10       5
      11       6
      12       7
      13       8
      14       4
      15       5
      16       6
      17       7
      18       8
      19       4
      20       5

I4_WRAP_TEST
  Normal end of execution.

I4VEC_INDICATOR0_TEST
  Python version: 3.6.9
  I4VEC_INDICATOR0 returns an indicator vector.

  The indicator0 vector:

     0       0
     1       1
     2       2
     3       3
     4       4
     5       5
     6       6
     7       7
     8       8
     9       9

I4VEC_INDICATOR0_TEST
  Normal end of execution.

I4VEC_INDICATOR1_TEST
  Python version: 3.6.9
  I4VEC_INDICATOR1 returns an indicator vector.

  The indicator1 vector:

     0       1
     1       2
     2       3
     3       4
     4       5
     5       6
     6       7
     7       8
     8       9
     9      10

I4VEC_INDICATOR1_TEST
  Normal end of execution.

I4VEC_PRINT_TEST
  Python version: 3.6.9
  I4VEC_PRINT prints an I4VEC.

  Here is an I4VEC:

     0      91
     1      92
     2      93
     3      94

I4VEC_PRINT_TEST:
  Normal end of execution.

I4VEC_TRANSPOSE_PRINT_TEST
  Python version: 3.6.9
  I4VEC_TRANSPOSE_PRINT prints an I4VEC
  with 5 entries to a row, and an optional title.

  My array:   1 2 3 4 5 6 7 8 9 10 11 12

I4VEC_TRANSPOSE_PRINT_TEST:
  Normal end of execution.

I4VEC_UNIFORM_AB_TEST
  Python version: 3.6.9
  I4VEC_UNIFORM_AB computes pseudorandom values
  in an interval [A,B].

  The lower endpoint A = -100
  The upper endpoint B = 200
  The initial seed is 123456789


  The random vector:

     0     -35
     1     187
     2     149
     3      69
     4      25
     5     -81
     6     -23
     7     -67
     8     -87
     9      90
    10     -82
    11      35
    12      20
    13     127
    14     139
    15    -100
    16     170
    17       5
    18     -72
    19     -96

I4VEC_UNIFORM_AB_TEST:
  Normal end of execution.

PERM0_CHECK_TEST
  Python version: 3.6.9
  PERM0_CHECK checks a permutation of 0,...,N-1.
  Permutation 1: 5 2 3 4 1

PERM0_CHECK - Warning!
  Permutation is missing the value 0.
  Permutation 2: 4 1 3 0 2
  Permutation 3: 0 2 1 3 2

PERM0_CHECK - Warning!
  Permutation is missing the value 4.

PERM0_CHECK_TEST:
  Normal end of execution.

PERM0_UNIFORM_TEST
  Python version: 3.6.9
  PERM0_UNIFORM randomly selects a permutation of 0,...,N-1.

     2   9   8   6   3   5   7   4   0   1
     6   1   5   2   8   4   0   9   3   7
     0   1   8   2   4   5   7   9   3   6
     3   8   4   7   0   9   2   5   6   1
     1   7   5   4   0   6   8   2   3   9

PERM0_UNIFORM_TEST
  Normal end of execution.

PERM1_CHECK_TEST
  Python version: 3.6.9
  PERM1_CHECK checks a permutation of 1,...,N.
  Permutation 1: 5 2 3 4 1
  Permutation 2: 4 1 3 0 2

PERM1_CHECK - Warning!
  Permutation is missing the value 5.
  Permutation 3: 0 2 1 3 2

PERM1_CHECK - Warning!
  Permutation is missing the value 4.

PERM1_CHECK_TEST:
  Normal end of execution.

PERM1_UNIFORM_TEST
  Python version: 3.6.9
  PERM1_UNIFORM randomly selects a permutation of 1,...,N.

     3  10   9   7   4   6   8   5   1   2
     7   2   6   3   9   5   1  10   4   8
     1   2   9   3   5   6   8  10   4   7
     4   9   5   8   1  10   3   6   7   2
     2   8   6   5   1   7   9   3   4  10

PERM1_UNIFORM_TEST
  Normal end of execution.

R8_ABS_TEST
  Python version: 3.6.9
  R8_ABS returns the absolute value of an R8.

      X         R8_ABS(X)

   -2.815817    2.815817
    4.563176    4.563176
    3.295092    3.295092
    0.616954    0.616954
   -0.846929    0.846929
   -4.338813    4.338813
   -2.424222    2.424222
   -3.900432    3.900432
   -4.561710    4.561710
    1.339657    1.339657

R8_ABS_TEST
  Normal end of execution.

R8_ACOS_TEST
  Python version: 3.6.9
  R8_ACOS computes the arc-cosine of an angle.

       C            R8_ACOS(C)        ACOS(C)

        -1.16667         3.14159
              -1         3.14159         3.14159
       -0.833333         2.55591         2.55591
       -0.666667         2.30052         2.30052
            -0.5          2.0944          2.0944
       -0.333333         1.91063         1.91063
       -0.166667         1.73824         1.73824
               0          1.5708          1.5708
        0.166667         1.40335         1.40335
        0.333333         1.23096         1.23096
             0.5          1.0472          1.0472
        0.666667        0.841069        0.841069
        0.833333        0.585686        0.585686
               1               0               0
         1.16667               0

R8_ACOS_TEST
  Normal end of execution.

R8_ACOSH_TEST
  Python version: 3.6.9
  R8_ACOSH computes the arc-hyperbolic-cosine of an angle.

       X            A=R8_ACOSH(X)    COSH(A)

               1               0               1
             1.5        0.962424             1.5
               2         1.31696               2
             2.5          1.5668             2.5
               3         1.76275               3
             3.5         1.92485             3.5
               4         2.06344               4
             4.5         2.18464             4.5
               5         2.29243               5

R8_ACOSH_TEST
  Normal end of execution.

R8_ADD_TEST
  Python version: 3.6.9
  R8_ADD adds two R8's.

       R1             R2              R3              R4
                                      R1+R2     R8_ADD(R1,R2)

        -281.582         456.318         174.736         174.736
         329.509         61.6954         391.205         391.205
        -84.6929        -433.881        -518.574        -518.574
        -242.422        -390.043        -632.465        -632.465
        -456.171         133.966        -322.205        -322.205

R8_ADD_TEST
  Normal end of execution.

R8_AGM_TEST:
  Python version: 3.6.9
  R8_AGM computes the arithmetic geometric mean.

             X              Y              AGM           AGM
                                           Exact         Computed

       22.000000       96.000000         52.27464119870424         52.27464119870424
       83.000000       56.000000         68.83653005985852         68.83653005985852
       42.000000        7.000000         20.65930119673401         20.65930119673401
       26.000000       11.000000         17.69685487374365         17.69685487374367
        4.000000       63.000000          23.8670497217533          23.8670497217533
        6.000000       45.000000         20.71701598280599         20.71701598280599
       40.000000       75.000000         56.12784225561668         56.12784225561668
       80.000000        0.000000                         0                         0
       90.000000       35.000000         59.26956508122964         59.26956508122989
        9.000000        1.000000         3.936235503649555         3.936235503649556
       53.000000       53.000000                        53                        53
        1.000000        2.000000         1.456791031046907         1.456791031046907
        1.000000        4.000000         2.243028580287603         2.243028580287603
        1.000000        8.000000         3.615756177597363         3.615756177597363

R8_AGM_TEST
  Normal end of execution.

R8_AINT_TEST
  Python version: 3.6.9
  R8_AINT truncates a real number to its integer part.

        X           R8_AINT(X)

     -5.631634     -5.000000
      9.126352      9.000000
      6.590185      6.000000
      1.233909      1.000000
     -1.693858     -1.000000
     -8.677625     -8.000000
     -4.848444     -4.000000
     -7.800864     -7.000000
     -9.123420     -9.000000
      2.679314      2.000000

R8_AINT_TEST
  Normal end of execution.

R8_ASIN_TEST
  Python version: 3.6.9
  R8_ASIN computes the arc-sine of an angle.

       S            R8_ASIN(S)        ARCSIN(S)

        -1.16667         -1.5708
              -1         -1.5708         -1.5708
       -0.833333       -0.985111       -0.985111
       -0.666667       -0.729728       -0.729728
            -0.5       -0.523599       -0.523599
       -0.333333       -0.339837       -0.339837
       -0.166667       -0.167448       -0.167448
               0               0               0
        0.166667        0.167448        0.167448
        0.333333        0.339837        0.339837
             0.5        0.523599        0.523599
        0.666667        0.729728        0.729728
        0.833333        0.985111        0.985111
               1          1.5708          1.5708
         1.16667          1.5708

R8_ASIN_TEST
  Normal end of execution.

R8_ASINH_TEST
  Python version: 3.6.9
  R8_ASINH computes the inverse hyperbolic sine.

        X           R8_ASINH(X)   SINH(R8_SINH(X))

      1.000000      0.881374      1.000000
      1.200000      1.015973      1.200000
      1.400000      1.137982      1.400000
      1.600000      1.248983      1.600000
      1.800000      1.350441      1.800000
      2.000000      1.443635      2.000000
      2.200000      1.529660      2.200000
      2.400000      1.609438      2.400000
      2.600000      1.683743      2.600000
      2.800000      1.753229      2.800000

R8_ASINH_TEST
  Normal end of execution.

R8_ATAN_TEST
  Python version: 3.6.9
  R8_ATAN computes the arc-tangent given Y and X;
  ATAN2 is the system version of this routine.

  X     Y     ATAN2(Y,X)   R8_ATAN(Y,X)

      1.000000      0.000000      0.000000      0.000000
      1.000000      1.000000      0.785398      0.785398
      0.000000      1.000000      1.570796      1.570796
     -1.000000      1.000000      2.356194      2.356194
     -1.000000      0.000000      3.141593      3.141593
     -1.000000     -1.000000     -2.356194      3.926991
      0.000000     -1.000000     -1.570796      4.712389
      1.000000     -1.000000     -0.785398      5.497787

R8_ATAN_TEST
  Normal end of execution

R8_ATANH_TEST
  Python version: 3.6.9
  R8_ATANH computes the inverse hyperbolic tangent.

        X           R8_ATANH(X)   TANH(R8_TANH(X))

     -0.200000     -0.202733     -0.200000
     -0.100000     -0.100335     -0.100000
      0.000000      0.000000      0.000000
      0.100000      0.100335      0.100000
      0.200000      0.202733      0.200000
      0.300000      0.309520      0.300000
      0.400000      0.423649      0.400000
      0.500000      0.549306      0.500000
      0.600000      0.693147      0.600000
      0.700000      0.867301      0.700000
      0.800000      1.098612      0.800000
      0.900000      1.472219      0.900000

R8_ATANH_TEST
  Normal end of execution.

R8_BIG_TEST
  Python version: 3.6.9
  R8_BIG returns a "big" R8;

    R8_BIG =  1e+30

R8_BIG_TEST
  Normal end of execution.

R8_CAS_TEST
  Python version: 3.6.9
  R8_CAS evaluates the casine of a number.

	X	   R8_CAS ( X )

        0.000000        1.000000
        0.261799        1.224745
        0.523599        1.366025
        0.785398        1.414214
        1.047198        1.366025
        1.308997        1.224745
        1.570796        1.000000
        1.832596        0.707107
        2.094395        0.366025
        2.356194        0.000000
        2.617994       -0.366025
        2.879793       -0.707107
        3.141593       -1.000000

R8_CAS_TEST
  Normal end of execution.

R8_CEILING_TEST
  Python version: 3.6.9
  R8_CEILING rounds a value up.

       X       R8_CEILING(X)

       -1.200000        -1
       -1.000000        -1
       -0.800000         0
       -0.600000         0
       -0.400000         0
       -0.200000         0
        0.000000         0
        0.200000         1
        0.400000         1
        0.600000         1
        0.800000         1
        1.000000         1
        1.200000         2

R8_CEILING_TEST
  Normal end of execution.

R8_CHOOSE_TEST
  Python version: 3.6.9
  R8_CHOOSE evaluates C(N,K).

         N         K       CNK

         0         0               1

         1         0               1
         1         1               1

         2         0               1
         2         1               2
         2         2               1

         3         0               1
         3         1               3
         3         2               3
         3         3               1

         4         0               1
         4         1               4
         4         2               6
         4         3               4
         4         4               1

         5         0               1
         5         1               5
         5         2              10
         5         3              10
         5         4               5
         5         5               1

R8_CHOOSE_TEST
  Normal end of execution.

R8_CHOP_TEST
  Python version: 3.6.9
  R8_CHOP chops an R8 to IPLACE places

 PLACE           X         R8_CHOP

     0         3.141592653589793                         0
     1         3.141592653589793                         2
     2         3.141592653589793                         3
     3         3.141592653589793                         3
     4         3.141592653589793                         3
     5         3.141592653589793                     3.125
     6         3.141592653589793                     3.125
     7         3.141592653589793                     3.125
     8         3.141592653589793                  3.140625
     9         3.141592653589793                  3.140625
    10         3.141592653589793                  3.140625
    11         3.141592653589793                  3.140625
    12         3.141592653589793                  3.140625
    13         3.141592653589793             3.14111328125
    14         3.141592653589793            3.141357421875
    15         3.141592653589793           3.1414794921875
    16         3.141592653589793          3.14154052734375
    17         3.141592653589793         3.141571044921875
    18         3.141592653589793         3.141586303710938
    19         3.141592653589793         3.141586303710938
    20         3.141592653589793         3.141590118408203
    21         3.141592653589793         3.141592025756836
    22         3.141592653589793         3.141592025756836
    23         3.141592653589793         3.141592502593994
    24         3.141592653589793         3.141592502593994
    25         3.141592653589793         3.141592621803284
    26         3.141592653589793         3.141592621803284
    27         3.141592653589793         3.141592651605606
    28         3.141592653589793         3.141592651605606
    29         3.141592653589793         3.141592651605606
    30         3.141592653589793         3.141592651605606
    31         3.141592653589793         3.141592653468251
    32         3.141592653589793         3.141592653468251

R8_CHOP_TEST
  Normal end of execution.

R8_COSD_TEST
  Python version: 3.6.9
  R8_COSD computes the cosine of an angle
  given in degrees.

  ANGLE    R8_COSD(ANGLE)

      0.00               1
     15.00        0.965926
     30.00        0.866025
     45.00        0.707107
     60.00             0.5
     75.00        0.258819
     90.00     6.12323e-17
    105.00       -0.258819
    120.00            -0.5
    135.00       -0.707107
    150.00       -0.866025
    165.00       -0.965926
    180.00              -1
    195.00       -0.965926
    210.00       -0.866025
    225.00       -0.707107
    240.00            -0.5
    255.00       -0.258819
    270.00    -1.83697e-16
    285.00        0.258819
    300.00             0.5
    315.00        0.707107
    330.00        0.866025
    345.00        0.965926
    360.00               1

R8_COSD_TEST
  Normal end of execution.

R8_COTD_TEST
  Python version: 3.6.9
  R8_COTD computes the cotangent of an angle
  given in degrees.

  ANGLE    R8_COTD(ANGLE)

      0.00    Undefined
     15.00         3.73205
     30.00         1.73205
     45.00               1
     60.00         0.57735
     75.00        0.267949
     90.00     6.12323e-17
    105.00       -0.267949
    120.00        -0.57735
    135.00              -1
    150.00        -1.73205
    165.00        -3.73205
    180.00    Undefined
    195.00         3.73205
    210.00         1.73205
    225.00               1
    240.00         0.57735
    255.00        0.267949
    270.00     1.83697e-16
    285.00       -0.267949
    300.00        -0.57735
    315.00              -1
    330.00        -1.73205
    345.00        -3.73205
    360.00    Undefined

R8_COTD_TEST
  Normal end of execution.

R8_CSC_TEST
  Python version: 3.6.9
  R8_CSC computes the cosecant of an angle.

  ANGLE    R8_CSC(ANGLE)

      0.00    Undefined
     15.00         1.46037
     30.00        -1.00194
     45.00         1.29876
     60.00        -8.05172
     75.00        -1.69796
     90.00          1.0177
    105.00        -1.18588
    120.00         4.05727
    135.00         2.06607
    150.00        -1.05049
    165.00         1.10683
    180.00    Undefined
    195.00        -2.69119
    210.00         1.10311
    225.00        -1.05294
    240.00         2.09321
    255.00         3.94632
    270.00        -1.18053
    285.00          1.0191
    300.00        -1.71484
    315.00        -7.61642
    330.00         1.29113
    345.00        -1.00241
    360.00    Undefined

R8_CSC_TEST
  Normal end of execution.

R8_CSCD_TEST
  Python version: 3.6.9
  R8_CSCD computes the cosecant of an angle
  given in degrees.

  ANGLE    R8_CSCD(ANGLE)

      0.00    Undefined
     15.00          3.8637
     30.00               2
     45.00         1.41421
     60.00          1.1547
     75.00         1.03528
     90.00               1
    105.00         1.03528
    120.00          1.1547
    135.00         1.41421
    150.00               2
    165.00          3.8637
    180.00    Undefined
    195.00         -3.8637
    210.00              -2
    225.00        -1.41421
    240.00         -1.1547
    255.00        -1.03528
    270.00              -1
    285.00        -1.03528
    300.00         -1.1547
    315.00        -1.41421
    330.00              -2
    345.00         -3.8637
    360.00    Undefined

R8_CSCD_TEST
  Normal end of execution.

R8_CUBE_ROOT_TEST
  Python version: 3.6.9
  R8_CUBE_ROOT computes the cube root of an R8.

       X               Y               Y^3

        -5.63163        -1.77915        -5.63163
         9.12635         2.08977         9.12635
         6.59018         1.87485         6.59018
         1.23391         1.07258         1.23391
        -1.69386        -1.19204        -1.69386
        -8.67763        -2.05495        -8.67763
        -4.84844        -1.69252        -4.84844
        -7.80086        -1.98327        -7.80086
        -9.12342        -2.08955        -9.12342
         2.67931         1.38891         2.67931

R8_CUBE_ROOT_TEST
  Normal end of execution.

R8_DEGREES_TEST
  Python version: 3.6.9
  R8_DEGREES converts an angle from radians to degrees..

	 Radians         Degrees

        0.000000        0.000000
        0.261799       15.000000
        0.523599       30.000000
        0.785398       45.000000
        1.047198       60.000000
        1.308997       75.000000
        1.570796       90.000000
        1.832596      105.000000
        2.094395      120.000000
        2.356194      135.000000
        2.617994      150.000000
        2.879793      165.000000
        3.141593      180.000000

R8_DEGREES_TEST
  Normal end of execution.

R8_DIFF_TEST
  Python version: 3.6.9
  R8_DIFF computes a difference X-Y to a given
  number of binary places.

  For this test, we use 3 binary places.

       X       Y       X-Y    R8_DIFF(X,Y)

    1.000000    0.062500    0.937500    0.875000
    1.000000    0.125000    0.875000    0.875000
    1.000000    0.250000    0.750000    0.750000
    1.000000    0.500000    0.500000    0.500000
    1.000000    0.874000    0.126000    0.125000
    1.000000    0.876000    0.124000    0.125000
    1.000000    0.900000    0.100000    0.125000
    1.000000    0.950000    0.050000    0.000000
    1.000000    0.990000    0.010000    0.000000
    1.000000    1.000000    0.000000    0.000000
    1.000000    1.010000   -0.010000    0.000000
    1.000000    1.050000   -0.050000    0.000000
    1.000000    1.100000   -0.100000   -0.137500
    1.000000    3.000000   -2.000000   -1.875000
    1.000000   10.000000   -9.000000   -8.750000

R8_DIFF_TEST
  Normal end of execution.

R8_DIGIT_TEST
  Python version: 3.6.9
  R8_DIGIT extracts decimal digits.

  Here, we get digits of 3.14159


 -1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

 -2 -1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

R8_DIGIT_TEST
  Normal end of execution.

R8_DIVIDE_I4_TEST
  Python version: 3.6.9
  R8_DIVIDE_I4 computes an integer ratio as a real number.

     I     J    I/J  I//J  R8_DIVIDE_I4(I,J)

    -3    -2     1     1  1.5
    -3    -1     3     3  3
    -3     1    -3    -3  -3
    -3     2    -1    -2  -1.5
    -3     3    -1    -1  -1
    -3     4     0    -1  -0.75
    -2    -2     1     1  1
    -2    -1     2     2  2
    -2     1    -2    -2  -2
    -2     2    -1    -1  -1
    -2     3     0    -1  -0.666667
    -2     4     0    -1  -0.5
    -1    -2     0     0  0.5
    -1    -1     1     1  1
    -1     1    -1    -1  -1
    -1     2     0    -1  -0.5
    -1     3     0    -1  -0.333333
    -1     4     0    -1  -0.25
     0    -2     0     0  -0
     0    -1     0     0  -0
     0     1     0     0  0
     0     2     0     0  0
     0     3     0     0  0
     0     4     0     0  0
     1    -2     0    -1  -0.5
     1    -1    -1    -1  -1
     1     1     1     1  1
     1     2     0     0  0.5
     1     3     0     0  0.333333
     1     4     0     0  0.25
     2    -2    -1    -1  -1
     2    -1    -2    -2  -2
     2     1     2     2  2
     2     2     1     1  1
     2     3     0     0  0.666667
     2     4     0     0  0.5
     3    -2    -1    -2  -1.5
     3    -1    -3    -3  -3
     3     1     3     3  3
     3     2     1     1  1.5
     3     3     1     1  1
     3     4     0     0  0.75
     4    -2    -2    -2  -2
     4    -1    -4    -4  -4
     4     1     4     4  4
     4     2     2     2  2
     4     3     1     1  1.33333
     4     4     1     1  1
     5    -2    -2    -3  -2.5
     5    -1    -5    -5  -5
     5     1     5     5  5
     5     2     2     2  2.5
     5     3     1     1  1.66667
     5     4     1     1  1.25
     6    -2    -3    -3  -3
     6    -1    -6    -6  -6
     6     1     6     6  6
     6     2     3     3  3
     6     3     2     2  2
     6     4     1     1  1.5
     7    -2    -3    -4  -3.5
     7    -1    -7    -7  -7
     7     1     7     7  7
     7     2     3     3  3.5
     7     3     2     2  2.33333
     7     4     1     1  1.75

R8_DIVIDE_I4_TEST
  Normal end of execution.

R8_E_TEST
  Python version: 3.6.9
  R8_E returns the value of E.
  Compare E to (1+1/n)^n
  R8_E = 2.71828

        N     Estimate      Error

         1               2        0.718282
         2            2.25        0.468282
         4         2.44141        0.276876
         8         2.56578        0.152497
        16         2.63793       0.0803533
        32         2.67699       0.0412917
        64         2.69734       0.0209369
       128         2.70774       0.0105428
       256         2.71299       0.0052902
       512         2.71563      0.00264983
      1024         2.71696       0.0013261
      2048         2.71762     0.000663346
      4096         2.71795     0.000331747
      8192         2.71812     0.000165892
     16384          2.7182     8.29507e-05
     32768         2.71824     4.14765e-05
     65536         2.71826     2.07386e-05
    131072         2.71827     1.03693e-05
    262144         2.71828     5.18469e-06
    524288         2.71828     2.59235e-06
   1048576         2.71828     1.29618e-06

R8_E_TEST
  Normal end of execution.

R8_EPSILON_TEST
  Python version: 3.6.9
  R8_EPSILON produces the R8 roundoff unit.

  R = R8_EPSILON()         = 2.220446e-16
  ( 1 + R ) - 1            = 2.220446e-16
  ( 1 + (R/2) ) - 1        = 0.000000e+00

R8_EPSILON_TEST
  Normal end of execution.

R8_EPSILON_COMPUTE_TEST
  Python version: 3.6.9
  R8_EPSILON_COMPUTE computes the R8 roundoff unit.

  R = R8_EPSILON_COMPUTE() = 2.220446e-16
  ( 1 + R ) - 1            = 2.220446e-16
  ( 1 + (R/2) ) - 1        = 0.000000e+00

R8_EPSILON_COMPUTE_TEST
  Normal end of execution.

R8_EXP_TEST
  Python version: 3.6.9
  R8_EXP returns the exponential of a real number.

        X           R8_EXP(X)

           -80             0
           -70             0
           -60   8.75651e-27
           -50   1.92875e-22
           -40   4.24835e-18
           -30   9.35762e-14
           -20   2.06115e-09
           -10   4.53999e-05
             0             1
            10       22026.5
            20   4.85165e+08
            30   1.06865e+13
            40   2.35385e+17
            50   5.18471e+21
            60   1.14201e+26
            70         1e+30
            80         1e+30

R8_EXP_TEST
  Normal end of execution.

R8_FACTORIAL_TEST
  Python version: 3.6.9
  R8_FACTORIAL evaluates the factorial function.

      N                     Exact                  Computed
     0                         1                         1
     1                         1                         1
     2                         2                         2
     3                         6                         6
     4                        24                        24
     5                       120                       120
     6                       720                       720
     7                      5040                      5040
     8                     40320                     40320
     9                    362880                    362880
    10                   3628800                   3628800
    11                  39916800                  39916800
    12                 479001600                 479001600
    13                6227020800                6227020800
    14               87178291200               87178291200
    15             1307674368000             1307674368000
    16            20922789888000            20922789888000
    17           355687428096000           355687428096000
    18          6402373705728000          6402373705728000
    19      1.21645100408832e+17      1.21645100408832e+17
    20      2.43290200817664e+18      2.43290200817664e+18
    25     1.551121004333099e+25     1.551121004333099e+25
    50     3.041409320171338e+64     3.041409320171338e+64
   100    9.332621544394415e+157     9.33262154439441e+157
   150    5.713383956445855e+262     5.71338395644585e+262

R8_FACTORIAL_TEST
  Normal end of execution.

R8_FACTORIAL_STIRLING_TEST
  Python version: 3.6.9
  R8_FACTORIAL_STIRLING computes Stirling's
  approximate factorial function

  N      Factorial    Factorial
         Stirling

       1         1.00227               1
       2         2.00065               2
       3          6.0006               6
       4          24.001              24
       5         120.003             120
       6         720.009             720
       7         5040.04            5040
       8         40320.2           40320
       9          362881          362880
      10     3.62881e+06      3.6288e+06
      11     3.99169e+07     3.99168e+07
      12     4.79002e+08     4.79002e+08
      13     6.22703e+09     6.22702e+09
      14     8.71784e+10     8.71783e+10
      15     1.30768e+12     1.30767e+12
      16     2.09228e+13     2.09228e+13
      17     3.55688e+14     3.55687e+14
      18     6.40238e+15     6.40237e+15
      19     1.21645e+17     1.21645e+17
      20      2.4329e+18      2.4329e+18

R8_FACTORIAL_STIRLING_TEST
  Normal end of execution.

R8_FACTORIAL_VALUES_TEST:
  Python version: 3.6.9
  R8_FACTORIAL_VALUES returns values of the real factorial function.

          N          R8_FACTORIAL(N)

         0               1
         1               1
         2               2
         3               6
         4              24
         5             120
         6             720
         7            5040
         8           40320
         9          362880
        10      3.6288e+06
        11     3.99168e+07
        12     4.79002e+08
        13     6.22702e+09
        14     8.71783e+10
        15     1.30767e+12
        16     2.09228e+13
        17     3.55687e+14
        18     6.40237e+15
        19     1.21645e+17
        20      2.4329e+18
        25     1.55112e+25
        50     3.04141e+64
       100    9.33262e+157
       150    5.71338e+262

R8_FACTORIAL_VALUES_TEST:
  Normal end of execution.

R8_FACTORIAL2_TEST
  Python version: 3.6.9
  R8_FACTORIAL2 evaluates the double factorial function.

      N                     Exact                  Computed
     0                         1                         1
     1                         1                         1
     2                         2                         2
     3                         3                         3
     4                         8                         8
     5                        15                        15
     6                        48                        48
     7                       105                       105
     8                       384                       384
     9                       945                       945
    10                      3840                      3840
    11                     10395                     10395
    12                     46080                     46080
    13                    135135                    135135
    14                    645120                    645120
    15                   2027025                   2027025

R8_FACTORIAL2_TEST
  Normal end of execution.

R8_FACTORIAL2_VALUES_TEST:
  Python version: 3.6.9
  R8_FACTORIAL2_VALUES returns values of the double factorial function.

     N        N!!

     0               1
     1               1
     2               2
     3               3
     4               8
     5              15
     6              48
     7             105
     8             384
     9             945
    10            3840
    11           10395
    12           46080
    13          135135
    14          645120
    15     2.02702e+06

R8_FACTORIAL2_VALUES_TEST:
  Normal end of execution.

R8_FALL_TEST
  Python version: 3.6.9
  R8_FALL evaluates the falling factorial Fall(X,N).

      X        N                     Exact                  Computed
         5     4                       120                       120
      5.25     4              163.16015625              163.16015625
       5.5     4                  216.5625                  216.5625
      5.75     4              281.66015625              281.66015625
         6     4                       360                       360
       7.5     0                         1                         1
       7.5     1                       7.5                       7.5
       7.5     2                     48.75                     48.75
       7.5     3                   268.125                   268.125
       7.5     4                 1206.5625                 1206.5625
       7.5     5                4222.96875                4222.96875
       7.5     6              10557.421875              10557.421875
       7.5     7             15836.1328125             15836.1328125
       7.5     8             7918.06640625             7918.06640625
       7.5     9           -3959.033203125           -3959.033203125

R8_FALL_TEST
  Normal end of execution.

R8_FALL_VALUES_TEST:
  Python version: 3.6.9
  R8_FALL_VALUES returns values of the falling factorial.

          X         N          R8_FALL(X,N)

    5.0000         4                       120
    5.2500         4              163.16015625
    5.5000         4                  216.5625
    5.7500         4              281.66015625
    6.0000         4                       360
    7.5000         0                         1
    7.5000         1                       7.5
    7.5000         2                     48.75
    7.5000         3                   268.125
    7.5000         4                 1206.5625
    7.5000         5                4222.96875
    7.5000         6              10557.421875
    7.5000         7             15836.1328125
    7.5000         8             7918.06640625
    7.5000         9           -3959.033203125

R8_FALL_VALUES_TEST:
  Normal end of execution.

R8_FLOOR_TEST
  Python version: 3.6.9
  R8_FLOOR returns the "floor" of a real number.

        X           R8_FLOOR(X)

     -5.631634     -6.000000
      9.126352      9.000000
      6.590185      6.000000
      1.233909      1.000000
     -1.693858     -2.000000
     -8.677625     -9.000000
     -4.848444     -5.000000
     -7.800864     -8.000000
     -9.123420    -10.000000
      2.679314      2.000000

R8_FLOOR_TEST
  Normal end of execution.

R8_FRACTION_TEST:
  Python version: 3.6.9
  R8_FRACTION computes a ratio of integers using real arithmetic.

       I       J     I/J  R8_FRACTION(I,J)

       5      20       0  0.25
      17      12       1  1.41667
       9       2       4  4.5
       6       3       2  2
       1      13       0  0.0769231
       2       9       0  0.222222
       9      16       0  0.5625
      16       1      16  16
      18       8       2  2.25
       2       1       2  2

R8_FRACTION_TEST
  Normal end of execution.

R8_FRACTIONAL_TEST
  Python version: 3.6.9
  R8_FRACTIONAL returns the fractional part of an R8.

       X       R8_FRACTIONAL(X)

   -1.252654    0.252654
    4.650541    0.650541
    3.636074    0.636074
    1.493564    0.493564
    0.322457    0.322457
   -2.471050    0.471050
   -0.939378    0.939378
   -2.120346    0.120346
   -2.649368    0.649368
    2.071726    0.071726

R8_FRACTIONAL_TEST
  Normal end of execution.

R8_GAMMA_TEST:
  Python version: 3.6.9
  R8_GAMMA evaluates the Gamma function.

      X            GAMMA(X)      R8_GAMMA(X)

          -0.5        -3.544907701811032        -3.544907701811032
         -0.01        -100.5871979644108        -100.5871979644108
          0.01          99.4325851191506          99.4325851191506
           0.1         9.513507698668732         9.513507698668731
           0.2         4.590843711998803         4.590843711998803
           0.4         2.218159543757688         2.218159543757688
           0.5         1.772453850905516         1.772453850905516
           0.6         1.489192248812817         1.489192248812817
           0.8         1.164229713725303         1.164229713725303
             1                         1                         1
           1.1        0.9513507698668732        0.9513507698668732
           1.2        0.9181687423997607        0.9181687423997607
           1.3        0.8974706963062772        0.8974706963062772
           1.4        0.8872638175030753        0.8872638175030754
           1.5        0.8862269254527581        0.8862269254527581
           1.6        0.8935153492876903        0.8935153492876903
           1.7        0.9086387328532904        0.9086387328532904
           1.8        0.9313837709802427        0.9313837709802427
           1.9        0.9617658319073874        0.9617658319073874
             2                         1                         1
             3                         2                         2
             4                         6                         6
            10                    362880                    362880
            20      1.21645100408832e+17     1.216451004088321e+17
            30     8.841761993739702e+30     8.841761993739751e+30

R8_GAMMA_TEST
  Normal end of execution.

R8_GAMMA_LOG_TEST:
  Python version: 3.6.9
  R8_GAMMA_LOG evaluates the logarithm of the Gamma function.

      X            GAMMA_LOG(X)    R8_GAMMA_LOG(X)

           0.2         1.524063822430784         1.524063822430784
           0.4        0.7966778177017837        0.7966778177017837
           0.6        0.3982338580692348        0.3982338580692349
           0.8        0.1520596783998375        0.1520596783998376
             1                         0                         0
           1.1      -0.04987244125983972      -0.04987244125983976
           1.2      -0.08537409000331583      -0.08537409000331585
           1.3       -0.1081748095078604       -0.1081748095078605
           1.4       -0.1196129141723712       -0.1196129141723713
           1.5       -0.1207822376352452       -0.1207822376352453
           1.6       -0.1125917656967557       -0.1125917656967558
           1.7      -0.09580769740706586      -0.09580769740706586
           1.8      -0.07108387291437215      -0.07108387291437215
           1.9      -0.03898427592308333      -0.03898427592308337
             2                         0                         0
             3        0.6931471805599453        0.6931471805599454
             4         1.791759469228055         1.791759469228055
            10         12.80182748008147         12.80182748008147
            20         39.33988418719949         39.33988418719949
            30         71.25703896716801           71.257038967168

R8_GAMMA_LOG_TEST
  Normal end of execution.

R8_HEAVISIDE_TEST
  Python version: 3.6.9
  R8_HEAVISIDE evaluates the Heaviside step function.

             x  heaviside(x)

            -1             0
          -0.8             0
          -0.6             0
          -0.4             0
          -0.2             0
             0           0.5
           0.2             1
           0.4             1
           0.6             1
           0.8             1
             1             1

R8_HEAVISIDE_TEST
  Normal end of execution.

R8_HUGE_TEST
  Python version: 3.6.9
  R8_HUGE returns a "huge" R8;

    R8_HUGE = 1.79769e+308

R8_HUGE_TEST
  Normal end of execution.

R8_HYPOT_TEST
  Python version: 3.6.9
  R8_HYPOT returns an accurate value for sqrt(A^2+B^2).

             A          B          R8_HYPOT      sqrt(A^2+B^2)

             1             1         1.414213562373095         1.414213562373095
             1           0.5         1.118033988749895         1.118033988749895
             1          0.25         1.030776406404415         1.030776406404415
             1         0.125         1.007782218537319         1.007782218537319
             1        0.0625         1.001951221367587         1.001951221367587
             1       0.03125         1.000488162098883         1.000488162098883
             1      0.015625         1.000122062862829         1.000122062862829
             1     0.0078125         1.000030517112478         1.000030517112478
             1    0.00390625         1.000007629365428         1.000007629365428
             1    0.00195312         1.000001907346814         1.000001907346814
             1   0.000976562         1.000000476837045         1.000000476837045
             1   0.000488281         1.000000119209282         1.000000119209282
             1   0.000244141         1.000000029802322         1.000000029802322
             1    0.00012207         1.000000007450581         1.000000007450581
             1   6.10352e-05         1.000000001862645         1.000000001862645
             1   3.05176e-05         1.000000000465661         1.000000000465661
             1   1.52588e-05         1.000000000116415         1.000000000116415
             1   7.62939e-06         1.000000000029104         1.000000000029104
             1    3.8147e-06         1.000000000007276         1.000000000007276
             1   1.90735e-06         1.000000000001819         1.000000000001819

R8_HYPOT_TEST
  Normal end of execution.

R8_IS_IN_01_TEST
  Python version: 3.6.9
  R8_IS_IN_01 reports whether an R8 is in [0,1].

      R8    R8_IS_IN_01?

     -0.34  False
      1.87  False
      1.49  False
      0.69  True
      0.25  True
     -0.80  False
     -0.23  False
     -0.67  False
     -0.87  False
      0.90  True

R8_IS_IN_01_TEST
  Normal end of execution.

R8_IS_INF_TEST
  Python version: 3.6.9
  R8_IS_INF reports whether an R8 is infinite.

  These tests are wasted, since all the arithmetic
  operations return run time errors.

  R8_IS_INF(1.0) = False
  In Python, 1.0/0.0 causes a run time error!
  In Python, 0.0/0.0 causes a run time error!
  R8_IS_INF(0^0) = False
  In Python, arccos(-2.0) causes a run time error!
  In Python, exp(1000) causes a run time overflow warning!
  In Python, log(0) causes a run time error!
  In Python, sqrt(-1) causes a run time error!

R8_IS_INF_TEST
  Normal end of execution.

R8_IS_INSIGNIFICANT_TEST:
  R8_IS_INSIGNIFICANT ( R, S ) is TRUE is S is insignificant
  compared to R.

               R               S  Insignificant?

           1e-30           1e-30  False
     2.22045e-16           1e-30  False
               1           1e-30  True
           1e+30           1e-30  True

           1e-30     2.22045e-16  False
     2.22045e-16     2.22045e-16  False
               1     2.22045e-16  True
           1e+30     2.22045e-16  True

           1e-30               1  False
     2.22045e-16               1  False
               1               1  False
           1e+30               1  True

           1e-30           1e+30  False
     2.22045e-16           1e+30  False
               1           1e+30  False
           1e+30           1e+30  False

R8_IS_INSIGNIFICANT_TEST:
  Normal end of execution.

R8_IS_INTEGER_TEST
  Python version: 3.6.9
  R8_IS_INTEGER reports whether an R8 stores an integer value.

   -1.1429  False
   -1.0000  True
   -0.8571  False
   -0.7143  False
   -0.5714  False
   -0.4286  False
   -0.2857  False
   -0.1429  False
    0.0000  True
    0.1429  False
    0.2857  False
    0.4286  False
    0.5714  False
    0.7143  False
    0.8571  False
    1.0000  True
    1.1429  False
    1.2857  False
    1.4286  False
    1.5714  False
    1.7143  False
    1.8571  False
    2.0000  True
    2.1429  False

R8_IS_INTEGER_TEST
  Normal end of execution.

R8_IS_NAN_TEST
  Python version: 3.6.9
  R8_IS_NAN reports whether an R8 is a NaN.

  These tests are wasted, since all the arithmetic
  operations return run time errors.

  R8_IS_NAN(1.0) = 0
  In Python, 1.0/0.0 just sets a run time error.
  In Python, 0.0/0.0 just sets a run time error.
  R8_IS_NAN(0^0) = 0
  In Python, arccos(-2.0) just sets a run time warning.
  In Python, exp(1000) just sets a run time warning.
  In Python, log(0.0) just sets a run time warning.
  In Python, sqrt(-1.0) just sets a run time warning.

R8_IS_NAN_TEST
  Normal end of execution.

R8_LOG_10_TEST
  Python version: 3.6.9
  R8_LOG_10 computes the logarithm base 10.

      X      R8_LOG_10

      0.000000          -inf
      1.000000      0.000000
      2.000000      0.301030
      3.000000      0.477121
      9.000000      0.954243
     10.000000      1.000000
     11.000000      1.041393
     99.000000      1.995635
    101.000000      2.004321
     -1.000000      0.000000
     -2.000000      0.301030
     -3.000000      0.477121
     -9.000000      0.954243
      0.500000     -0.301030
      0.330000     -0.481486
      0.250000     -0.602060
      0.200000     -0.698970
      0.010000     -2.000000

R8_LOG_10_TEST
  Normal end of execution.

R8_LOG_2_TEST
  Python version: 3.6.9
  R8_LOG_2 computes the logarithm base 2.

      X      R8_LOG_2

      0.000000          -inf
      1.000000      0.000000
      2.000000      1.000000
      3.000000      1.584963
      9.000000      3.169925
     10.000000      3.321928
     11.000000      3.459432
     99.000000      6.629357
    101.000000      6.658211
     -1.000000      0.000000
     -2.000000      1.000000
     -3.000000      1.584963
     -9.000000      3.169925
      0.500000     -1.000000
      0.330000     -1.599462
      0.250000     -2.000000
      0.200000     -2.321928
      0.010000     -6.643856

R8_LOG_2_TEST
  Normal end of execution.

R8_LOG_B_TEST
  Python version: 3.6.9
  R8_LOG_B computes the logarithm base B.

        X             B             R8_LOG_B

     16.000000      2.000000      4.000000
     16.000000      3.000000      2.523719
     16.000000      4.000000      2.000000
     16.000000      5.000000      1.722706
     16.000000      6.000000      1.547411
     16.000000      7.000000      1.424829
     16.000000      8.000000      1.333333
     16.000000     16.000000      1.000000
     16.000000     32.000000      0.800000
     16.000000    256.000000      0.500000

R8_LOG_B_TEST
  Normal end of execution.

R8_MANT_TEST
  Python version: 3.6.9
  R8_MANT decomposes a value.

  Number to be decomposed:
  -314.159

  R8_MANT: X = -1 * 1.227184 * 2^ 8

R8_MANT_TEST
  Normal end of execution.

R8_MAX_TEST
  Python version: 3.6.9
  R8_MAX computes the maximum of two R8's.

     A         B         C=R8_MAX(A,B)

  -5.63163   9.12635   9.12635
   6.59018   1.23391   6.59018
  -1.69386  -8.67763  -1.69386
  -4.84844  -7.80086  -4.84844
  -9.12342   2.67931   2.67931
  -8.76546  -1.00922  -1.00922
  -1.97387   5.09347   5.09347
   5.94574  -9.96323   5.94574
   7.95008  -2.98495   7.95008
   -8.1091  -9.72766   -8.1091

R8_MAX_TEST:
  Normal end of execution.

R8_MIN_TEST
  Python version: 3.6.9
  R8_MIN computes the minimum of two R8's.

     A         B         C=R8_MIN(A,B)

  -5.63163   9.12635  -5.63163
   6.59018   1.23391   1.23391
  -1.69386  -8.67763  -8.67763
  -4.84844  -7.80086  -7.80086
  -9.12342   2.67931  -9.12342
  -8.76546  -1.00922  -8.76546
  -1.97387   5.09347  -1.97387
   5.94574  -9.96323  -9.96323
   7.95008  -2.98495  -2.98495
   -8.1091  -9.72766  -9.72766

R8_MIN_TEST:
  Normal end of execution.

R8_MOD_TEST
  Python version: 3.6.9
  R8_MOD returns the remainder after division.

        X             Y             (X%Y)    R8_MOD(X,Y)

     -5.631634      9.126352      3.494717     -5.631634
      6.590185      1.233909      0.420640      0.420640
     -1.693858     -8.677625     -1.693858     -1.693858
     -4.848444     -7.800864     -4.848444     -4.848444
     -9.123420      2.679314      1.593837     -1.085477
     -8.765455     -1.009221     -0.691689     -0.691689
     -1.973874      5.093470      3.119595     -1.973874
      5.945739     -9.963233     -4.017493      5.945739
      7.950081     -2.984953     -1.004779      1.980175
     -8.109105     -9.727662     -8.109105     -8.109105

R8_MOD_TEST
  Normal end of execution.

R8_MODP_TEST
  Python version: 3.6.9
  R8_MODP returns the remainder after division.
  Unlike the MATLAB MOD, R8_MODP ( X, Y ) is positive.

      X       Y      MOD(X,Y)  R8_MODP(X,Y)

     -5.631634      9.126352      3.494717      3.494717
      6.590185      1.233909      0.420640      0.420640
     -1.693858     -8.677625     -1.693858      6.983767
     -4.848444     -7.800864     -4.848444      2.952420
     -9.123420      2.679314      1.593837      1.593837
     -8.765455     -1.009221     -0.691689      0.317532
     -1.973874      5.093470      3.119595      3.119595
      5.945739     -9.963233     -4.017493      5.945739
      7.950081     -2.984953     -1.004779      1.980175
     -8.109105     -9.727662     -8.109105      1.618557

R8_MODP_TEST
  Normal end of execution.

R8_MOP_TEST
  Python version: 3.6.9
  R8_MOP evaluates (-1.0)^I4 as an R8.

    I4  R8_MOP(I4)

   -57  -1.0
    92   1.0
    66   1.0
    12   1.0
   -17  -1.0
   -87  -1.0
   -49  -1.0
   -78   1.0
   -92   1.0
    27  -1.0

R8_MOP_TEST
  Normal end of execution.

R8_NINT_TEST
  Python version: 3.6.9
  R8_NINT produces the nearest integer.

      X      R8_NINT(X)

   -5.631634      -6
    9.126352      10
    6.590185       7
    1.233909       2
   -1.693858      -2
   -8.677625      -9
   -4.848444      -5
   -7.800864      -8
   -9.123420     -10
    2.679314       3

R8_NINT_TEST
  Normal end of execution.

R8_NORMAL_01_TEST
  Python version: 3.6.9
  R8_NORMAL_01 generates normally distributed
  random values.
  Using initial random number seed = 123456789

  1.679040
  -0.566060
  1.212934
  1.269381
  -1.666087
  -2.242464
  0.039675
  0.673068
  -0.275127
  2.164005
  0.297785
  2.044536
  1.398819
  -1.242985
  -0.067084
  -0.794396
  -0.523768
  -0.350567
  0.131700
  0.537380

R8_NORMAL_01_TEST
  Normal end of execution.

R8_NORMAL_AB_TEST
  Python version: 3.6.9
  R8_NORMAL_AB generates normally distributed values
  with given mean and standard deviation.
  Using initial random number seed = 123456789
  MEAN = 100
  STD = 10

  116.79
  94.3394
  112.129
  112.694
  83.3391
  77.5754
  100.397
  106.731
  97.2487
  121.64
  102.978
  120.445
  113.988
  87.5701
  99.3292
  92.056
  94.7623
  96.4943
  101.317
  105.374

R8_NORMAL_AB_TEST
  Normal end of execution.

R8_NTH_ROOT_TEST
  Python version: 3.6.9
  R8_NTH_ROOT computes the nth root of an R8.

         X        -3        -2        -1         0         1         2         3

        -3   -0.6934   -0.5774   -0.3333         1        -3       nan    -1.442
        -2   -0.7937   -0.7071      -0.5         1        -2       nan     -1.26
        -1        -1        -1        -1         1        -1       nan        -1
         0       inf       inf       inf         1         0         0         0
         1         1         1         1         1         1         1         1
         2    0.7937    0.7071       0.5         1         2     1.414      1.26
         3    0.6934    0.5774    0.3333         1         3     1.732     1.442

R8_NTH_ROOT_TEST
  Normal end of execution.

R8_PI_TEST
  Python version: 3.6.9
  R8_PI returns the value of PI.

  R8_PI       =             3.1415926535897931
  4 * Atan(1) =       3.1415926535897931
  np.pi       =             3.1415926535897931

R8_PI_TEST
  Normal end of execution.

R8_PI_SQRT_TEST
  Python version: 3.6.9
  R8_PI_SQRT returns the square root of PI.

  R8_PI_SQRT           =       1.7724538509055161
  sqrt ( 4 * Atan(1) ) =       1.7724538509055159
  sqrt ( NP.PI )       =       1.7724538509055159

  NP.PI                =       3.1415926535897931
  R8_PI_SQRT ** 2      =       3.1415926535897936

R8_PI_SQRT_TEST
  Normal end of execution.

R8_POWER_TEST
  Python version: 3.6.9
  R8_POWER computes R^P.

      R          P       R8_POWER

        2.000000     -5        0.031250
        2.000000     -4        0.062500
        2.000000     -3        0.125000
        2.000000     -2        0.250000
        2.000000     -1        0.500000
        2.000000      0        1.000000
        2.000000      1        2.000000
        2.000000      2        4.000000
        2.000000      3        8.000000
        2.000000      4       16.000000
        2.000000      5       32.000000

R8_POWER_TEST
  Normal end of execution.

R8_POWER_FAST_TEST
  Python version: 3.6.9
  R8_POWER_FAST computes R^P, economizing on
  multiplications.

      R          P       R^P        Mults

      2.000000    -10      0.000977      7
      2.000000     -9      0.001953      7
      2.000000     -8      0.003906      6
      2.000000     -7      0.007812      7
      2.000000     -6      0.015625      6
      2.000000     -5      0.031250      6
      2.000000     -4      0.062500      5
      2.000000     -3      0.125000      5
      2.000000     -2      0.250000      4
      2.000000     -1      0.500000      1
      2.000000      0      1.000000      0
      2.000000      1      2.000000      0
      2.000000      2      4.000000      3
      2.000000      3      8.000000      4
      2.000000      4     16.000000      4
      2.000000      5     32.000000      5
      2.000000      6     64.000000      5
      2.000000      7    128.000000      6
      2.000000      8    256.000000      5
      2.000000      9    512.000000      6
      2.000000     10   1024.000000      6
      2.000000     11   2048.000000      7
      2.000000     12   4096.000000      6
      2.000000     13   8192.000000      7
      2.000000     14  16384.000000      7
      2.000000     15  32768.000000      8
      2.000000     16  65536.000000      6
      2.000000     17  131072.000000      7
      2.000000     18  262144.000000      7
      2.000000     19  524288.000000      8
      2.000000     20  1048576.000000      7
      2.000000     21  2097152.000000      8
      2.000000     22  4194304.000000      8
      2.000000     23  8388608.000000      9
      2.000000     24  16777216.000000      7
      2.000000     25  33554432.000000      8
      2.000000     26  67108864.000000      8
      2.000000     27  134217728.000000      9
      2.000000     28  268435456.000000      8
      2.000000     29  536870912.000000      9
      2.000000     30  1073741824.000000      9
      2.000000     31  2147483648.000000     10
      2.000000     32  4294967296.000000      7
      2.000000     33  8589934592.000000      8
      2.000000     34  17179869184.000000      8
      2.000000     35  34359738368.000000      9
      2.000000     36  68719476736.000000      8
      2.000000     37  137438953472.000000      9
      2.000000     38  274877906944.000000      9
      2.000000     39  549755813888.000000     10
      2.000000     40  1099511627776.000000      8

R8_POWER_FAST_TEST
  Normal end of execution.

R8_PRINT_TEST
  Python version: 3.6.9
  R8_PRINT prints an R8 with a label.

  The value np.pi:  3.14159
  The value 1.0:  1
  The value -123456789:  -1.23457e+08
  The value 1.23456789:  1.23457

R8_PRINT_TEST
  Normal end of execution.

R8_RADIANS_TEST
  Python version: 3.6.9
  R8_RADIANS converts an angle from degrees to radians.

	 Degrees         Radians

        0.000000        0.000000
       15.000000        0.261799
       30.000000        0.523599
       45.000000        0.785398
       60.000000        1.047198
       75.000000        1.308997
       90.000000        1.570796
      105.000000        1.832596
      120.000000        2.094395
      135.000000        2.356194
      150.000000        2.617994
      165.000000        2.879793
      180.000000        3.141593

R8_RADIANS_TEST
  Normal end of execution.

R8_RELU_TEST
  Python version: 3.6.9
  R8_RELU evaluates the ReLU function of an R8.
  This is max(x,0).

      X             R8_RELU(X)

        -500           0
         -50           0
          -5           0
          -4           0
          -3           0
          -2           0
          -1           0
        -0.5           0
       -0.05           0
      -0.005           0
     -0.0005           0
           0           0
      0.0005      0.0005
       0.005       0.005
        0.05        0.05
         0.5         0.5
           1           1
           2           2
           3           3
           4           4
           5           5
          50          50
         500         500
        5000        5000
       50000       50000

R8_RELU_TEST
  Normal end of execution.

R8_RISE_TEST
  Python version: 3.6.9
  R8_RISE evaluates the rising factorial Rise(X,N).

      X        N                     Exact                  Computed

         5     4                      1680                      1680
      5.25     4             1962.59765625             1962.59765625
       5.5     4                 2279.0625                 2279.0625
      5.75     4             2631.97265625             2631.97265625
         6     4                      3024                      3024
       7.5     0                         1                         1
       7.5     1                       7.5                       7.5
       7.5     2                     63.75                     63.75
       7.5     3                   605.625                   605.625
       7.5     4                 6359.0625                 6359.0625
       7.5     5               73129.21875               73129.21875
       7.5     6             914115.234375             914115.234375
       7.5     7          12340555.6640625          12340555.6640625
       7.5     8         178938057.1289063         178938057.1289062
       7.5     9         2773539885.498047         2773539885.498047

R8_RISE_TEST
  Normal end of execution.

R8_RISE_VALUES_TEST:
  Python version: 3.6.9
  R8_RISE_VALUES returns values of the rising factorial.

          X         N          R8_RISE(X,N)

    5.0000         4                      1680
    5.2500         4             1962.59765625
    5.5000         4                 2279.0625
    5.7500         4             2631.97265625
    6.0000         4                      3024
    7.5000         0                         1
    7.5000         1                       7.5
    7.5000         2                     63.75
    7.5000         3                   605.625
    7.5000         4                 6359.0625
    7.5000         5               73129.21875
    7.5000         6             914115.234375
    7.5000         7          12340555.6640625
    7.5000         8         178938057.1289063
    7.5000         9         2773539885.498047

R8_RISE_VALUES_TEST:
  Normal end of execution.

R8_ROUND_TEST
  Python version: 3.6.9
  R8_ROUND rounds a real number to a real number with integer value.

  X     XROUND

 21.841830  22.000000
 -95.631758  -96.000000
 82.950923  83.000000
 -56.169544  -56.000000
 41.530708  42.000000
 -6.611873  -7.000000
 25.757779  26.000000
 -10.995679  -11.000000
 4.382900  4.000000
 -63.396571  -63.000000

R8_ROUND_TEST
  Normal end of execution.

R8_ROUND2_TEST
  Python version: 3.6.9
  R8_ROUND2 rounds a number to a
  specified number of base 2 digits.

  Test effect on PI.
  X = 3.141593

  NPLACE  XROUND

         0  0.000000
         1  2.000000
         2  3.000000
         3  3.000000
         4  3.000000
         5  3.125000
         6  3.125000
         7  3.125000
         8  3.140625
         9  3.140625
        10  3.140625
        11  3.140625
        12  3.140625
        13  3.141113
        14  3.141357
        15  3.141479
        16  3.141541
        17  3.141571
        18  3.141586
        19  3.141586
        20  3.141590

R8_ROUND2_TEST
  Normal end of execution.

R8_ROUNDB_TEST
  Python version: 3.6.9
  R8_ROUNDB rounds a number to a
  specified number of base BASE digits.

  Here, we will use BASE = 3

  Test effect on PI:
  X = 3.141593

  NPLACE  XROUND

         0  0.000000
         1  3.000000
         2  3.000000
         3  3.000000
         4  3.111111
         5  3.111111
         6  3.135802
         7  3.139918
         8  3.141289
         9  3.141289
        10  3.141442
        11  3.141543
        12  3.141577
        13  3.141589
        14  3.141592
        15  3.141592
        16  3.141593
        17  3.141593
        18  3.141593
        19  3.141593
        20  3.141593

  Try with a negative base:

  Input quantity is X = 121.000000
  to be rounded in base -3

  Output value to 1 places is 81.000000

  Output value to 2 places is 108.000000

  Output value to 3 places is 117.000000

  Output value to 4 places is 120.000000

  Output value to 5 places is 121.000000

R8_ROUNDB_TEST
  Normal end of execution.

R8_ROUNDX_TEST
  Python version: 3.6.9
  R8_ROUNDX rounds a number to a
  specified number of decimal digits.

  Test effect on PI:
  X = 3.141593

  NPLACE  XROUND

       0  0.000000
       1  3.000000
       2  3.100000
       3  3.140000
       4  3.141000
       5  3.141500
       6  3.141590
       7  3.141592
       8  3.141593
       9  3.141593
      10  3.141593

  Test effect on random values:

  NPLACE  X     XROUND


       0  0.218418  0.000000
       2  0.218418  0.210000
       4  0.218418  0.218400
       6  0.218418  0.218418
       8  0.218418  0.218418
      10  0.218418  0.218418

       0  0.956318  0.000000
       2  0.956318  0.950000
       4  0.956318  0.956300
       6  0.956318  0.956317
       8  0.956318  0.956318
      10  0.956318  0.956318

       0  0.829509  0.000000
       2  0.829509  0.820000
       4  0.829509  0.829500
       6  0.829509  0.829509
       8  0.829509  0.829509
      10  0.829509  0.829509

       0  0.561695  0.000000
       2  0.561695  0.560000
       4  0.561695  0.561600
       6  0.561695  0.561695
       8  0.561695  0.561695
      10  0.561695  0.561695

       0  0.415307  0.000000
       2  0.415307  0.410000
       4  0.415307  0.415300
       6  0.415307  0.415307
       8  0.415307  0.415307
      10  0.415307  0.415307

R8_ROUNDX_TEST
  Normal end of execution.

R8_SECD_TEST
  Python version: 3.6.9
  R8_SECD computes the secant of an angle
  given in degrees.

  ANGLE    R8_SECD(ANGLE)

      0.00               1
     15.00         1.03528
     30.00          1.1547
     45.00         1.41421
     60.00               2
     75.00          3.8637
     90.00    Undefined
    105.00         -3.8637
    120.00              -2
    135.00        -1.41421
    150.00         -1.1547
    165.00        -1.03528
    180.00              -1
    195.00        -1.03528
    210.00         -1.1547
    225.00        -1.41421
    240.00              -2
    255.00         -3.8637
    270.00    Undefined
    285.00          3.8637
    300.00               2
    315.00         1.41421
    330.00          1.1547
    345.00         1.03528
    360.00               1

R8_SECD_TEST
  Normal end of execution.

R8_SECH_TEST
  Python version: 3.6.9
  R8_SECH computes the hyperbolic secant.

  X    R8_SECH(X)

          -1        0.648054
        -0.9        0.697795
        -0.8          0.7477
        -0.7        0.796705
        -0.6        0.843551
        -0.5        0.886819
        -0.4        0.925007
        -0.3        0.956628
        -0.2        0.980328
        -0.1        0.995021
           0               1
         0.1        0.995021
         0.2        0.980328
         0.3        0.956628
         0.4        0.925007
         0.5        0.886819
         0.6        0.843551
         0.7        0.796705
         0.8          0.7477
         0.9        0.697795
           1        0.648054

R8_SECH_TEST
  Normal end of execution.

r8_sigmoid_test
  Python version: 3.6.9
  r8_sigmoid evaluates the sigmoid function of R8.

      X         R8_SIGMOID(L,B,M,X)

          -4   0.0179862
          -2    0.119203
          -1    0.268941
        -0.5    0.377541
       -0.25    0.437823
           0         0.5
        0.25    0.562177
         0.5    0.622459
           1    0.731059
           2    0.880797
           4    0.982014

r8_sigmoid_test
  Normal end of execution.

R8_SIGN_TEST
  Python version: 3.6.9
  R8_SIGN returns the sign of an R8.

     R8     R8_SIGN(R8)

   -1.2500        -1
   -0.2500        -1
    0.0000         1
    0.5000         1
    9.0000         1

R8_SIGN_TEST
  Normal end of execution.

R8_SIGN_CHAR_TEST
  Python version: 3.6.9
  R8_SIGN_CHAR returns the sign of an R8 as a character.

      R8      R8_SIGNCHAR(R8)

   -2.815817    -
    4.563176    +
    3.295092    +
    0.616954    +
   -0.846929    -
   -4.338813    -
   -2.424222    -
   -3.900432    -
   -4.561710    -
    1.339657    +

R8_SIGN_CHAR_TEST
  Normal end of execution.

R8_SIGN_MATCH_TEST
  Python version: 3.6.9
  R8_SIGN_MATCH is TRUE if two R8's have matching signs.

        R1        R2        Match(R1,R2)?

    0.0000    0.0000  True
   -5.6316    9.1264  False
    6.5902    1.2339  True
   -1.6939   -8.6776  True
    0.0000   -4.8484  True
   -7.8009   -9.1234  True
    2.6793   -8.7655  False
   -1.0092   -1.9739  True
    0.0000    5.0935  True
    5.9457   -9.9632  False
    7.9501    0.0000  True
   -2.9850   -8.1091  True
    0.0000   -9.7277  True
    7.1819    6.8169  True
   -7.5379   -9.8498  True
   -4.7939    8.2497  False
    0.0000   -7.7267  True
   -2.9674    6.4577  False
   -4.6574    3.8413  False
    1.2332    7.2243  True
    0.0000    0.0000  True

R8_SIGN_MATCH_TEST
  Normal end of execution.

R8_SIGN_MATCH_STRICT_TEST
  Python version: 3.6.9
  R8_SIGN_MATCH_STRICT is TRUE if two R8's have matching signs.

        R1        R2        MatchStrict(R1,R2)?

    0.0000    0.0000  True
   -5.6316    9.1264  False
    6.5902    1.2339  True
   -1.6939   -8.6776  True
    0.0000   -4.8484  False
   -7.8009   -9.1234  True
    2.6793   -8.7655  False
   -1.0092   -1.9739  True
    0.0000    5.0935  False
    5.9457   -9.9632  False
    7.9501    0.0000  False
   -2.9850   -8.1091  True
    0.0000   -9.7277  False
    7.1819    6.8169  True
   -7.5379   -9.8498  True
   -4.7939    8.2497  False
    0.0000   -7.7267  False
   -2.9674    6.4577  False
   -4.6574    3.8413  False
    1.2332    7.2243  True
    0.0000    0.0000  True

R8_SIGN_MATCH_STRICT_TEST
  Normal end of execution.

R8_SIGN_OPPOSITE_TEST
  Python version: 3.6.9
  R8_SIGN_OPPOSITE is TRUE if two R8's have opposite signs.

        R1        R2        Opposite(R1,R2)?

    0.0000    0.0000  True
   -5.6316    9.1264  True
    6.5902    1.2339  False
   -1.6939   -8.6776  False
    0.0000   -4.8484  True
   -7.8009   -9.1234  False
    2.6793   -8.7655  True
   -1.0092   -1.9739  False
    0.0000    5.0935  True
    5.9457   -9.9632  True
    7.9501    0.0000  True
   -2.9850   -8.1091  False
    0.0000   -9.7277  True
    7.1819    6.8169  False
   -7.5379   -9.8498  False
   -4.7939    8.2497  True
    0.0000   -7.7267  True
   -2.9674    6.4577  True
   -4.6574    3.8413  True
    1.2332    7.2243  False
    0.0000    0.0000  True

R8_SIGN_OPPOSITE_TEST
  Normal end of execution.

R8_SIGN_OPPOSITE_STRICT_TEST
  Python version: 3.6.9
  R8_SIGN_OPPOSITE_STRICT is TRUE if two R8's have opposite signs.

        R1        R2        OppositeStrict(R1,R2)?

    0.0000    0.0000  False
   -5.6316    9.1264  True
    6.5902    1.2339  False
   -1.6939   -8.6776  False
    0.0000   -4.8484  False
   -7.8009   -9.1234  False
    2.6793   -8.7655  True
   -1.0092   -1.9739  False
    0.0000    5.0935  False
    5.9457   -9.9632  True
    7.9501    0.0000  False
   -2.9850   -8.1091  False
    0.0000   -9.7277  False
    7.1819    6.8169  False
   -7.5379   -9.8498  False
   -4.7939    8.2497  True
    0.0000   -7.7267  False
   -2.9674    6.4577  True
   -4.6574    3.8413  True
    1.2332    7.2243  False
    0.0000    0.0000  False

R8_SIGN_OPPOSITE_STRICT_TEST
  Normal end of execution.

R8_SIGN3_TEST
  Python version: 3.6.9
  R8_SIGN3 returns the three-way sign of an R8.

    R8  R8_SIGN3(R8)

     -1.25        -1
     -0.25        -1
         0         0
       0.5         1
         9         1

R8_SIGN3_TEST
  Normal end of execution.

R8_SINCOS_SUM_TEST
  Python version: 3.6.9
  R8_SINCOS_SUM simplifies a linear sine and cosine sum

    -2.81582 * sin ( 3.29509 * x ) + 4.56318 * cos ( 3.29509 * x )
  = 5.36203 * sin ( 3.29509 * x + 2.12368 )
  = 5.36203 * cos ( 3.29509 * x + 0.552879 )

   I      X              form 1        form 2        form 3

   0    0.000000       4.56318       4.56318       4.56318
   1    0.314159    -0.0925808    -0.0925808    -0.0925808
   2    0.628319      -4.65768      -4.65768      -4.65768
   3    0.942478      -4.66168      -4.66168      -4.66168
   4    1.256637     -0.100663     -0.100663     -0.100663
   5    1.570796       4.55893       4.55893       4.55893
   6    1.884956       4.75412       4.75412       4.75412
   7    2.199115      0.293777      0.293777      0.293777
   8    2.513274      -4.45425      -4.45425      -4.45425
   9    2.827433      -4.84039      -4.84039      -4.84039
  10    3.141593     -0.486508     -0.486508     -0.486508

R8_SINCOS_SUM_TEST
  Normal end of execution.

R8_SIND_TEST
  Python version: 3.6.9
  R8_SIND computes the sine of an angle
  given in degrees.

  ANGLE    R8_SIND(ANGLE)

      0.00               0
     15.00        0.258819
     30.00             0.5
     45.00        0.707107
     60.00        0.866025
     75.00        0.965926
     90.00               1
    105.00        0.965926
    120.00        0.866025
    135.00        0.707107
    150.00             0.5
    165.00        0.258819
    180.00     1.22465e-16
    195.00       -0.258819
    210.00            -0.5
    225.00       -0.707107
    240.00       -0.866025
    255.00       -0.965926
    270.00              -1
    285.00       -0.965926
    300.00       -0.866025
    315.00       -0.707107
    330.00            -0.5
    345.00       -0.258819
    360.00    -2.44929e-16

R8_SIND_TEST
  Normal end of execution.

R8_SOFTPLUS_TEST
  Python version: 3.6.9
  R8_SOFTPLUS evaluates the softplus function of an R8.
  This is a smoothed version of max(x,0).

      X         R8_SOFTPLUS(X)

        -500           0
         -50           0
          -5  0.00671535
          -4   0.0181499
          -3   0.0485874
          -2    0.126928
          -1    0.313262
        -0.5    0.474077
       -0.05     0.66846
      -0.005     0.69065
     -0.0005    0.692897
           0    0.693147
      0.0005    0.693397
       0.005     0.69565
        0.05     0.71846
         0.5    0.974077
           1     1.31326
           2     2.12693
           3     3.04859
           4     4.01815
           5     5.00672
          50          50
         500         500
        5000        5000
       50000       50000

R8_SOFTPLUS_TEST
  Normal end of execution.

R8_SQRT_I4_TEST
  Python version: 3.6.9
  R8_SQRT_I4 returns the square root of an I4 as an R8.

      I4      R8_SQRT_I4(I4)

      218418     467.352
      956318     977.915
      829510     910.774
      561696     749.464
      415307     644.443
       66118     257.134
      257578     507.521
      109956     331.596
       43829     209.354
      633966      796.22

R8_SQRT_I4_TEST
  Normal end of execution.

R8_SWAP_TEST
  Python version: 3.6.9
  R8_SWAP swaps two reals.

  Before swapping:

    X = 1.000000
    Y = 3.141590

  After swapping:

    X = 3.141590
    Y = 1.000000

R8_SWAP_TEST
  Normal end of execution.

R8_SWAP3_TEST
  Python version: 3.6.9
  R8_SWAP3 swaps three reals.

  Before  1  3.14159  1952

  Swap 0:  3.14159  1952  1
  Swap 1:  1952  1  3.14159
  Swap 2:  1  3.14159  1952

R8_SWAP3_TEST
  Normal end of execution.

R8_TAND_TEST
  Python version: 3.6.9
  R8_TAND computes the tangent of an angle
  given in degrees.

  ANGLE    R8_TAND(ANGLE)

      0.00               0
     15.00        0.267949
     30.00         0.57735
     45.00               1
     60.00         1.73205
     75.00         3.73205
     90.00    Undefined
    105.00        -3.73205
    120.00        -1.73205
    135.00              -1
    150.00        -0.57735
    165.00       -0.267949
    180.00    -1.22465e-16
    195.00        0.267949
    210.00         0.57735
    225.00               1
    240.00         1.73205
    255.00         3.73205
    270.00    Undefined
    285.00        -3.73205
    300.00        -1.73205
    315.00              -1
    330.00        -0.57735
    345.00       -0.267949
    360.00    -2.44929e-16

R8_TAND_TEST
  Normal end of execution.

R8_TINY_TEST
  Python version: 3.6.9
  R8_TINY returns a "tiny" R8;

    R8_TINY = 1e-30

R8_TINY_TEST
  Normal end of execution.

R8_TO_DHMS_TEST
  Python version: 3.6.9
  R8_TO_DHMS converts a real day measure into days, hours, minutes, seconds.

         X         D     H     M         S

       0.62102     0    14    54       16.0903
       9.47581     9    11    25       10.0633
       7.95411     7    22    53       55.1737
       4.74035     4    17    46       5.83506
       2.98368     2    23    36       30.3821
      -1.20658    -1    -4   -57      -28.0956
       1.09093     1     2    10       56.6551
     -0.680518     0   -16   -19      -56.7965
      -1.47405    -1   -11   -22      -38.0951
       5.60759     5    14    34       55.6505

R8_TO_DHMS_TEST
  Normal end of execution.

R8_TO_I4_TEST
  Python version: 3.6.9
  R8_TO_I4 finds an integer IX in [IXMIN,IXMAX]
  corresponding to X in [XMIN,XMAX].

   XMIN =     2.500000,  X =     3.500000,  XMAX =     5.500000
  IXMIN =           10, IX =           20, IXMAX =           40

R8_TO_I4_TEST
  Normal end of execution.

R8_TO_R8_DISCRETE_TEST
  Python version: 3.6.9
  R8_TO_R8_DISCRETE maps numbers to a discrete set
  of equally spaced numbers in an interval.

  Number of discrete values = 19
  Real interval: [1.000000, 10.000000]

       R        RD

        1.839438        1.947368
       11.432128       10.000000
        9.783620       10.000000
        6.302041        6.210526
        4.398992        4.315789
       -0.140456        1.000000
        2.348511        2.421053
        0.429438        1.000000
       -0.430223        1.000000
        7.241554        7.157895
       -0.197546        1.000000
        4.844006        4.789474
        4.216982        4.315789
        8.810755        8.578947
        9.364730        9.526316

R8_TO_R8_DISCRETE_TEST
  Normal end of execution.

R8_UNIFORM_01_TEST
  Python version: 3.6.9
  R8_UNIFORM_01 produces a sequence of random values.

  Using random seed 123456789

  SEED  R8_UNIFORM_01(SEED)

     469049721        0.218418
    2053676357        0.956318
    1781357515        0.829509
    1206231778        0.561695
     891865166        0.415307
     141988902        0.066119
     553144097        0.257578
     236130416        0.109957
      94122056        0.043829
    1361431000        0.633966

  Verify that the sequence can be restarted.
  Set the seed back to its original value, and see that
  we generate the same sequence.

  SEED  R8_UNIFORM_01(SEED)

     469049721        0.218418
    2053676357        0.956318
    1781357515        0.829509
    1206231778        0.561695
     891865166        0.415307
     141988902        0.066119
     553144097        0.257578
     236130416        0.109957
      94122056        0.043829
    1361431000        0.633966

R8_UNIFORM_01_TEST
  Normal end of execution.

R8_UNIFORM_AB_TEST
  Python version: 3.6.9
  R8_UNIFORM_AB returns random values in a given range:
  [ A, B ]

  For this problem:
  A = 10.000000
  B = 20.000000

  12.184183
  19.563176
  18.295092
  15.616954
  14.153071
  10.661187
  12.575778
  11.099568
  10.438290
  16.339657

R8_UNIFORM_AB_TEST
  Normal end of execution

R8_UNSWAP3_TEST
  Python version: 3.6.9
  R8_UNSWAP3 unswaps three reals.

  Data :    1  3.14159  1952
  Swap :    3.14159  1952  1
  Unswap :  1  3.14159  1952

R8_UNSWAP3_TEST
  Normal end of execution.

R8_WALSH_1D_TEST
  Python version: 3.6.9
  R8_WALSH_1D evaluates 1D Walsh functions:

  X  W(+2) W(+1) W(0) W(-1) W(-2) W(-3)

    0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
    0.250000  0.000000  0.000000  0.000000  0.000000  1.000000  0.000000
    0.500000  0.000000  0.000000  0.000000  1.000000  0.000000  0.000000
    0.750000  0.000000  0.000000  0.000000  1.000000  1.000000  0.000000
    1.000000  0.000000  0.000000  1.000000  0.000000  0.000000  0.000000
    1.250000  0.000000  0.000000  1.000000  0.000000  1.000000  0.000000
    1.500000  0.000000  0.000000  1.000000  1.000000  0.000000  0.000000
    1.750000  0.000000  0.000000  1.000000  1.000000  1.000000  0.000000
    2.000000  0.000000  1.000000  0.000000  0.000000  0.000000  0.000000
    2.250000  0.000000  1.000000  0.000000  0.000000  1.000000  0.000000
    2.500000  0.000000  1.000000  0.000000  1.000000  0.000000  0.000000
    2.750000  0.000000  1.000000  0.000000  1.000000  1.000000  0.000000
    3.000000  0.000000  1.000000  1.000000  0.000000  0.000000  0.000000
    3.250000  0.000000  1.000000  1.000000  0.000000  1.000000  0.000000
    3.500000  0.000000  1.000000  1.000000  1.000000  0.000000  0.000000
    3.750000  0.000000  1.000000  1.000000  1.000000  1.000000  0.000000
    4.000000  1.000000  0.000000  0.000000  0.000000  0.000000  0.000000
    4.250000  1.000000  0.000000  0.000000  0.000000  1.000000  0.000000
    4.500000  1.000000  0.000000  0.000000  1.000000  0.000000  0.000000
    4.750000  1.000000  0.000000  0.000000  1.000000  1.000000  0.000000
    5.000000  1.000000  0.000000  1.000000  0.000000  0.000000  0.000000
    5.250000  1.000000  0.000000  1.000000  0.000000  1.000000  0.000000
    5.500000  1.000000  0.000000  1.000000  1.000000  0.000000  0.000000
    5.750000  1.000000  0.000000  1.000000  1.000000  1.000000  0.000000
    6.000000  1.000000  1.000000  0.000000  0.000000  0.000000  0.000000
    6.250000  1.000000  1.000000  0.000000  0.000000  1.000000  0.000000
    6.500000  1.000000  1.000000  0.000000  1.000000  0.000000  0.000000
    6.750000  1.000000  1.000000  0.000000  1.000000  1.000000  0.000000
    7.000000  1.000000  1.000000  1.000000  0.000000  0.000000  0.000000
    7.250000  1.000000  1.000000  1.000000  0.000000  1.000000  0.000000
    7.500000  1.000000  1.000000  1.000000  1.000000  0.000000  0.000000
    7.750000  1.000000  1.000000  1.000000  1.000000  1.000000  0.000000
    8.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000

R8_WALSH_1D_TEST
  Normal end of execution

R8_WRAP_TEST
  Python version: 3.6.9
  R8_WRAP "wraps" an R8 to lie within an interval:

  Wrapping interval is 3.000000, 6.500000

      R      R8_WRAP ( R )

         1.05786         4.55786
         11.3884         4.38845
         9.61313         6.11313
         5.86374         5.86374
          3.8143          3.8143
        -1.07434         5.92566
         1.60609         5.10609
       -0.460605          3.0394
        -1.38639         5.61361
         6.87552         3.37552
        -1.13582         5.86418
         4.29355         4.29355
         3.61829         3.61829
         8.56543         5.06543
         9.16202         5.66202
        -1.97426         5.02574
         10.5651         3.56506
         2.91053         6.41053
       -0.676373         6.32363
        -1.80936         5.19064

R8_WRAP_TEST
  Normal end of execution.

R82COL_PRINT_PART_TEST
  Python version: 3.6.9
  R82COL_PRINT_PART prints an R82COL.

  Output with MAX_PRINT = 2

     0              11              12
     1              21              22  ...more entries...

  Output with MAX_PRINT = 5

     0              11              12
     1              21              22
     2              31              32
  ....  ..............  ..............
     9             101             102

  Output with MAX_PRINT = 25

     0              11              12
     1              21              22
     2              31              32
     3              41              42
     4              51              52
     5              61              62
     6              71              72
     7              81              82
     8              91              92
     9             101             102

R82COL_PRINT_PART_TEST:
  Normal end of execution.

R82ROW_PRINT_PART_TEST
  R82ROW_PRINT_PART prints part of an R82ROW,
  a real array of 2 rows.

  Output with MAX_PRINT = 2

     0              11              21
     1              12              22  ...more entries...

  Output with MAX_PRINT = 5

     0              11              21
     1              12              22
     2              13              23
  ....  ..............  ..............
     9              20              30

  Output with MAX_PRINT = 25

     0              11              21
     1              12              22
     2              13              23
     3              14              24
     4              15              25
     5              16              26
     6              17              27
     7              18              28
     8              19              29
     9              20              30

R82ROW_PRINT_PART_TEST:
  Normal end of execution.

R82VEC_PRINT_PART_TEST
  Python version: 3.6.9
  R82VEC_PRINT_PART prints an R8VEC.

  Output with MAX_PRINT = 2

     0       11.000000       21.000000
     1       12.000000       22.000000  ...more entries...

  Output with MAX_PRINT = 5

     0       11.000000       21.000000
     1       12.000000       22.000000
     2       13.000000       23.000000
  ....  ..............  ..............
     9       20.000000       30.000000

  Output with MAX_PRINT = 25

     0       11.000000       21.000000
     1       12.000000       22.000000
     2       13.000000       23.000000
     3       14.000000       24.000000
     4       15.000000       25.000000
     5       16.000000       26.000000
     6       17.000000       27.000000
     7       18.000000       28.000000
     8       19.000000       29.000000
     9       20.000000       30.000000

R82VEC_PRINT_PART_TEST:
  Normal end of execution.

R83COL_PRINT_PART_TEST
  Python version: 3.6.9
  R83COL_PRINT_PART prints part of an R83COL.

  Output with MAX_PRINT = 2

     0              11              12              13
     1              21              22              23  ...more entries...

  Output with MAX_PRINT = 5

     0              11              12              13
     1              21              22              23
     2              31              32              33
  ....  ..............  ..............  ..............
     9             101             102             103

  Output with MAX_PRINT = 25

     0              11              12              13
     1              21              22              23
     2              31              32              33
     3              41              42              43
     4              51              52              53
     5              61              62              63
     6              71              72              73
     7              81              82              83
     8              91              92              93
     9             101             102             103

R83COL_PRINT_PART_TEST:
  Normal end of execution.

R83ROW_PRINT_PART_TEST
  Python version: 3.6.9
  R83ROW_PRINT_PART prints part of an R83ROW,
  a real array of 3 rows.

  Output with MAX_PRINT = 2

     0              11              21              31
     1              12              22              32  ...more entries...

  Output with MAX_PRINT = 5

     0              11              21              31
     1              12              22              32
     2              13              23              33
  ....  ..............  ..............
     9              20              30              40

  Output with MAX_PRINT = 25

     0              11              21              31
     1              12              22              32
     2              13              23              33
     3              14              24              34
     4              15              25              35
     5              16              26              36
     6              17              27              37
     7              18              28              38
     8              19              29              39
     9              20              30              40

R83ROW_PRINT_PART_TEST:
  Normal end of execution.

R8BLOCK_PRINT_TEST
  Python version: 3.6.9
  R8BLOCK_PRINT prints an R8BLOCK.

  The 3D array:

  K = 0

                   0             1             2

    0:             1             1             1
    1:             2             4             8
    2:             3             9            27
    3:             4            16            64

  K = 1

                   0             1             2

    0:             2             2             2
    1:             4             8            16
    2:             6            18            54
    3:             8            32           128

R8MAT_ADD_TEST
  Python version: 3.6.9
  R8MAT_ADD computes C = alpha * A + beta * B for R8MATs.

  A:

  Col:       0             1             2             3       
  Row
      0 :          11            12            13            14  
      1 :          21            22            23            24  
      2 :          31            32            33            34  
      3 :          41            42            43            44  

  B:

  Col:       0             1             2             3       
  Row
      0 :          11            21            31            41  
      1 :          12            22            32            42  
      2 :          13            23            33            43  
      3 :          14            24            34            44  

  ALPHA = 3, BETA = 0.5

  C = alpha * A + beta * B:

  Col:       0             1             2             3       
  Row
      0 :        38.5          46.5          54.5          62.5  
      1 :          69            77            85            93  
      2 :        99.5         107.5         115.5         123.5  
      3 :         130           138           146           154  

R8MAT_ADD_TEST:
  Normal end of execution.

R8MAT_CHOLESKY_FACTOR_TEST
  Python version: 3.6.9
  R8MAT_CHOLESKY_FACTOR determines the
  lower triangular Cholesky factorization
  of a positive definite symmetric matrix,

  Matrix to be factored:

  Col:       0             1             2             3             4       
  Row
      0 :           2            -1             0             0             0  
      1 :          -1             2            -1             0             0  
      2 :           0            -1             2            -1             0  
      3 :           0             0            -1             2            -1  
      4 :           0             0             0            -1             2  

  Cholesky factor L:

  Col:       0             1             2             3             4       
  Row
      0 :     1.41421             0             0             0             0  
      1 :   -0.707107       1.22474             0             0             0  
      2 :           0     -0.816497        1.1547             0             0  
      3 :           0             0     -0.866025       1.11803             0  
      4 :           0             0             0     -0.894427       1.09545  

  Product L * L':

  Col:       0             1             2             3             4       
  Row
      0 :           2            -1             0             0             0  
      1 :          -1             2            -1             0             0  
      2 :           0            -1             2            -1             0  
      3 :           0             0            -1             2            -1  
      4 :           0             0             0            -1             2  

R8MAT_CHOLESKY_FACTOR_TEST:
  Normal end of execution.

R8MAT_CHOLESKY_FACTOR_UPPER_TEST
  Python version: 3.6.9
  R8MAT_CHOLESKY_FACTOR_UPPER determines the
  upper triangular Cholesky factorization
  of a positive definite symmetric matrix,

  Matrix to be factored:

  Col:       0             1             2             3             4       
  Row
      0 :           2            -1             0             0             0  
      1 :          -1             2            -1             0             0  
      2 :           0            -1             2            -1             0  
      3 :           0             0            -1             2            -1  
      4 :           0             0             0            -1             2  

  Cholesky factor R:

  Col:       0             1             2             3             4       
  Row
      0 :     1.41421     -0.707107             0             0             0  
      1 :           0       1.22474     -0.816497             0             0  
      2 :           0             0        1.1547     -0.866025             0  
      3 :           0             0             0       1.11803     -0.894427  
      4 :           0             0             0             0       1.09545  

  Product R' * R:

  Col:       0             1             2             3             4       
  Row
      0 :           2            -1             0             0             0  
      1 :          -1             2            -1             0             0  
      2 :           0            -1             2            -1             0  
      3 :           0             0            -1             2            -1  
      4 :           0             0             0            -1             2  

R8MAT_CHOLESKY_FACTOR_UPPER_TEST:
  Normal end of execution.

R8MAT_CHOLESKY_SOLVE_TEST
  Python version: 3.6.9
  R8MAT_CHOLESKY_SOLVE solves a linear system
  using the lower triangular Cholesky factorization,
  for a positive definite symmetric matrix.

  Matrix to be factored:

  Col:       0             1             2             3             4       
  Row
      0 :           2            -1             0             0             0  
      1 :          -1             2            -1             0             0  
      2 :           0            -1             2            -1             0  
      3 :           0             0            -1             2            -1  
      4 :           0             0             0            -1             2  

  Cholesky factor L:

  Col:       0             1             2             3             4       
  Row
      0 :     1.41421             0             0             0             0  
      1 :   -0.707107       1.22474             0             0             0  
      2 :           0     -0.816497        1.1547             0             0  
      3 :           0             0     -0.866025       1.11803             0  
      4 :           0             0             0     -0.894427       1.09545  

  Product L * L':

  Col:       0             1             2             3             4       
  Row
      0 :           2            -1             0             0             0  
      1 :          -1             2            -1             0             0  
      2 :           0            -1             2            -1             0  
      3 :           0             0            -1             2            -1  
      4 :           0             0             0            -1             2  

  Right hand side b:

     0:             0
     1:             0
     2:             0
     3:             0
     4:             6

  Computed solution x:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5

R8MAT_CHOLESKY_SOLVE_TEST:
  Normal end of execution.

R8MAT_DET_2D_TEST
  Python version: 3.6.9
  R8MAT_DET_2D: determinant of a 2 by 2 matrix;

  Matrix:

  Col:       0             1       
  Row
      0 :           1             1  
      1 :           1            10  

  R8MAT_DET_2D computes determinant: 9
  Exact determinant is 9

R8MAT_DET_2D_TEST
  Normal end of execution.

R8MAT_DET_3D_TEST
  Python version: 3.6.9
  R8MAT_DET_3D: determinant of a 3 by 3 matrix

  Matrix:

  Col:       0             1             2       
  Row
      0 :           1             1             1  
      1 :           1            10           100  
      2 :           1             4            16  

  R8MAT_DET_3D computes determinant: -162
  Exact determinant is -162

R8MAT_DET_3D_TEST
  Normal end of execution.

R8MAT_DET_4D_TEST
  Python version: 3.6.9
  R8MAT_DET_4D determinant of a 4 by 4 matrix

  Matrix:

  Col:       0             1             2             3       
  Row
      0 :           1             1             1             1  
      1 :           1            10           100          1000  
      2 :           1             4            16            64  
      3 :           1             2             4             8  

  R8MAT_DET_4D computes determinant: -2592
  Exact determinant is -2592

R8MAT_DET_4D_TEST
  Normal end of execution.

R8MAT_DIAG_GET_VECTOR_TEST
  Python version: 3.6.9
  R8MAT_DIAG_GET_VECTOR retrieves the diagonal from an R8MAT.

  Random R8MAT:

  Col:       0             1             2             3             4       
  Row
      0 :    0.218418     0.0661187     0.0617272    0.00183837      0.859097  
      1 :    0.956318      0.257578      0.449539      0.897504      0.840847  
      2 :    0.829509      0.109957      0.401306      0.350752      0.123104  
      3 :    0.561695      0.043829      0.754673     0.0945448    0.00751236  
      4 :    0.415307      0.633966      0.797287     0.0136169      0.260303  

  Diagonal vector:

     0:      0.218418
     1:      0.257578
     2:      0.401306
     3:     0.0945448
     4:      0.260303

R8MAT_DIAG_GET_VECTOR_TEST:
  Normal end of execution.

R8MAT_HOUSE_AXH_TEST
  Python version: 3.6.9
  R8MAT_HOUSE_AXH multiplies a matrix A times a
  compact Householder matrix.

  Matrix A:

  Col:       0             1             2             3             4       
  Row
      0 :    -2.81582      -4.33881      -4.38273      -4.98162       3.59097  
      1 :     4.56318      -2.42422      -0.50461       3.97504       3.40847  
      2 :     3.29509      -3.90043     -0.986937      -1.49248      -3.76896  
      3 :    0.616954      -4.56171       2.54673      -4.05455      -4.92488  
      4 :   -0.846929       1.33966       2.97287      -4.86383      -2.39697  

  Compact vector V so column 3 of H*A is packed:

     0:             0
     1:             0
     2:     -0.788819
     3:      0.399863
     4:      0.466771

  Householder matrix H:

  Col:       0             1             2             3             4       
  Row
      0 :           1             0             0             0             0  
      1 :           0             1             0             0             0  
      2 :           0             0     -0.244469      0.630839      0.736395  
      3 :           0             0      0.630839      0.680219     -0.373289  
      4 :           0             0      0.736395     -0.373289       0.56425  

  Indirect product A*H:

  Col:       0             1             2             3             4       
  Row
      0 :    -2.81582      -4.33881      0.573215      -7.49385       0.65837  
      1 :     4.56318      -2.42422       5.14095       1.11322     0.0678026  
      2 :     3.29509      -3.90043      -3.47568     -0.230898      -2.29629  
      3 :    0.616954      -4.56171      -6.80702      0.686997      0.610057  
      4 :   -0.846929       1.33966      -5.56019     -0.538306       2.65233  

  Direct product A*H:

  Col:       0             1             2             3             4       
  Row
      0 :    -2.81582      -4.33881      0.573215      -7.49385       0.65837  
      1 :     4.56318      -2.42422       5.14095       1.11322     0.0678026  
      2 :     3.29509      -3.90043      -3.47568     -0.230898      -2.29629  
      3 :    0.616954      -4.56171      -6.80702      0.686997      0.610057  
      4 :   -0.846929       1.33966      -5.56019     -0.538306       2.65233  

  H*A should pack column 3:

  Col:       0             1             2             3             4       
  Row
      0 :    -2.81582      -4.33881      -4.38273      -4.98162       3.59097  
      1 :     4.56318      -2.42422      -0.50461       3.97504       3.40847  
      2 :    -1.04002     -0.937652       4.03706       -5.7746      -3.95052  
      3 :     2.81449      -6.06358  -4.44089e-16      -1.88388      -4.83284  
      4 :     1.71831      -0.41352  -4.44089e-16      -2.32995      -2.28953  

R8MAT_HOUSE_AXH_TEST
  Normal end of execution.

R8MAT_HOUSE_FORM_TEST
  Python version: 3.6.9
  R8MAT_HOUSE_FORM forms a Householder
  matrix from its compact form.

  Compact vector form V:

     0:             0
     1:             0
     2:             1
     3:             2
     4:             3

  Householder matrix H:

  Col:       0             1             2             3             4       
  Row
      0 :           1             0             0             0             0  
      1 :           0             1             0             0             0  
      2 :           0             0      0.857143     -0.285714     -0.428571  
      3 :           0             0     -0.285714      0.428571     -0.857143  
      4 :           0             0     -0.428571     -0.857143     -0.285714  

R8MAT_HOUSE_FORM_TEST
  Normal end of execution.

R8MAT_IDENTITY_TEST
  Python version: 3.6.9
  R8MAT_IDENTITY creates an identity matrix.

  The identity matrix:

  Col:       0             1             2             3             4       
  Row
      0 :           1             0             0             0             0  
      1 :           0             1             0             0             0  
      2 :           0             0             1             0             0  
      3 :           0             0             0             1             0  
      4 :           0             0             0             0             1  

R8MAT_IDENTITY_TEST
  Normal end of execution.

R8MAT_INDICATOR_TEST
  Python version: 3.6.9
  R8MAT_INDICATOR creates an "indicator" R8MAT.

  The indicator matrix:

  Col:       0             1             2             3       
  Row
      0 :          11            12            13            14  
      1 :          21            22            23            24  
      2 :          31            32            33            34  
      3 :          41            42            43            44  
      4 :          51            52            53            54  

R8MAT_INDICATOR_TEST
  Normal end of execution.

R8MAT_INVERSE_3D_TEST
  R8MAT_INVERSE_3D inverts a 3 by 3 matrix.

  Matrix A to be inverted:

  Col:       0             1             2       
  Row
      0 :           1             2             3  
      1 :           4             5             6  
      2 :           7             8             0  

  Inverse matrix B:

  Col:       0             1             2       
  Row
      0 :    -1.77778      0.888889     -0.111111  
      1 :     1.55556     -0.777778      0.222222  
      2 :   -0.111111      0.222222     -0.111111  

  Product C = A * B:

  Col:       0             1             2       
  Row
      0 :           1  -1.11022e-16             0  
      1 : 5.55112e-16             1             0  
      2 : 1.77636e-15  -8.88178e-16             1  

R8MAT_INVERSE_3D_TEST:
  Normal end of execution.

R8MAT_IS_BINARY_TEST
  Python version: 3.6.9
  R8MAT_IS_BINARY is TRUE if an R8MAT only contains
  0 or 1 entries.

  X:

  Col:       0             1             2       
  Row
      0 :           0             1             0  
      1 :           1             0             1  
  X is binary

  X:

  Col:       0             1             2       
  Row
      0 :           1             1             1  
      1 :           1             1             1  
  X is binary

  X:

  Col:       0             1             2       
  Row
      0 :           0             1             0  
      1 :           1             2             1  
  X is NOT binary.

R8MAT_IS_BINARY_TEST
  Normal end of execution.

R8MAT_L_SOLVE_TEST
  Python version: 3.6.9
  R8MAT_L_SOLVE solves a lower triangular system.

  Input matrix A:

  Col:       0             1             2             3       
  Row
      0 :           1             0             0             0  
      1 :           2             3             0             0  
      2 :           4             5             6             0  
      3 :           7             8             9            10  

  Right hand side b:

     0:             1
     1:             8
     2:            32
     3:            90

  Computed solution x:

     0:             1
     1:             2
     2:             3
     3:             4

  Norm of A*x-b = 0

R8MAT_L_SOLVE_TEST
  Normal end of execution.

R8MAT_LT_SOLVE_TEST
  Python version: 3.6.9
  R8MAT_LT_SOLVE solves a transposed lower triangular system.

  Input matrix A:

  Col:       0             1             2             3       
  Row
      0 :           1             0             0             0  
      1 :           2             3             0             0  
      2 :           4             5             6             0  
      3 :           7             8             9            10  

  Right hand side b:

     0:            45
     1:            53
     2:            54
     3:            40

  Computed solution x:

     0:             1
     1:             2
     2:             3
     3:             4

  Norm of A'*x-b = 0

R8MAT_LT_SOLVE_TEST
  Normal end of execution.

R8MAT_MM_TEST
  Python version: 3.6.9
  R8MAT_MM computes a matrix-matrix product C = A * B;

  A:

  Col:       0             1             2       
  Row
      0 :           1             0             0  
      1 :           1             1             0  
      2 :           1             2             1  
      3 :           1             3             3  

  B:

  Col:       0             1             2             3       
  Row
      0 :           1             1             1             1  
      1 :           0             1             2             3  
      2 :           0             0             1             3  

  C = A*B:

  Col:       0             1             2             3       
  Row
      0 :           1             1             1             1  
      1 :           1             2             3             4  
      2 :           1             3             6            10  
      3 :           1             4            10            19  

R8MAT_MM_TEST
  Normal end of execution.

R8MAT_MTM_TEST
  Python version: 3.6.9
  R8MAT_MTM computes a matrix-matrix product C = A' * B;

  A:

  Col:       0             1             2             3       
  Row
      0 :           1             0             0             0  
      1 :           1             1             0             0  
      2 :           1             2             1             0  

  B:

  Col:       0             1             2             3       
  Row
      0 :           1             0             0             0  
      1 :           1             1             0             0  
      2 :           1             2             1             0  

  C = A'*B:

  Col:       0             1             2             3       
  Row
      0 :           3             3             1             0  
      1 :           3             5             2             0  
      2 :           1             2             1             0  
      3 :           0             0             0             0  

R8MAT_MTM_TEST
  Normal end of execution.

R8MAT_MTV_TEST
  Python version: 3.6.9
  R8MAT_MTV computes a matrix-vector product b = A' * x;

  A:

  Col:       0             1       
  Row
      0 :           1             1  
      1 :           2             1  
      2 :           3             1  
      3 :           4             1  

  X:

     0:             1
     1:             2
     2:             3
     3:             4

  B = A'*X:

     0:            30
     1:            10

R8MAT_MTV_TEST
  Normal end of execution.

R8MAT_MV_TEST
  Python version: 3.6.9
  R8MAT_MV computes a matrix-vector product b = A * x;

  A:

  Col:       0             1       
  Row
      0 :           1             1  
      1 :           2             1  
      2 :           3             1  
      3 :           4             1  

  X:

     0:             1
     1:             2

  B = A*X:

     0:             3
     1:             4
     2:             5
     3:             6

R8MAT_MV_TEST
  Normal end of execution.

R8MAT_NINT_TEST
  Python version: 3.6.9
  R8MAT_NINT rounds an R8MAT.

  Matrix A:

  Col:       0             1             2             3       
  Row
      0 :    -2.81582      -4.33881      -4.38273      -4.98162  
      1 :     4.56318      -2.42422      -0.50461       3.97504  
      2 :     3.29509      -3.90043     -0.986937      -1.49248  
      3 :    0.616954      -4.56171       2.54673      -4.05455  
      4 :   -0.846929       1.33966       2.97287      -4.86383  

  Rounded matrix A:

  Col:       0             1             2             3       
  Row
      0 :          -3            -4            -4            -5  
      1 :           5            -2            -1             4  
      2 :           3            -4            -1            -1  
      3 :           1            -5             3            -4  
      4 :          -1             1             3            -5  

R8MAT_NINT_TEST
  Normal end of execution.

R8MAT_NONZEROS_TEST
  Python version: 3.6.9
  R8MAT_NONZEROS counts nonzeros in an R8MAT.

  Matrix A:

  Col:       0             1             2             3       
  Row
      0 :           1             0             1             0  
      1 :           0             0             0             0  
      2 :           1             0             1             0  
      3 :           0             0             0             0  
      4 :           1             0             1             0  

  Expected nonzeros = 6
  Computed nonzeros = 6

R8MAT_NONZEROS_TEST
  Normal end of execution.

R8MAT_NORM_FRO_TEST
  Python version: 3.6.9
  R8MAT_NORM_FRO computes the Frobenius norm of an R8MAT;

  A:

  Col:       0             1             2             3       
  Row
      0 :           1             2             3             4  
      1 :           5             6             7             8  
      2 :           9            10            11            12  
      3 :          13            14            15            16  
      4 :          17            18            19            20  

  Expected Frobenius norm = 53.5724
  Computed Frobenius norm = 53.5724

R8MAT_NORM_FRO_TEST
  Normal end of execution.

R8MAT_NORM_FRO_AFFINE_TEST
  Python version: 3.6.9
  R8MAT_NORM_FRO_AFFINE computes the Frobenius norm
  of the difference of two R8MAT's;

  Expected norm = 2.1594
  Computed norm = 2.1594

R8MAT_NORM_FRO_AFFINE_TEST
  Normal end of execution.

R8MAT_NORM_L1_TEST
  Python version: 3.6.9
  R8MAT_NORM_L1 computes the L1 norm of an R8MAT;

  A:

  Col:       0             1             2             3       
  Row
      0 :          -3            -4            -4            -5  
      1 :           5            -2            -1             4  
      2 :           3            -4            -1            -1  
      3 :           1            -5             3            -4  
      4 :          -1             1             3            -5  

  Computed L1 norm = 19

R8MAT_NORM_L1_TEST
  Normal end of execution.

R8MAT_NORMAL_01_TEST
  Python version: 3.6.9
  R8MAT_NORMAL_01 returns a matrix of Normal 01 values

  SEED = 123456789

  Matrix:

  Col:       0             1             2             3       
  Row
      0 :     1.67904      -0.56606       1.21293       1.26938  
      1 :    -1.66609      -2.24246     0.0396749      0.673068  
      2 :   -0.275127         2.164      0.297785       2.04454  
      3 :     1.39882      -1.24299    -0.0670837     -0.794396  
      4 :   -0.523768     -0.350567        0.1317       0.53738  

R8MAT_NORMAL_01_TEST:
  Normal end of execution.

R8MAT_PRINT_TEST
  Python version: 3.6.9
  R8MAT_PRINT prints an R8MAT.

  Here is an R8MAT:

  Col:       0             1             2             3             4       
  Row
      0 :          11            12            13            14            15  
      1 :          21            22            23            24            25  
      2 :          31            32            33            34            35  
      3 :          41            42            43            44            45  

  Col:       5       
  Row
      0 :          16  
      1 :          26  
      2 :          36  
      3 :          46  

R8MAT_PRINT_TEST:
  Normal end of execution.

R8MAT_PRINT_SOME_TEST
  Python version: 3.6.9
  R8MAT_PRINT_SOME prints some of an R8MAT.

  Here is an R8MAT:

  Col:       3             4             5       
  Row
      0 :          14            15            16  
      1 :          24            25            26  
      2 :          34            35            36  

R8MAT_PRINT_SOME_TEST:
  Normal end of execution.

R8MAT_PRODUCT_ELEMENTWISE_TEST
  Python version: 3.6.9
  R8MAT_PRODUCT_ELEMENTWISE computes the elementwise
  product of two R8MATs.

  A:

  Col:       0             1             2       
  Row
      0 :           1             2             3  
      1 :           4             5             6  

  B:

  Col:       0             1             2       
  Row
      0 :           1             3             5  
      1 :           2             4             6  

  Elementwise product = 86

R8MAT_PRODUCT_ELEMENTWISE_TEST
  Normal end of execution.

R8MAT_REF_TEST
  R8MAT_REF computes the row echelon form of a matrix.

  Input A:

  Col:       0             1             2             3             4       
  Row
      0 :           1             3             0             2             6  
      1 :          -2            -6             0            -2            -8  
      2 :           3             9             0             0             6  
      3 :          -1            -3             0             1             0  

  Col:       5             6       
  Row
      0 :           3             1  
      1 :           3             1  
      2 :           6             2  
      3 :           9             3  

  Pseudo-determinat = 48

  REF form:

  Col:       0             1             2             3             4       
  Row
      0 :           1             3             0             2             6  
      1 :           0             0             0             1             2  
      2 :           0             0             0             0             0  
      3 :           0             0             0             0             0  

  Col:       5             6       
  Row
      0 :           3             1  
      1 :         4.5           1.5  
      2 :           1      0.333333  
      3 :           0             0  

R8MAT_REF_TEST
  Normal end of execution.

R8MAT_RREF_TEST
  R8MAT_RREF computes the reduced row echelon form of a matrix.

  Input A:

  Col:       0             1             2             3             4       
  Row
      0 :           1             3             0             2             6  
      1 :          -2            -6             0            -2            -8  
      2 :           3             9             0             0             6  
      3 :          -1            -3             0             1             0  

  Col:       5             6       
  Row
      0 :           3             1  
      1 :           3             1  
      2 :           6             2  
      3 :           9             3  

  Pseudo-determinant = 48

  RREF form:

  Col:       0             1             2             3             4       
  Row
      0 :           1             3             0             0             2  
      1 :           0             0             0             1             2  
      2 :           0             0             0             0             0  
      3 :           0             0             0             0             0  

  Col:       5             6       
  Row
      0 :           0             0  
      1 :           0             0  
      2 :           1      0.333333  
      3 :           0             0  

R8MAT_RREF_TEST
  Normal end of execution.

R8MAT_SCALE_01_TEST
  Python version: 3.6.9
  R8MAT_SCALE_01 shifts and scales the columns of an R8MAT
  so they each have min 0 and max 1

  Array X:

  Col:       0             1             2       
  Row
      0 :   -0.631634      -3.67763      -3.76546  
      1 :     14.1264      0.151556       3.99078  
      2 :     11.5902      -2.80086       3.02613  
      3 :     6.23391      -4.12342       10.0935  
      4 :     3.30614       7.67931       10.9457  

  mean(X):         6.92499     -0.554208       4.85813
  std(X):         5.37215       4.37793       5.34682
  max(X):         14.1264       7.67931       10.9457
  min(X):       -0.631634      -4.12342      -3.76546

  Array XS:

  Col:       0             1             2       
  Row
      0 :           0     0.0377705             0  
      1 :           1      0.362202      0.527234  
      2 :     0.82815      0.112055      0.461661  
      3 :    0.465209             0      0.942067  
      4 :    0.266823             1             1  

  mean(XS):        0.512036      0.302406      0.586192
  std(XS):        0.364016      0.370925      0.363453
  max(XS):               1             1             1
  min(XS):               0             0             0

R8MAT_SCALE_01_TEST
  Normal end of execution.

R8MAT_SCALE_AB_TEST
  Python version: 3.6.9
  R8MAT_SCALE_AB shifts and scales the columns of an R8MAT
  so they each have min A and max B

  Array X:

  Col:       0             1             2       
  Row
      0 :   -0.631634      -3.67763      -3.76546  
      1 :     14.1264      0.151556       3.99078  
      2 :     11.5902      -2.80086       3.02613  
      3 :     6.23391      -4.12342       10.0935  
      4 :     3.30614       7.67931       10.9457  

  mean(X):         6.92499     -0.554208       4.85813
  std(X):         5.37215       4.37793       5.34682
  max(X):         14.1264       7.67931       10.9457
  min(X):       -0.631634      -4.12342      -3.76546

  Scaling data to [-1,1]

  Array XS:

  Col:       0             1             2       
  Row
      0 :          -1     -0.924459            -1  
      1 :           1     -0.275596      0.054467  
      2 :    0.656299      -0.77589    -0.0766785  
      3 :  -0.0695827            -1      0.884133  
      4 :   -0.466353             1             1  

  mean(XS):       0.0240726     -0.395189      0.172384
  std(XS):        0.728033      0.741851      0.726905
  max(XS):               1             1             1
  min(XS):              -1            -1            -1

R8MAT_SCALE_AB_TEST
  Normal end of execution.

R8MAT_SOLVE_TEST
  Python version: 3.6.9
  R8MAT_SOLVE solves linear systems.

  The linear system:

  Col:       0             1             2             3             4       
  Row
      0 :           1             2             3            14             7  
      1 :           4             5             6            32            16  
      2 :           7             8             0            23             7  

  Factored matrix and solutions:

  Col:       0             1             2             3             4       
  Row
      0 :           1             0             0             1             1  
      1 :           0             1             0             2             0  
      2 :           0             0             1             3             2  

R8MAT_SOLVE_TEST:
  Normal end of execution.

R8MAT_STANDARDIZE_TEST
  R8MAT_STANDARDIZE shifts and scales an R8MAT so that
  each column has zero mean and unit standard deviation.

  Vector X:

  Col:       0             1             2       
  Row
      0 :   -0.631634      -3.76546       12.1819  
      1 :     14.1264       3.99078       11.8169  
      2 :     11.5902       3.02613      -2.53792  
      3 :     6.23391       10.0935      -4.84975  
      4 :     3.30614       10.9457       0.20606  
      5 :    -3.67763      -4.96323       13.2497  
      6 :    0.151556       12.9501      -2.72672  
      7 :    -2.80086       2.01505       2.03257  
      8 :    -4.12342       -3.1091       11.4577  
      9 :     7.67931      -4.72766      0.342645  

  mean(X) = 3.18539  2.64558  4.11732
  std(X)  = 6.49767  6.82621  7.20369
  max(X)  = 14.1264  12.9501  13.2497
  min(X)  = -4.12342  -4.96323  -4.84975

  Vector XS:

  Col:       0             1             2       
  Row
      0 :   -0.490236     -0.387562     -0.571557  
      1 :   -0.490236     -0.387562     -0.571557  
      2 :   -0.490236     -0.387562     -0.571557  
      3 :   -0.490236     -0.387562     -0.571557  
      4 :   -0.490236     -0.387562     -0.571557  
      5 :   -0.490236     -0.387562     -0.571557  
      6 :   -0.490236     -0.387562     -0.571557  
      7 :   -0.490236     -0.387562     -0.571557  
      8 :   -0.490236     -0.387562     -0.571557  
      9 :   -0.490236     -0.387562     -0.571557  

  mean(X) = -0.490236  -0.387562  -0.571557
  std(X)  = 1.17028e-16  5.85139e-17  0
  max(X)  = -0.490236  -0.387562  -0.571557
  min(X)  = -0.490236  -0.387562  -0.571557

R8MAT_STANDARDIZE_TEST
  Normal end of execution.

R8MAT_TRANSPOSE_TEST
  Python version: 3.6.9
  R8MAT_TRANSPOSE transposes an R8MAT.

  Matrix A:

  Col:       0             1             2             3       
  Row
      0 :          11            12            13            14  
      1 :          21            22            23            24  
      2 :          31            32            33            34  
      3 :          41            42            43            44  
      4 :          51            52            53            54  

  Transposed matrix At:

  Col:       0             1             2             3             4       
  Row
      0 :          11            21            31            41            51  
      1 :          12            22            32            42            52  
      2 :          13            23            33            43            53  
      3 :          14            24            34            44            54  

R8MAT_TRANSPOSE_TEST
  Normal end of execution.

R8MAT_TRANSPOSE_PRINT_TEST
  Python version: 3.6.9
  R8MAT_TRANSPOSE_PRINT prints an R8MAT.

  Here is an R8MAT, transposed:

  Row:       0             1             2             3       
  Col
      0 :          11            21            31            41  
      1 :          12            22            32            42  
      2 :          13            23            33            43  

R8MAT_TRANSPOSE_PRINT_TEST:
  Normal end of execution.

R8MAT_TRANSPOSE_PRINT_SOME_TEST
  Python version: 3.6.9
  R8MAT_TRANSPOSE_PRINT_SOME prints some of an R8MAT, transposed.

  R8MAT, rows 0:2, cols 3:5:

  Row:       0             1             2       
  Col
      3 :          14            24            34  
      4 :          15            25            35  
      5 :          16            26            36  

R8MAT_TRANSPOSE_PRINT_SOME_TEST:
  Normal end of execution.

R8MAT_U_INVERSE_TEST
  R8MAT_U_INVERSE inverts an upper triangular matrix.

  Input matrix A

  Col:       0             1             2             3       
  Row
      0 :           1             2             4             7  
      1 :           0             3             5             8  
      2 :           0             0             6             9  
      3 :           0             0             0            10  

  Inverse matrix B:

  Col:       0             1             2             3       
  Row
      0 :           1     -0.666667     -0.111111    -0.0666667  
      1 :           0      0.333333     -0.277778    -0.0166667  
      2 :           0             0      0.166667         -0.15  
      3 :           0             0             0           0.1  

  Product C = A * B:

  Col:       0             1             2             3       
  Row
      0 :           1             0             0  -2.77556e-17  
      1 :           0             1   2.77556e-17             0  
      2 :           0             0             1   1.38778e-16  
      3 :           0             0             0             1  

R8MAT_U_SOLVE_TEST
  Python version: 3.6.9
  R8MAT_U_SOLVE solves an upper triangular system.

  Input matrix A:

  Col:       0             1             2             3       
  Row
      0 :           1             2             4             7  
      1 :           0             3             5             8  
      2 :           0             0             6             9  
      3 :           0             0             0            10  

  Right hand side b:

     0:            45
     1:            53
     2:            54
     3:            40

  Computed solution x:

     0:             1
     1:             2
     2:             3
     3:             4

  Norm of A*x-b = 0

R8MAT_U_SOLVE_TEST
  Normal end of execution.

R8MAT_UNIFORM_01_TEST
  Python version: 3.6.9
  R8MAT_UNIFORM_01 computes a random R8MAT.

  0 <= X <= 1
  Initial seed is 123456789

  Random R8MAT:

  Col:       0             1             2             3       
  Row
      0 :    0.218418     0.0661187     0.0617272    0.00183837  
      1 :    0.956318      0.257578      0.449539      0.897504  
      2 :    0.829509      0.109957      0.401306      0.350752  
      3 :    0.561695      0.043829      0.754673     0.0945448  
      4 :    0.415307      0.633966      0.797287     0.0136169  

R8MAT_UNIFORM_01_TEST:
  Normal end of execution.

R8MAT_UNIFORM_AB_TEST
  Python version: 3.6.9
  R8MAT_UNIFORM_AB computes a random R8MAT.

  -1 <= X <= 5
  Initial seed is 123456789

  Random R8MAT:

  Col:       0             1             2             3       
  Row
      0 :     0.31051     -0.603288     -0.629637      -0.98897  
      1 :     4.73791      0.545467       1.69723       4.38502  
      2 :     3.97706     -0.340259       1.40784       1.10451  
      3 :     2.37017     -0.737026       3.52804     -0.432731  
      4 :     1.49184       2.80379       3.78372     -0.918299  

R8MAT_UNIFORM_AB_TEST:
  Normal end of execution.

R8MAT_UNIFORM_ABVEC_TEST
  Python version: 3.6.9
  R8MAT_UNIFORM_ABVEC computes a random R8MAT.

  Initial seed is 123456789

  Lower and upper row limits:

       0:              2            10
       1:              0             1
       2:             -1             0
       3:            100           110
       4:            0.1           0.2

  Random R8MAT:

  Col:       0             1             2             3       
  Row
      0 :     3.74735       2.52895       2.49382       2.01471  
      1 :    0.956318      0.257578      0.449539      0.897504  
      2 :   -0.170491     -0.890043     -0.598694     -0.649248  
      3 :     105.617       100.438       107.547       100.945  
      4 :    0.141531      0.163397      0.179729      0.101362  

R8MAT_UNIFORM_ABVEC_TEST:
  Normal end of execution.

R8MAT_UT_SOLVE_TEST
  Python version: 3.6.9
  R8MAT_UT_SOLVE solves a transposed upper triangular system.

  Input matrix A:

  Col:       0             1             2             3       
  Row
      0 :           1             2             4             7  
      1 :           0             3             5             8  
      2 :           0             0             6             9  
      3 :           0             0             0            10  

  Right hand side b:

     0:             1
     1:             8
     2:            32
     3:            90

  Computed solution x:

     0:             1
     1:             2
     2:             3
     3:             4

  Norm of A'*x-b = 0

R8MAT_UT_SOLVE_TEST
  Normal end of execution.

R8MAT_VAND2_TEST
  Python version: 3.6.9
  R8MAT_VAND2 returns a row Vandermonde matrix.

  The factor vector X:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5

  The row Vandermonde matrix:

  Col:       0             1             2             3       
  Row
      0 :           1             1             1             1  
      1 :           1             2             4             8  
      2 :           1             3             9            27  
      3 :           1             4            16            64  
      4 :           1             5            25           125  

R8MAT_VAND2_TEST
  Normal end of execution.

R8ROWS_TO_R8MAT_TEST
  Python version: 3.6.9
  R8ROWS_TO_R8MAT allows an R8MAT to be initialized
  by data stored ROW-WISE in a vector.

  The data vector:

     0:            11
     1:            12
     2:            13
     3:            14
     4:            21
     5:            22
     6:            23
     7:            24
     8:            31
     9:            32
    10:            33
    11:            34

  The data copied into an array:

  Col:       0             1             2             3       
  Row
      0 :          11            12            13            14  
      1 :          21            22            23            24  
      2 :          31            32            33            34  

R8ROWS_TO_R8MAT_TEST:
  Normal end of execution.

R8VEC_AMAX_TEST
  Python version: 3.6.9
  R8VEC_AMAX computes the maximum absolute value entry in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Max Abs = 9.12635

R8VEC_AMAX_TEST:
  Normal end of execution.

R8VEC_AMAX_INDEX_TEST
  Python version: 3.6.9
  R8VEC_AMAX_INDEX computes the index of the entry of
  maximum absolute value in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  AMAX = A[1] = 9.12635

R8VEC_AMAX_INDEX_TEST:
  Normal end of execution.

R8VEC_AMIN_TEST
  Python version: 3.6.9
  R8VEC_AMIN computes the minimum absolute entry in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Min Abs = 1.23391

R8VEC_AMIN_TEST:
  Normal end of execution.

R8VEC_AMIN_INDEX_TEST
  Python version: 3.6.9
  R8VEC_AMIN_INDEX computes the index of the entry of
  minimum absolute value in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  AMIN = A[3] = 1.23391

R8VEC_AMIN_INDEX_TEST:
  Normal end of execution.

R8VEC_ASUM_TEST
  Python version: 3.6.9
  R8VEC_ASUM sums the absolute values of the entries in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Sum of absolute values of entries = 57.4056

R8VEC_ASUM_TEST:
  Normal end of execution.

R8VEC_BINARY_NEXT_TEST
  Python version: 3.6.9
  R8VEC_BINARY_NEXT generates the next binary vector.

  000
  001
  010
  011
  100
  101
  110
  111

R8VEC_BINARY_NEXT_TEST
  Normal end of execution.

R8VEC_BRACKET_TEST
  Python version: 3.6.9
  R8VEC_BRACKET finds, for a given value R,
  the nearest interval [low,high] in a sorted R8VEC
  that "brackets" the value.

  Sorted R8VEC:

     0:             0
     1:             1
     2:             2
     3:             3
     4:             4
     5:             5
     6:             6
     7:             7
     8:             8
     9:             9
    10:            10

  R = 1.62102 is bracketed by ( S[1] = 1, S[2] = 2
  R = 10.4758 is bracketed by ( S[9] = 9, S[10] = 10
  R = 8.95411 is bracketed by ( S[8] = 8, S[9] = 9
  R = 5.74035 is bracketed by ( S[5] = 5, S[6] = 6
  R = 3.98368 is bracketed by ( S[3] = 3, S[4] = 4
  R = -0.206575 is bracketed by ( S[0] = 0, S[1] = 1
  R = 2.09093 is bracketed by ( S[2] = 2, S[3] = 3
  R = 0.319482 is bracketed by ( S[0] = 0, S[1] = 1
  R = -0.474052 is bracketed by ( S[0] = 0, S[1] = 1
  R = 6.60759 is bracketed by ( S[6] = 6, S[7] = 7
  R = -0.259273 is bracketed by ( S[0] = 0, S[1] = 1
  R = 4.39447 is bracketed by ( S[4] = 4, S[5] = 5
  R = 3.81568 is bracketed by ( S[3] = 3, S[4] = 4
  R = 8.05608 is bracketed by ( S[8] = 8, S[9] = 9
  R = 8.56744 is bracketed by ( S[8] = 8, S[9] = 9

R8VEC_BRACKET_TEST:
  Normal end of execution.

R8VEC_BRACKET5_TEST
  R8VEC_BRACKET5 finds a pair of entries in a
  sorted R8VEC which bracket a value.

  Sorted array:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5
     5:             5
     6:             7
     7:             8
     8:             9
     9:            10

        LEFT                   RIGHT
      X(LEFT)       XVAL     X(RIGHT)

          -1
                -10.0000  (Not bracketed!)

           0                       1
      1.0000      1.0000      2.0000

           3                       4
      4.0000      4.5000      5.0000

           5                       6
      5.0000      5.0000      7.0000

           8                       9
      9.0000     10.0000     10.0000

          -1
                 12.0000  (Not bracketed!)

R8VEC_BRACKET5_TEST
  Normal end of execution.

R8VEC_CHEBY_EXTREME_TEST
  Python version: 3.6.9
  R8VEC_CHEBY_EXTREME returns Chebyshev Extreme values between A and B.

  The vector:

     0:            10
     1:       11.4645
     2:            15
     3:       18.5355
     4:            20

R8VEC_CHEBY_EXTREME_TEST
  Normal end of execution.

R8VEC_CHEBY_ZERO_TEST
  Python version: 3.6.9
  R8VEC_CHEBY_ZERO returns Chebyshev Zero values between A and B.

  The vector:

     0:       10.2447
     1:       12.0611
     2:            15
     3:       17.9389
     4:       19.7553

R8VEC_CHEBY_ZERO_TEST
  Normal end of execution.

R8VEC_CHEBY1SPACE_TEST
  Python version: 3.6.9
  R8VEC_CHEBY1SPACE returns Type 1 Chebyshev values in [A,B].

  The vector:

     0:            10
     1:       11.4645
     2:            15
     3:       18.5355
     4:            20

R8VEC_CHEBY1SPACE_TEST
  Normal end of execution.

R8VEC_CONCATENATE_TEST
  Python version: 3.6.9
  R8VEC_CONCATENATE concatenates two R8VECs

  Array 1:

     0:          91.1
     1:          31.2
     2:          71.3
     3:          51.4
     4:          31.5

  Array 2:

     0:          42.6
     1:          22.7
     2:          12.8

  Array 3 = Array 1 + Array 2:

     0:          91.1
     1:          31.2
     2:          71.3
     3:          51.4
     4:          31.5
     5:          42.6
     6:          22.7
     7:          12.8

R8VEC_CONCATENATE_TEST
  Normal end of execution.

R8VEC_COPY_TEST
  Python version: 3.6.9
  R8VEC_COPY copies an R8VEC.

  Array 1:

     0:          91.1
     1:          31.2
     2:          71.3
     3:          51.4
     4:          31.5

  Array 2:

     0:          91.1
     1:          31.2
     2:          71.3
     3:          51.4
     4:          31.5

R8VEC_COPY_TEST
  Normal end of execution.


r8vec_correlation_test:
  r8vec_correlation computes the correlation of two R8VEC's.

  Vector V1:

     0:            43
     1:            21
     2:            25
     3:            42
     4:            57
     5:            59

  Vector V2:

     0:            99
     1:            65
     2:            79
     3:            75
     4:            87
     5:            81

  V1 V2 Correlation coefficient r =  0.5298089018901744

R8VEC_COVARIANCE_TEST:
  R8VEC_COVARIANCE computes the covariance of two R8VECs.

  Vector V1:10

  Vector V2:0.2184180
  Covariance(V1,V2) = 0.109209

  Vector V2:0.8281950.478159
  Covariance(V1,V2) = 0.175018

  Vector V2:0.4147550.718376
  Covariance(V1,V2) = -0.151811

  Vector V2:3.43939e-170.561695
  Covariance(V1,V2) = -0.280848

  Vector V2:-0.2076540.359666
  Covariance(V1,V2) = -0.28366

  Vector V2:-0.05726050.0330594
  Covariance(V1,V2) = -0.0451599

  Vector V2:-0.2575783.15442e-17
  Covariance(V1,V2) = -0.128789

  Vector V2:-0.0952254-0.0549784
  Covariance(V1,V2) = -0.0201235

  Vector V2:-0.0219145-0.037957
  Covariance(V1,V2) = 0.00802126

  Vector V2:-1.16458e-16-0.633966
  Covariance(V1,V2) = 0.316983

  Vector V2:0.0308636-0.0534573
  Covariance(V1,V2) = 0.0421605

  Vector V2:0.389312-0.224769
  Covariance(V1,V2) = 0.307041

R8VEC_COVARIANCE_TEST
  Normal end of execution.

R8VEC_DIFF_NORM_TEST
  Python version: 3.6.9
  R8VEC_DIFF_NORM: L2 norm of the difference of two R8VECs.

  I    V[I]  W[I]

 0  0.000000  1.000000
 1  1.000000  2.000000
 2  2.000000  3.000000
 3  3.000000  5.000000
 4  4.000000  5.000000
 5  5.000000  6.000000

  L2 norm of vector difference ||V-W|| is 3

R8VEC_DIFF_NORM_TEST:
  Normal end of execution.

R8VEC_DIFF_NORM_LI_TEST
  Python version: 3.6.9
  R8VEC_DIFF_NORM_LI: L-infinity norm of the difference
  of two R8VEC's.

  Vector V1:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386

  Vector V2:

     0:      -8.67763
     1:      -4.84844
     2:      -7.80086
     3:      -9.12342
     4:       2.67931

  L-Infinity norm of V1-V2: 14.391

R8VEC_DIFF_NORM_LI_TEST
  Normal end of execution.

R8VEC_DIRECT_PRODUCT_TEST
  Python version: 3.6.9
  R8VEC_DIRECT_PRODUCT forms the entries of a
  direct product of a given number of R8VEC factors.

  Matrix (transposed)

  Row:       0             1             2       
  Col
      0 :           1            50           800  
      1 :           2            50           800  
      2 :           3            50           800  
      3 :           4            50           800  
      4 :           1            60           800  
      5 :           2            60           800  
      6 :           3            60           800  
      7 :           4            60           800  
      8 :           1            70           800  
      9 :           2            70           800  
     10 :           3            70           800  
     11 :           4            70           800  
     12 :           1            50           900  
     13 :           2            50           900  
     14 :           3            50           900  
     15 :           4            50           900  
     16 :           1            60           900  
     17 :           2            60           900  
     18 :           3            60           900  
     19 :           4            60           900  
     20 :           1            70           900  
     21 :           2            70           900  
     22 :           3            70           900  
     23 :           4            70           900  

R8VEC_DIRECT_PRODUCT_TEST:
  Normal end of execution.

R8VEC_DOT_PRODUCT_TEST:
  Python version: 3.6.9
  R8VEC_DOT_PRODUCT computes the dot product of two R8VEC's.

  V1 and V2:

       0:       0.218418     0.0617272
       1:       0.956318      0.449539
       2:       0.829509      0.401306
       3:       0.561695      0.754673
       4:       0.415307      0.797287
       5:      0.0661187    0.00183837
       6:       0.257578      0.897504
       7:       0.109957      0.350752
       8:       0.043829     0.0945448
       9:       0.633966     0.0136169

  V1 dot V2 = 1.81393

R8VEC_DOT_PRODUCT_TEST:
  Normal end of execution.

R8VEC_EQ_TEST
  Python version: 3.6.9
  R8VEC_EQ is TRUE if two R8VECs are equal.

  Vectors A and B:

       0:            1.1           1.1
       1:            3.2           3.2
       2:            2.3           2.3
       3:            4.4           4.4
  R8VEC_EQ(A,B) = True

  Vectors A and B:

       0:            2.1           2.1
       1:            2.2           2.2
       2:            2.3           1.3
       3:            2.4           2.4
  R8VEC_EQ(A,B) = False

  Vectors A and B:

       0:            1.1           4.1
       1:            2.2           1.2
       2:            2.3           1.3
       3:            4.4           3.4
  R8VEC_EQ(A,B) = False

  Vectors A and B:

       0:            1.1           1.1
       1:            2.2           2.2
       2:            3.3           3.3
       3:            4.4           4.4
  R8VEC_EQ(A,B) = True

R8VEC_EQ_TEST
  Normal end of execution.

R8VEC_EVEN_TEST
  R8VEC_EVEN computes N evenly spaced values
  between XLO and XHI.

  XLO = 0.000000
  XHI = 99.000000
  while N = 10

  Resulting array:

     0:             0
     1:            11
     2:            22
     3:            33
     4:            44
     5:            55
     6:            66
     7:            77
     8:            88
     9:            99

R8VEC_EVEN_TEST:
  Normal end of execution.

R8VEC_EVEN_SELECT_TEST
  R8VEC_EVEN_SELECT returns the I-th of N evenly spaced values
  between XLO and XHI.

  XLO = 0.000000
  XHI = 99.000000
  while N = 10

  X(2) = 11
  X(5) = 44
  X(8) = 77

R8VEC_EVEN_SELECT_TEST:
  Normal end of execution.

R8VEC_FILL_TEST
  Python version: 3.6.9
  R8VEC_FILL sets all entries of an array to a given value.

  x=r8vec_fill(5,1.2):

     0:           1.2
     1:           1.2
     2:           1.2
     3:           1.2
     4:           1.2

  x=r8vec_fill(3,123.456):

     0:      -123.456
     1:      -123.456
     2:      -123.456

R8VEC_FILL_TEST
  Normal end of execution.

R8VEC_FRAC_TEST
  Python version: 3.6.9
  R8VEC_FRAC: K-th smallest real vector entry;

  The real array to search: 

     0:       2.18418
     1:       9.56318
     2:       8.29509
     3:       5.61695
     4:       4.15307
     5:      0.661187
     6:       2.57578
     7:       1.09957
     8:       0.43829
     9:       6.33966

Frac   R8VEC_FRAC

   1  0.438290
   2  0.661187
   3  1.099568
   4  2.184183
   5  2.575778
   6  4.153071
   7  5.616954
   8  6.339657
   9  8.295092
  10  9.563176

R8VEC_FRAC_TEST
  Normal end of execution.

R8VEC_HOUSE_COLUMN_TEST
  Python version: 3.6.9
  R8VEC_HOUSE_COLUMN returns the compact form of
  a Householder matrix that "packs" a column
  of a matrix.

  Matrix A:

  Col:       0             1             2             3       
  Row
      0 :     1.09209       2.07654      0.219145       2.00653  
      1 :     4.78159      0.330594       3.16983       3.77337  
      2 :     4.14755       1.28789      0.308636       3.98643  
      3 :     2.80848      0.549784       2.24769    0.00919186  

  Working on column K = 0

  Householder matrix H:

  Col:       0             1             2             3       
  Row
      0 :   -0.155781     -0.682069     -0.591626     -0.400615  
      1 :   -0.682069      0.597486      -0.34914     -0.236418  
      2 :   -0.591626      -0.34914      0.697156     -0.205068  
      3 :   -0.400615     -0.236418     -0.205068       0.86114  

  Product H*A:

  Col:       0             1             2             3       
  Row
      0 :    -7.01042      -1.53117      -3.27924      -5.24844  
      1 :-8.88178e-16      -1.79845        1.1053     -0.508058  
      2 :-1.77636e-15     -0.558841      -1.48213      0.272729  
      3 :-8.88178e-16     -0.700714       1.03509      -2.50551  

  Working on column K = 1

  Householder matrix H:

  Col:       0             1             2             3       
  Row
      0 :           1             0             0             0  
      1 :           0     -0.895014     -0.278112     -0.348717  
      2 :           0     -0.278112      0.959184    -0.0511776  
      3 :           0     -0.348717    -0.0511776       0.93583  

  Product H*A:

  Col:       0             1             2             3       
  Row
      0 :    -7.01042      -1.53117      -3.27924      -5.24844  
      1 : 1.59868e-15       2.00941     -0.938018       1.25258  
      2 :-1.41139e-15   7.63278e-17      -1.78201      0.531121  
      3 :-4.30552e-16             0      0.659083      -2.18152  

  Working on column K = 2

  Householder matrix H:

  Col:       0             1             2             3       
  Row
      0 :           1             0             0             0  
      1 :           0             1             0             0  
      2 :           0             0     -0.937906      0.346889  
      3 :           0             0      0.346889      0.937906  

  Product H*A:

  Col:       0             1             2             3       
  Row
      0 :    -7.01042      -1.53117      -3.27924      -5.24844  
      1 : 1.59868e-15       2.00941     -0.938018       1.25258  
      2 : 1.17439e-15  -7.15884e-17       1.89999      -1.25489  
      3 : -8.9341e-16   2.64773e-17   1.11022e-16      -1.86183  

R8VEC_HOUSE_COLUMN_TEST
  Normal end of execution.

R8VEC_IDENTITY_ROW_TEST
  R8VEC_IDENTITY_ROW returns a row of the identity matrix.

-1:  0 0 0 0 0
 0:  1 0 0 0 0
 1:  0 1 0 0 0
 2:  0 0 1 0 0
 3:  0 0 0 1 0
 4:  0 0 0 0 1
 5:  0 0 0 0 0

R8VEC_IDENTITY_ROW_TEST:
  Normal end of execution.

R8VEC_INDICATOR0_TEST
  Python version: 3.6.9
  R8VEC_INDICATOR0 returns an indicator matrix.

  The indicator0 vector:

     0:             0
     1:             1
     2:             2
     3:             3
     4:             4
     5:             5
     6:             6
     7:             7
     8:             8
     9:             9

R8VEC_INDICATOR0_TEST
  Normal end of execution.

R8VEC_INDICATOR1_TEST
  Python version: 3.6.9
  R8VEC_INDICATOR1 returns the 1-based indicator matrix.

  The 1-based indicator vector:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5
     5:             6
     6:             7
     7:             8
     8:             9
     9:            10

R8VEC_INDICATOR1_TEST
  Normal end of execution.

R8VEC_IS_ASCENDING_TEST
  Python version: 3.6.9
  R8VEC_IS_ASCENDING is TRUE if the entries of an R8VEC
  are ascending.

  X:               1             2             0             9
  X is NOT ascending.

  X:               1             2             2             9
  X is ascending.

  X:               1             2             4             9
  X is ascending.

R8VEC_IS_ASCENDING_TEST
  Normal end of execution.

R8VEC_IS_ASCENDING_STRICTLY_TEST
  Python version: 3.6.9
  R8VEC_IS_ASCENDING_STRICTLY is TRUE if the entries of an R8VEC
  are strictly ascending.

  X:               1             2             0             9
  X is NOT strictly ascending.

  X:               1             2             2             9
  X is NOT strictly ascending.

  X:               1             2             4             9
  X is strictly ascending.

R8VEC_IS_ASCENDING_STRICTLY_TEST
  Normal end of execution.

R8VEC_IS_BINARY_TEST
  Python version: 3.6.9
  R8VEC_IS_BINARY is TRUE if an R8VEC only contains
  0 or 1 entries.

  X:               0             0             0
  X is binary

  X:               1             0             1
  X is binary

  X:               0             2             1
  X is NOT binary.

R8VEC_IS_BINARY_TEST
  Normal end of execution.

R8VEC_IS_DISTINCT_TEST
  Python version: 3.6.9
  R8VEC_IS_DISTINCT computes the maximum entry in an R8VEC.

  Input vector:

     0:             1
     1:             2
     2:             5
     3:             3
     4:             4
  Array entries are distinct.

  Input vector:

     0:             1
     1:             2
     2:             5
     3:             2
     4:             4
  Array entries are NOT distinct.

R8VEC_IS_DISTINCT_TEST:
  Normal end of execution.

R8VEC_IS_IN_01_TEST
  Python version: 3.6.9
  R8VEC_IS_IN_01 is TRUE if an R8VEC only contains
  entries in [0,1].

  X:               0             1             2
  At least one entry is NOT in [0,1].

  X:             0.5           0.1           0.9
  All entries are in [0,1].

  X:            -0.5           0.5           0.4
  At least one entry is NOT in [0,1].

R8VEC_IS_IN_01_TEST
  Normal end of execution.

R8VEC_IS_IN_AB_TEST
  Python version: 3.6.9
  R8VEC_IS_IN_AB is TRUE if an R8VEC only contains
  entries in [A,B].

  X:               0             1             2
  At least one entry is NOT in [0.500000,2.000000].

  X:             0.5           1.1           0.9
  All entries are in [0.500000,2.000000].

  X:            -0.5           0.5           0.4
  At least one entry is NOT in [0.500000,2.000000].

R8VEC_IS_IN_AB_TEST
  Normal end of execution.

R8VEC_IS_INSIGNIFICANT_TEST
  Python version: 3.6.9
  R8VEC_IS_INSIGNIFICANT is TRUE if an R8VEC only contains
  negative entries.

  X:               1             2           100
  Y:     2.22045e-11   4.44089e-11   2.22045e-09
  Y is NOT insignificant compared to X.

  X:               1             2           100
  Y:     2.22045e-15             0             0
  Y is NOT insignificant compared to X.

  X:               1             2           100
  Y:     2.22045e-20   4.44089e-20   2.22045e-18
  Y is insignificant compared to X.

R8VEC_IS_INSIGNIFICANT_TEST
  Normal end of execution.

R8VEC_IS_INTEGER_TEST
  Python version: 3.6.9
  R8VEC_IS_INTEGER is TRUE if an R8VEC contains
  only integer entries.

  X:               0             1           100
  X contains only integer entries.

  X:               1           2.5             3
  X contains at least one noninteger entry.

  X:              -3           -99         -87.3
  X contains at least one noninteger entry.

R8VEC_IS_INTEGER_TEST
  Normal end of execution.

R8VEC_IS_NEGATIVE_TEST
  Python version: 3.6.9
  R8VEC_IS_NEGATIVE is TRUE if an R8VEC only contains
  negative entries.

  X:               0             1             2
  X does NOT contain only negative entries.

  X:              -1             0             1
  X does NOT contain only negative entries.

  X:              -3           -99         -87.3
  X contains only negative entries.

R8VEC_IS_NEGATIVE_TEST
  Normal end of execution.

R8VEC_IS_NEGATIVE_ANY_TEST
  Python version: 3.6.9
  R8VEC_IS_NEGATIVE_ANY is TRUE if an R8VEC contains
  any negative entries.

  X:               0             1             2
  X does NOT contain any negative entries.

  X:              -1             0             1
  X contains at least one negative entry.

  X:              -3           -99         -87.3
  X contains at least one negative entry.

R8VEC_IS_NEGATIVE_ANY_TEST
  Normal end of execution.

R8VEC_IS_NONNEGATIVE_TEST
  Python version: 3.6.9
  R8VEC_IS_NONNEGATIVE is TRUE if an R8VEC only contains
  nonnegative entries.

  X:               0             1             2
  X contains only nonnegative entries.

  X:              -1             0             1
  X does NOT contain only nonnegative entries.

  X:              -3           -99         -87.3
  X does NOT contain only nonnegative entries.

R8VEC_IS_NONNEGATIVE_TEST
  Normal end of execution.

R8VEC_IS_NONPOSITIVE_TEST
  Python version: 3.6.9
  R8VEC_IS_NONPOSITIVE is TRUE if an R8VEC only contains
  nonpositive entries.

  X:               0             1             2
  X does NOT contain only nonpositive entries.

  X:              -2            -1             0
  X contains only nonpositive entries.

  X:              -3           -99         -87.3
  X contains only nonpositive entries.

R8VEC_IS_NONPOSITIVE_TEST
  Normal end of execution.

R8VEC_IS_NONZERO_ANY_TEST
  Python version: 3.6.9
  R8VEC_IS_NONZERO_ANY is TRUE if an R8VEC contains
  any nonzero entry.

  X:               0             1             0
  X contains at least one nonzero entry.

  X:               0             0             0
  X contains NO nonzero entries.

  X:              -3           -99         -87.3
  X contains at least one nonzero entry.

R8VEC_IS_NONZERO_ANY_TEST
  Normal end of execution.

R8VEC_IS_ONE_TEST
  Python version: 3.6.9
  R8VEC_IS_ONE is TRUE if an R8VEC contains
  only one entries.

  X:               0             1             0
  X contains at least one nonone entry.

  X:               1             1             1
  X contains only one entries.

  X:              -3           -99         -87.3
  X contains at least one nonone entry.

R8VEC_IS_ONE_TEST
  Normal end of execution.

R8VEC_IS_POSITIVE_TEST
  Python version: 3.6.9
  R8VEC_IS_POSITIVE is TRUE if an R8VEC only contains
  strictly positive entries.

  X:               1             2             3
  X contains only positive entries.

  X:               2             1             0
  X does NOT contain only positive entries.

  X:              -3           -99         -87.3
  X does NOT contain only positive entries.

R8VEC_IS_POSITIVE_TEST
  Normal end of execution.

R8VEC_IS_ZERO_TEST
  Python version: 3.6.9
  R8VEC_IS_ZERO is TRUE if an R8VEC contains
  only zero entries.

  X:               0             1             0
  X contains at least one nonzero entry.

  X:               0             0             0
  X contains only zero entries.

  X:              -3           -99         -87.3
  X contains at least one nonzero entry.

R8VEC_IS_ZERO_TEST
  Normal end of execution.

R8VEC_LINSPACE_TEST
  Python version: 3.6.9
  R8VEC_LINSPACE returns evenly spaced values between A and B.

  The linspace vector:

     0:            10
     1:          12.5
     2:            15
     3:          17.5
     4:            20

R8VEC_LINSPACE_TEST
  Normal end of execution.

R8VEC_LINSPACE2_TEST
  Python version: 3.6.9
  R8VEC_LINSPACE2 returns evenly spaced values between A and B
  omitting the endpoints.

  The linspace2 vector:

     0:            12
     1:            14
     2:            16
     3:            18

R8VEC_LINSPACE2_TEST
  Normal end of execution.

R8VEC_MAX_TEST
  Python version: 3.6.9
  R8VEC_MAX computes the maximum entry in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Max = 9.12635

R8VEC_MAX_TEST:
  Normal end of execution.

R8VEC_MAX_ABS_INDEX_TEST
  Python version: 3.6.9
  R8VEC_MAX_ABS_INDEX: index of entry of maximum absolute value

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Maximum index: 1

R8VEC_MAX_ABS_INDEX_TEST:
  Normal end of execution.

R8VEC_MAX_INDEX_TEST
  Python version: 3.6.9
  R8VEC_MAX_INDEX: index of maximum entry

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Maximum index: 1

R8VEC_MAX_INDEX_TEST:
  Normal end of execution.

R8VEC_MEAN_TEST
  Python version: 3.6.9
  R8VEC_MEAN computes the mean of an R8VEC.

  Input vector:

     0:      -2.81582
     1:       4.56318
     2:       3.29509
     3:      0.616954
     4:     -0.846929
     5:      -4.33881
     6:      -2.42422
     7:      -3.90043
     8:      -4.56171
     9:       1.33966

  Value = -0.907304

R8VEC_MEAN_TEST:
  Normal end of execution.

R8VEC_MEAN_GEOMETRIC_TEST
  Python version: 3.6.9
  R8VEC_MEAN_GEOMETRIC computes the geometric mean of an R8VEC.

  Input vector:

     0:       1.09209
     1:       4.78159
     2:       4.14755
     3:       2.80848
     4:       2.07654
     5:      0.330594
     6:       1.28789
     7:      0.549784
     8:      0.219145
     9:       3.16983

  Geometric mean = 1.35287

R8VEC_MEAN_GEOMETRIC_TEST:
  Normal end of execution.

R8VEC_MEAN_RUNNING_TEST
  Python version: 3.6.9
  R8VEC_MEAN_RUNNING returns the running means of an R8VEC.

  Random R8VEC:

     0:      -1.72373
     1:       9.34476
     2:       7.44264
     3:       3.42543
     4:       1.22961
     5:      -4.00822
     6:      -1.13633
     7:      -3.35065
     8:      -4.34257
     9:       4.50949

  Running means:

     0:             0
     1:      -1.72373
     2:       3.81052
     3:       5.02123
     4:       4.62228
     5:       3.94374
     6:       2.61842
     7:       2.08202
     8:       1.40294
     9:       0.76455
    10:       1.13904

R8VEC_MEAN_RUNNING_TEST:
  Normal end of execution.

R8VEC_MEAN_UPDATE_TEST
  Python version: 3.6.9
  R8VEC_MEAN_UPDATE updates the mean of a vector
  when one more element is added.

   N      R               MEAN         MEAN_UPDATE

   1        0.218418        0.218418        0.218418
   2        0.956318        0.587368        0.587368
   3        0.829509        0.668082        0.668082
   4        0.561695        0.641485        0.641485
   5        0.415307         0.59625         0.59625
   6       0.0661187        0.507894        0.507894
   7        0.257578        0.472135        0.472135
   8        0.109957        0.426863        0.426863
   9        0.043829        0.384303        0.384303

R8VEC_MEAN_UPDATE_TEST:
  Normal end of execution.

R8VEC_MIDSPACE_TEST
  Python version: 3.6.9
  R8VEC_MIDSPACE returns the midpoints of N intervals in [A,B].

  The midspace vector:

     0:            11
     1:            13
     2:            15
     3:            17
     4:            19

R8VEC_MIDSPACE_TEST
  Normal end of execution.

R8VEC_MIN_TEST
  Python version: 3.6.9
  R8VEC_MIN computes the minimum entry in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Min = -9.12342

R8VEC_MIN_TEST:
  Normal end of execution.

R8VEC_MIRROR_NEXT_TEST
  Python version: 3.6.9
  R8VEC_MIRROR_NEXT generates all sign variations
  of a real vector.

   0       1       2       3
   0      -1       2       3
   0       1      -2       3
   0      -1      -2       3
   0       1       2      -3
   0      -1       2      -3
   0       1      -2      -3
   0      -1      -2      -3

  Done.

   0       1       0       3
   0      -1       0       3
   0       1      -0      -3
   0      -1      -0      -3

  Done.

R8VEC_MIRROR_NEXT_TEST:
  Normal end of execution.

R8VEC_MIRROR_AB_NEXT_TEST
  Python version: 3.6.9
  R8VEC_MIRROR_AB_NEXT generates all versions of
  of a real vector X mirrored by A and B.

  Case 1: 3x3x3 possibilities:

   A:            -0.5          -0.5          -0.5
   X:               0             0             0
   B:             0.5           0.5           0.5

1              -1            -1            -1
2              -1            -1             0
3              -1            -1             1
4              -1             0            -1
5              -1             0             0
6              -1             0             1
7              -1             1            -1
8              -1             1             0
9              -1             1             1
10               0            -1            -1
11               0            -1             0
12               0            -1             1
13               0             0            -1
14               0             0             0
15               0             0             1
16               0             1            -1
17               0             1             0
18               0             1             1
19               1            -1            -1
20               1            -1             0
21               1            -1             1
22               1             0            -1
23               1             0             0
24               1             0             1
25               1             1            -1
26               1             1             0
27               1             1             1

  Done.

  Case 2: 3x2x3 possibilities:

   A:            -0.5          -0.5          -0.5
   X:               0           0.5             0
   B:             0.5           0.5           0.5

1              -1          -1.5            -1
2              -1          -1.5             0
3              -1          -1.5             1
4              -1           0.5            -1
5              -1           0.5             0
6              -1           0.5             1
7               0          -1.5            -1
8               0          -1.5             0
9               0          -1.5             1
10               0           0.5            -1
11               0           0.5             0
12               0           0.5             1
13               1          -1.5            -1
14               1          -1.5             0
15               1          -1.5             1
16               1           0.5            -1
17               1           0.5             0
18               1           0.5             1

  Done.

  Case 3: 1x3x3 possibilities:

   A:               0          -0.5          -0.5
   X:               0             0             0
   B:               0           0.5           0.5

1               0            -1            -1
2               0            -1             0
3               0            -1             1
4               0             0            -1
5               0             0             0
6               0             0             1
7               0             1            -1
8               0             1             0
9               0             1             1

  Done.

R8VEC_MIRROR_AB_NEXT_TEST:
  Normal end of execution.

R8VEC_NINT_TEST
  Python version: 3.6.9
  R8VEC_NINT rounds an R8VEC.

  Vector A:

     0:      -2.81582
     1:       4.56318
     2:       3.29509
     3:      0.616954
     4:     -0.846929

  Rounded vector A:

     0:            -3
     1:             5
     2:             3
     3:             1
     4:            -1

R8VEC_NINT_TEST:
  Normal end of execution.

R8VEC_NORM_TEST
  Python version: 3.6.9
  R8VEC_NORM computes the L2 norm of an R8VEC.

  Input vector:

     0:      0.218418
     1:      0.956318
     2:      0.829509
     3:      0.561695
     4:      0.415307
     5:     0.0661187
     6:      0.257578
     7:      0.109957
     8:      0.043829
     9:      0.633966

  L2 norm = 1.62017

R8VEC_NORM_TEST:
  Normal end of execution.

R8VEC_NORM_AFFINE_TEST
  Python version: 3.6.9
  R8VEC_NORM_AFFINE computes the L2 norm of
  the difference of two R8VECs.

  R8VEC_NORM_AFFINE(X,Y) = 1.22756
  R8VEC_NORM (X-Y):        1.22756

R8VEC_NORM_AFFINE_TEST:
  Normal end of execution.

R8VEC_NORM_L0_TEST
  Python version: 3.6.9
  R8VEC_NORM_L0 computes the L0 "norm" of an R8VEC.

  Input vector:

     0:            -1
     1:             2
     2:             1
     3:             0
     4:            -0
     5:            -2
     6:            -1
     7:            -2
     8:            -2
     9:             1

  L0 norm = 8

R8VEC_NORM_L0_TEST:
  Normal end of execution.

R8VEC_NORM_L1_TEST
  Python version: 3.6.9
  R8VEC_NORM_L1 computes the L1 norm of an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  L1 norm = 57.4056

R8VEC_NORM_L1_TEST:
  Normal end of execution.

R8VEC_NORM_L2_TEST
  Python version: 3.6.9
  R8VEC_NORM_L2 computes the L2 norm of an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  L2 norm = 20.3201

R8VEC_NORM_L2_TEST:
  Normal end of execution.

R8VEC_NORM_LI_TEST
  Python version: 3.6.9
  R8VEC_NORM_LI computes the Loo norm of an R8VEC.

  Input vector:

     0:      -2.81582
     1:       4.56318
     2:       3.29509
     3:      0.616954
     4:     -0.846929
     5:      -4.33881
     6:      -2.42422
     7:      -3.90043
     8:      -4.56171
     9:       1.33966

  Loo norm = 4.56318

R8VEC_NORM_LI_TEST:
  Normal end of execution.

R8VEC_NORM_RMS_TEST
  Python version: 3.6.9
  R8VEC_NORM_RMS computes the RMS norm of an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  RMS norm = 6.42577

R8VEC_NORM_RMS_TEST:
  Normal end of execution.

R8VEC_NORMAL_01_TEST
  Python version: 3.6.9
  R8VEC_NORMAL_01 returns a vector of Normal 01 values

  SEED = 123456789

  Vector:

     0:       1.67904
     1:      -0.56606
     2:       1.21293
     3:       1.26938
     4:      -1.66609
     5:      -2.24246
     6:     0.0396749
     7:      0.673068
     8:     -0.275127
     9:         2.164

R8VEC_NORMAL_01_TEST:
  Normal end of execution.

R8VEC_NORMAL_AB_TEST
  Python version: 3.6.9
  R8VEC_NORMAL_AB returns a vector of Normal AB values

  Mean = 15
  Standard deviation = 0.25
  SEED = 123456789

  Vector:

     0:       15.4198
     1:       14.8585
     2:       15.3032
     3:       15.3173
     4:       14.5835
     5:       14.4394
     6:       15.0099
     7:       15.1683
     8:       14.9312
     9:        15.541

R8VEC_NORMAL_AB_TEST:
  Normal end of execution.

R8VEC_NORMALIZE_L1_TEST
  Python version: 3.6.9
  R8VEC_NORMALIZE_L1 normalizes an R8VEC in the L1 norm.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  After calling R8VEC_NORMALIZE_L1:

     0:    -0.0981025
     1:       0.15898
     2:        0.1148
     3:     0.0214946
     4:    -0.0295068
     5:     -0.151163
     6:    -0.0844594
     7:      -0.13589
     8:     -0.158929
     9:     0.0466734

R8VEC_NORMALIZE_L1_TEST:
  Normal end of execution.

R8VEC_PERMUTE_TEST
  Python version: 3.6.9
  R8VEC_PERMUTE permutes an R8VEC.

  Original array X[]:

     0:           1.1
     1:           2.2
     2:           3.3
     3:           4.4
     4:           5.5

  Permutation vector P[]:

     0       1
     1       3
     2       4
     3       0
     4       2

  Permuted array X[P[*]]:

     0:           2.2
     1:           4.4
     2:           5.5
     3:           1.1
     4:           3.3

R8VEC_PERMUTE_TEST:
  Normal end of execution.

R8VEC_PERMUTE_CYCLIC_TEST
  Python version: 3.6.9
  R8VEC_PERMUTE_CYCLIC performa a cyclic permutation
  of K positions on an R8VEC.

  K = 4

  Original array X:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5
     5:             6
     6:             7
     7:             8
     8:             9
     9:            10

  Array after permutation:

     0:             5
     1:             6
     2:             7
     3:             8
     4:             9
     5:            10
     6:             1
     7:             2
     8:             3
     9:             4

R8VEC_PERMUTE_CYCLIC_TEST:
  Normal end of execution.

R8VEC_PERMUTE_UNIFORM_TEST
  Python version: 3.6.9
  R8VEC_PERMUTE_UNIFORM randomly reorders an R8VEC.

  A, before rearrangement:

     0:           101
     1:           102
     2:           103
     3:           104
     4:           105
     5:           106
     6:           107
     7:           108
     8:           109
     9:           110
    10:           111
    11:           112

  A, after rearrangement:

     0:           103
     1:           112
     2:           111
     3:           109
     4:           108
     5:           106
     6:           105
     7:           107
     8:           104
     9:           101
    10:           110
    11:           102

R8VEC_PERMUTE_UNIFORM_TEST:
  Normal end of execution.

R8VEC_PRINT_TEST
  Python version: 3.6.9
  R8VEC_PRINT prints an R8VEC.

  Here is an R8VEC:

     0:       123.456
     1:         5e-06
     2:        -1e+06
     3:       3.14159

R8VEC_PRINT_TEST:
  Normal end of execution.

R8VEC_PRINT_PART_TEST
  Python version: 3.6.9
  R8VEC_PRINT_PART prints part of an R8VEC.

  Lines 10:20 of the vector:

        10:           11
        11:           12
        12:           13
        13:           14
        14:           15
        15:           16
        16:           17
        17:           18
        18:           19
        19:           20
        20:           21

R8VEC_PRINT_PART_TEST:
  Normal end of execution.

R8VEC_PRINT_SOME_TEST
  Python version: 3.6.9
  R8VEC_PRINT_SOME prints some of an R8VEC.

  No more than 10 lines of this vector:

       0               1
       1               2
       2               3
       3               4
       4               5
       5               6
       6               7
       7               8
  ......  ..............
      99             100

R8VEC_PRINT_SOME_TEST:
  Normal end of execution.

R8VEC_PRODUCT_TEST
  Python version: 3.6.9
  R8VEC_PRODUCT computes the product of the entries in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Product of entries = 5.67959e+06

R8VEC_PRODUCT_TEST:
  Normal end of execution.

R8VEC_REVERSE_TEST
  Python version: 3.6.9
  R8VEC_REVERSE reverses an R8VEC.

  Original array:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5

  Reversed array:

     0:             5
     1:             4
     2:             3
     3:             2
     4:             1

R8VEC_REVERSE_TEST:
  Normal end of execution.

R8VEC_ROTATE_TEST
  Python version: 3.6.9
  R8VEC_ROTATE rotates an R8VEC in place.

  Rotate entries 2 places to the right

  Original array:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5

  Rotated array:

     0:             4
     1:             5
     2:             1
     3:             2
     4:             3

R8VEC_ROTATE_TEST:
  Normal end of execution.

R8VEC_RSQUARED_TEST
  Python version: 3.6.9
  R8VEC_RSQUARED computes the R^2 goodness-of-fit statistic.

  Data and model:

       0:              0             0
       1:           9.58             9
       2:          16.76            16
       3:          21.52            21
       4:          24.38            24
       5:          24.97            25
       6:           22.9            24
       7:          20.45            21
       8:           12.4            16
       9:           7.65             9
      10:          -3.82             0

  Computed R^2 is 0.967402

R8VEC_RSQUARED_TEST:
  Normal end of execution.

R8VEC_SIGN3_RUNNING_TEST
  Python version: 3.6.9
  R8VEC_SIGN3_RUNNING returns the running sign3 of an R8VEC.

  Random R8VEC:

     0:      -1.72373
     1:       9.34476
     2:       7.44264
     3:       3.42543
     4:       1.22961
     5:      -4.00822
     6:      -1.13633
     7:      -3.35065
     8:      -4.34257
     9:       4.50949

  Running sign3:

     0:             0
     1:            -1
     2:             1
     3:             1
     4:             1
     5:             1
     6:             1
     7:             1
     8:             1
     9:             1
    10:             1

R8VEC_SIGN3_RUNNING_TEST:
  Normal end of execution.

R8VEC_SCALE_01_TEST
  Python version: 3.6.9
  R8VEC_SCALE_01 shifts and scales an R8VEC so that
  it has min 0 and max 1

  Vector X:

     0:     -0.631634
     1:       14.1264
     2:       11.5902
     3:       6.23391
     4:       3.30614
     5:      -3.67763
     6:      0.151556
     7:      -2.80086
     8:      -4.12342
     9:       7.67931

  mean(X) = 3.18539
  std(X)  = 6.16423
  max(X)  = 14.1264
  min(X)  = -4.12342

  Vector XS:

     0:      0.191333
     1:             1
     2:       0.86103
     3:      0.567532
     4:      0.407104
     5:     0.0244274
     6:      0.234248
     7:     0.0724697
     8:             0
     9:      0.646733

  mean(XS) = 0.400488
  std(XS)  = 0.33777
  max(XS)  = 1
  min(XS)  = 0

R8VEC_SCALE_01_TEST
  Normal end of execution.

R8VEC_SCALE_AB_TEST
  Python version: 3.6.9
  R8VEC_SCALE_AB shifts and scales an R8VEC so that
  it has min A and max B

  Vector X:

     0:     -0.631634
     1:       14.1264
     2:       11.5902
     3:       6.23391
     4:       3.30614
     5:      -3.67763
     6:      0.151556
     7:      -2.80086
     8:      -4.12342
     9:       7.67931

  mean(X) = 3.18539
  std(X)  = 6.16423
  max(X)  = 14.1264
  min(X)  = -4.12342

  Rescale to [-1,1]

  Vector XS:

     0:     -0.617334
     1:             1
     2:       0.72206
     3:      0.135064
     4:     -0.185791
     5:     -0.951145
     6:     -0.531504
     7:     -0.855061
     8:            -1
     9:      0.293467

  mean(XS) = -0.199024
  std(XS)  = 0.675541
  max(XS)  = 1
  min(XS)  = -1

R8VEC_SCALE_AB_TEST
  Normal end of execution.

r8vec_smooth_test
  r8vec_smooth smooths an R8VEC.

  The vector X:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5
     5:             6
     6:             7
     7:             8
     8:             9
     9:            10

  Vector X using smoothing S = 2

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5
     5:             6
     6:             7
     7:             8
     8:             9
     9:            10

  The vector X:

     0:             1
     1:             4
     2:             9
     3:            16
     4:            25
     5:            36
     6:            49
     7:            64
     8:            81
     9:           100

  Vector X using smoothing S = 1

     0:             1
     1:       4.66667
     2:       9.66667
     3:       16.6667
     4:       25.6667
     5:       36.6667
     6:       49.6667
     7:       64.6667
     8:       81.6667
     9:           100

r8vec_smooth_test:
  Normal end of execution.

R8VEC_SOFTMAX_TEST
  Python version: 3.6.9
  R8VEC_SOFTMAX evaluates the softmax function.

  X, Softmax(X):

       0:        2.03712      0.169954
       1:       -4.69818   0.000201943
       2:       0.638803     0.0419808
       3:       0.808142     0.0497272
       4:       -7.99826    7.4477e-06
       5:       -9.72739   1.32151e-06
       6:       -2.88098    0.00124288
       7:      -0.980795    0.00831128
       8:       -3.82538    0.00048337
       9:        3.49201      0.728089

R8VEC_SOFTMAX_TEST:
  Normal end of execution.

R8VEC_SORTED_NEAREST_TEST
  Python version: 3.6.9
  R8VEC_SORTED_NEAREST finds, for a given value R,
  the nearest element in a sorted R8VEC.

  Sorted R8VEC:

     0:             0
     1:             1
     2:             2
     3:             3
     4:             4
     5:             5
     6:             6
     7:             7
     8:             8
     9:             9
    10:            10

  R = 1.62102 is nearest S[2] = 2
  R = 10.4758 is nearest S[10] = 10
  R = 8.95411 is nearest S[9] = 9
  R = 5.74035 is nearest S[6] = 6
  R = 3.98368 is nearest S[4] = 4
  R = -0.206575 is nearest S[0] = 0
  R = 2.09093 is nearest S[2] = 2
  R = 0.319482 is nearest S[0] = 0
  R = -0.474052 is nearest S[0] = 0
  R = 6.60759 is nearest S[7] = 7
  R = -0.259273 is nearest S[0] = 0
  R = 4.39447 is nearest S[4] = 4
  R = 3.81568 is nearest S[4] = 4
  R = 8.05608 is nearest S[8] = 8
  R = 8.56744 is nearest S[9] = 9

R8VEC_SORTED_NEAREST_TEST:
  Normal end of execution.

r8vec_standardize_test
  Python version: 3.6.9
  r8vec_standardize shifts and scales an R8VEC so that
  it has zero mean and unit standard deviation.

  Vector X:

     0:     -0.631634
     1:       14.1264
     2:       11.5902
     3:       6.23391
     4:       3.30614
     5:      -3.67763
     6:      0.151556
     7:      -2.80086
     8:      -4.12342
     9:       7.67931

  mean(X) = 3.18539
  std(X)  = 6.49767
  max(X)  = 14.1264
  min(X)  = -4.12342

  Vector XS:

     0:     -0.587445
     1:       1.68383
     2:       1.29351
     3:      0.469171
     4:     0.0185836
     5:      -1.05623
     6:     -0.466911
     7:     -0.921293
     8:      -1.12484
     9:      0.691621

  mean(XS) = 0
  std(XS)  = 1
  max(XS)  = 1.68383
  min(XS)  = -1.12484

r8vec_standardize_test
  Normal end of execution.

R8VEC_STD_TEST
  Python version: 3.6.9
  R8VEC_STD computes the standard deviation of an R8VEC.

  Input vector:

     0:      -2.81582
     1:       4.56318
     2:       3.29509
     3:      0.616954
     4:     -0.846929
     5:      -4.33881
     6:      -2.42422
     7:      -3.90043
     8:      -4.56171
     9:       1.33966

  Value = 3.08212

R8VEC_STD_TEST:
  Normal end of execution.

R8VEC_STD_SAMPLE_TEST
  Python version: 3.6.9
  R8VEC_STD_SAMPLE computes the sample standard deviation of an R8VEC.

  Input vector:

     0:      -2.81582
     1:       4.56318
     2:       3.29509
     3:      0.616954
     4:     -0.846929
     5:      -4.33881
     6:      -2.42422
     7:      -3.90043
     8:      -4.56171
     9:       1.33966

  Value = 3.24883

R8VEC_STD_SAMPLE_TEST:
  Normal end of execution.

R8VEC_STD_UPDATE_TEST
  Python version: 3.6.9
  R8VEC_STD_UPDATE updates the standard deviation of a vector
  when one more element is added.

   N      R                STD          STD_UPDATE

   1        0.218418               0               0
   2        0.956318         0.36895         0.36895
   3        0.829509        0.322147        0.322147
   4        0.561695        0.282765        0.282765
   5        0.415307        0.268607        0.268607
   6       0.0661187        0.314894        0.314894
   7        0.257578        0.304409        0.304409
   8        0.109957        0.308916        0.308916
   9        0.043829        0.315145        0.315145

R8VEC_STD_UPDATE_TEST:
  Normal end of execution.

R8VEC_STEP_TEST
  Python version: 3.6.9
  R8VEC_STEP evaluates a step function.

        X0         X           STEP(X0,X)


  Step function with X0 = 0.31

       0:              0             0
       1:           0.05             0
       2:            0.1             0
       3:           0.15             0
       4:            0.2             0
       5:           0.25             0
       6:            0.3             0
       7:           0.35             1
       8:            0.4             1
       9:           0.45             1
      10:            0.5             1
      11:           0.55             1
      12:            0.6             1
      13:           0.65             1
      14:            0.7             1
      15:           0.75             1
      16:            0.8             1
      17:           0.85             1
      18:            0.9             1
      19:           0.95             1
      20:              1             1

R8VEC_STEP_TEST
  Normal end of execution.

R8VEC_SUM_TEST
  Python version: 3.6.9
  R8VEC_SUM sums the entries in an R8VEC.

  Input vector:

     0:      -5.63163
     1:       9.12635
     2:       6.59018
     3:       1.23391
     4:      -1.69386
     5:      -8.67763
     6:      -4.84844
     7:      -7.80086
     8:      -9.12342
     9:       2.67931

  Sum of entries = -18.1461

R8VEC_SUM_TEST:
  Normal end of execution.

R8VEC_SUM_RUNNING_TEST
  Python version: 3.6.9
  R8VEC_SUM_RUNNING returns the running sums of an R8VEC.

  Random R8VEC:

     0:      -1.72373
     1:       9.34476
     2:       7.44264
     3:       3.42543
     4:       1.22961
     5:      -4.00822
     6:      -1.13633
     7:      -3.35065
     8:      -4.34257
     9:       4.50949

  Running sums:

     0:             0
     1:      -1.72373
     2:       7.62104
     3:       15.0637
     4:       18.4891
     5:       19.7187
     6:       15.7105
     7:       14.5742
     8:       11.2235
     9:       6.88095
    10:       11.3904

R8VEC_SUM_RUNNING_TEST:
  Normal end of execution.

R8VEC_TRANSPOSE_PRINT_TEST
  Python version: 3.6.9
  R8VEC_TRANSPOSE_PRINT prints an R8VEC "tranposed",
  that is, placing multiple entries on a line.
  The vector X:               1           2.1           3.2           4.3           5.4
                            6.5           7.6           8.7           9.8          10.9
                             11

R8VEC_TRANSPOSE_PRINT_TEST
  Normal end of execution.

R8VEC_UNIFORM_01_TEST
  Python version: 3.6.9
  R8VEC_UNIFORM_01 computes a random R8VEC.

  Initial seed is 123456789

  Random R8VEC:

     0:      0.218418
     1:      0.956318
     2:      0.829509
     3:      0.561695
     4:      0.415307
     5:     0.0661187
     6:      0.257578
     7:      0.109957
     8:      0.043829
     9:      0.633966

R8VEC_UNIFORM_01_TEST:
  Normal end of execution.

R8VEC_UNIFORM_AB_TEST
  Python version: 3.6.9
  R8VEC_UNIFORM_AB computes a random R8VEC.

  -1 <= X <= 5
  Initial seed is 123456789

  Random R8VEC:

     0:       0.31051
     1:       4.73791
     2:       3.97706
     3:       2.37017
     4:       1.49184
     5:     -0.603288
     6:      0.545467
     7:     -0.340259
     8:     -0.737026
     9:       2.80379

R8VEC_UNIFORM_AB_TEST:
  Normal end of execution.

R8VEC_UNIFORM_UNIT_TEST
  Python version: 3.6.9
  R8VEC_UNIFORM_UNIT returns a random R8VEC
  on the surface of the unit M sphere.


  Vector:

     0:      0.559743
     1:     -0.188708
     2:      0.404357
     3:      0.423174
     4:     -0.555425

  Vector:

     0:     -0.700707
     1:     0.0123973
     2:      0.210315
     3:    -0.0859695
     4:       0.67619

  Vector:

     0:      0.106795
     1:      0.733237
     2:      0.501662
     3:     -0.445775
     4:    -0.0240584

  Vector:

     0:     -0.687688
     1:     -0.453412
     2:     -0.303477
     3:      0.114009
     4:      0.465195

  Vector:

     0:     -0.571363
     1:     -0.512344
     2:     -0.314941
     3:     -0.510312
     4:      0.226806

R8VEC_UNIFORM_UNIT_TEST:
  Normal end of execution.

R8VEC_VARIANCE_TEST
  Python version: 3.6.9
  R8VEC_VARIANCE computes the variance of an R8VEC.

  Input vector:

     0:      -2.81582
     1:       4.56318
     2:       3.29509
     3:      0.616954
     4:     -0.846929
     5:      -4.33881
     6:      -2.42422
     7:      -3.90043
     8:      -4.56171
     9:       1.33966

  Value = 9.49943

R8VEC_VARIANCE_TEST:
  Normal end of execution.

R8VEC_VARIANCE_CIRCULAR_TEST
  Python version: 3.6.9
  R8VEC_VARIANCE_CIRCULAR computes the circular variance of an R8VEC.

  Uniform Vector in [-PI,+PI]:

     0:      -1.76923
     1:       2.86713
     2:       2.07037
     3:      0.387644
     4:     -0.532141
     5:      -2.72616
     6:      -1.52318
     7:      -2.45071
     8:      -2.86621
     9:      0.841731

  Circular variance: 0.765084

  Normal vector, mean 0, variance 1

     0:       1.67904
     1:      -0.56606
     2:       1.21293
     3:       1.26938
     4:      -1.66609
     5:      -2.24246
     6:     0.0396749
     7:      0.673068
     8:     -0.275127
     9:         2.164

  Circular variance: 0.663344

R8VEC_VARIANCE_CIRCULAR_TEST
  Normal end of execution.

R8VEC_VARIANCE_SAMPLE_TEST
  Python version: 3.6.9
  R8VEC_VARIANCE_SAMPLE computes the sample variance of an R8VEC.

  Input vector:

     0:      -2.81582
     1:       4.56318
     2:       3.29509
     3:      0.616954
     4:     -0.846929
     5:      -4.33881
     6:      -2.42422
     7:      -3.90043
     8:      -4.56171
     9:       1.33966

  Sample variance = 10.5549

R8VEC_VARIANCE_SAMPLE_TEST:
  Normal end of execution.

R8VEC_VARIANCE_UPDATE_TEST
  Python version: 3.6.9
  R8VEC_VARIANCE_UPDATE updates the variance of a vector
  when one more element is added.

   N      R                VARIANCE          VARIANCE_UPDATE

   1        0.218418               0               0
   2        0.956318        0.136124        0.136124
   3        0.829509        0.103779        0.103779
   4        0.561695       0.0799561       0.0799561
   5        0.415307       0.0721499       0.0721499
   6       0.0661187       0.0991581       0.0991581
   7        0.257578       0.0926651       0.0926651
   8        0.109957        0.095429        0.095429
   9        0.043829       0.0993161       0.0993161

R8VEC_VARIANCE_UPDATE_TEST:
  Normal end of execution.

R8VEC2_PRINT_TEST
  Python version: 3.6.9
  R8VEC2_PRINT prints a pair of R8VEC's.

  Print a pair of R8VEC's:

       0:              0             0
       1:            0.2          0.04
       2:            0.4          0.16
       3:            0.6          0.36
       4:            0.8          0.64
       5:              1             1

R8VEC2_PRINT_TEST:
  Normal end of execution.

R8VEC2_PRINT_SOME_TEST
  Python version: 3.6.9
  R8VEC2_PRINT_SOME prints some of a pair of R8VEC's.

  Square and square root:

     0:              1               1
     1:              4         1.41421
     2:              9         1.73205
     3:             16               2
     4:             25         2.23607
     5:             36         2.44949
     6:             49         2.64575
     7:             64         2.82843
......  ..............  ..............
    99:          10000              10

R8VEC2_PRINT_SOME_TEST:
  Normal end of execution.

R8VEC3_PRINT_TEST
  Python version: 3.6.9
  R8VEC3_PRINT prints an R8VEC.

  X, X^2, X+X^2's:

       0:              0             0             0
       1:            0.2          0.04          0.24
       2:            0.4          0.16          0.56
       3:            0.6          0.36          0.96
       4:            0.8          0.64          1.44
       5:              1             1             2

R8VEC3_PRINT_TEST:
  Normal end of execution.

SORT_HEAP_EXTERNAL_TEST
  Python version: 3.6.9
  SORT_HEAP_EXTERNAL sorts objects externally.

  Unsorted array:

     0       5
     1      20
     2      17
     3      12
     4       9
     5       2
     6       6
     7       3
     8       1
     9      13
    10       2
    11       9
    12       9
    13      16
    14      16
    15       1
    16      18
    17       8
    18       2
    19       1

  Sorted array:

     0       1
     1       1
     2       1
     3       2
     4       2
     5       2
     6       3
     7       5
     8       6
     9       8
    10       9
    11       9
    12       9
    13      12
    14      13
    15      16
    16      16
    17      17
    18      18
    19      20

SORT_HEAP_EXTERNAL_TEST:
  Normal end of execution.

TIMESTAMP_TEST:
  Python version: 3.6.9
  TIMESTAMP prints a timestamp of the current date and time.

Sun Feb  2 08:30:46 2020

TIMESTAMP_TEST:
  Normal end of execution.

r8lib_test:
  Normal end of execution.
Sun Feb  2 08:30:46 2020
