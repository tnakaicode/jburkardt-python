#! /usr/bin/env python
#
def r8_ai ( x ):

#*****************************************************************************80
#
## R8_AI evaluates the Airy function Ai of an R8 argument.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real VALUE, the Airy function Ai of X.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach

  aifcs = np.array ( [ \
      -0.37971358496669997496197089469414E-01, \
      +0.59191888537263638574319728013777E-01, \
      +0.98629280577279975365603891044060E-03, \
      +0.68488438190765667554854830182412E-05, \
      +0.25942025962194713019489279081403E-07, \
      +0.61766127740813750329445749697236E-10, \
      +0.10092454172466117901429556224601E-12, \
      +0.12014792511179938141288033225333E-15, \
      +0.10882945588716991878525295466666E-18, \
      +0.77513772196684887039238400000000E-22, \
      +0.44548112037175638391466666666666E-25, \
      +0.21092845231692343466666666666666E-28, \
      +0.83701735910741333333333333333333E-32 ] )

  aigcs = np.array ( [ \
      +0.18152365581161273011556209957864E-01, \
      +0.21572563166010755534030638819968E-01, \
      +0.25678356987483249659052428090133E-03, \
      +0.14265214119792403898829496921721E-05, \
      +0.45721149200180426070434097558191E-08, \
      +0.95251708435647098607392278840592E-11, \
      +0.13925634605771399051150420686190E-13, \
      +0.15070999142762379592306991138666E-16, \
      +0.12559148312567778822703205333333E-19, \
      +0.83063073770821340343829333333333E-23, \
      +0.44657538493718567445333333333333E-26, \
      +0.19900855034518869333333333333333E-29, \
      +0.74702885256533333333333333333333E-33 ] )

  naif = r8_inits ( aifcs, 13, 0.1 * r8_mach ( 3 ) )
  naig = r8_inits ( aigcs, 13, 0.1 * r8_mach ( 3 ) )
  x3sml = r8_mach ( 3 ) ** 0.3334
  xmax = ( - 1.5 * np.log ( r8_mach ( 1 ) ) ) ** 0.6667
  xmax = xmax - xmax * np.log ( xmax ) / ( 4.0 * xmax * np.sqrt ( xmax ) + 1.0 ) - 0.01

  if ( x < - 1.0 ):
    xm, theta = r8_aimp ( x )
    value = xm * np.cos ( theta )
  elif ( abs ( x ) <= x3sml ):
    z = 0.0
    value = 0.375 + ( r8_csevl ( z, aifcs, naif ) \
      - x * ( 0.25 + r8_csevl ( z, aigcs, naig ) ) )
  elif ( x <= 1.0 ):
    z = x * x * x
    value = 0.375 + ( r8_csevl ( z, aifcs, naif ) \
      - x * ( 0.25 + r8_csevl ( z, aigcs, naig ) ) )
  elif ( x <= xmax ):
    value = r8_aie ( x ) * np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 )
  else:
    value = 0.0

  return value

def r8_ai_test ( ):

#*****************************************************************************80
#
## R8_AI_TEST tests R8_AI.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    22 April 2016
#
#  Author:
#
#    John Burkardt
#
  import platform
  from airy_ai_values import airy_ai_values

  print ( '' )
  print ( 'R8_AI_TEST:' )
  print ( '  Python version: %s' % ( platform.python_version ( ) ) )
  print ( '  R8_AI evaluates the Airy function Ai(X)' )
  print ( '' )
  print ( '             X      AIRY_AI(X)  R8_AI(X)        Diff' )
  print ( '' )

  n_data = 0

  while ( True ):

    n_data, x, fx1 = airy_ai_values ( n_data )

    if ( n_data == 0 ):
      break

    fx2 = r8_ai ( x )

    print ( '  %14.4g  %14.6g  %14.6g  %14.6g' % ( x, fx1, fx2, abs ( fx1 - fx2 ) ) )
#
#  Terminate.
#
  print ( '' )
  print ( 'R8_AI_TEST:' )
  print ( '  Normal end of execution.' )
  return

def r8_aid ( x ):

#*****************************************************************************80
#
## R8_AID evaluates the derivative of the Airy function Ai of an R8 argument.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real VALUE, the derivative of the Airy function
#    Ai of X.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach

  aifcs = np.array ( [ \
       0.105274612265314088088970057325134114, \
       0.011836136281529978442889292583980840, \
       0.000123281041732256643051689242469164, \
       0.000000622612256381399016825658693579, \
       0.000000001852988878441452950548140821, \
       0.000000000003633288725904357915995625, \
       0.000000000000005046217040440664768330, \
       0.000000000000000005223816555471480985, \
       0.000000000000000000004185745090748989, \
       0.000000000000000000000002672887324883, \
       0.000000000000000000000000001392128006, \
       0.000000000000000000000000000000602653, \
       0.000000000000000000000000000000000220 ] )

  aigcs = np.array ( [ \
       0.0212338781509186668523122276848937, \
       0.0863159303352144067524942809461604, \
       0.0017975947203832313578033963225230, \
       0.0000142654998755506932526620687495, \
       0.0000000594379952836832010488787064, \
       0.0000000001524033664794478945214786, \
       0.0000000000002645876603490435305100, \
       0.0000000000000003315624296815020591, \
       0.0000000000000000003139789757594792, \
       0.0000000000000000000002325767379040, \
       0.0000000000000000000000001384384231, \
       0.0000000000000000000000000000676629, \
       0.0000000000000000000000000000000276 ] )

  eta = 0.1 * r8_mach ( 3 )
  naif = r8_inits ( aifcs, 13, eta )
  naig = r8_inits ( aigcs, 13, eta )
  x3sml = r8_mach ( 3 ) ** 0.3334
  x2sml = np.sqrt ( r8_mach ( 3 ) )

  if ( x < - 1.0 ):
    xn, phi = r8_admp ( x )
    value = xn * np.cos ( phi )
  elif ( abs ( x ) <= x2sml ):
    x2 = 0.0
    x3 = 0.0
    value = ( x2 * ( 0.125 + r8_csevl ( x3, aifcs, naif ) ) \
      - r8_csevl ( x3, aigcs, naig ) ) - 0.25
  elif ( abs ( x ) <= x3sml ):
    x2 = x * x
    x3 = 0.0
    value = ( x2 * ( 0.125 + r8_csevl ( x3, aifcs, naif ) ) \
      - r8_csevl ( x3, aigcs, naig ) ) - 0.25
  elif ( x <= 1.0 ):
    x2 = x * x
    x3 = x * x * x
    value = ( x2 * ( 0.125 + r8_csevl ( x3, aifcs, naif ) ) \
      - r8_csevl ( x3, aigcs, naig ) ) - 0.25
  else:
    value = r8_aide ( x ) \
      * np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 )

  return value

def r8_aid_test ( ):

#*****************************************************************************80
#
## R8_AID_TEST tests R8_AID.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    John Burkardt
#
  import platform
  from airy_ai_prime_values import airy_ai_prime_values

  print ( '' )
  print ( 'R8_AID_TEST:' )
  print ( '  Python version: %s' % ( platform.python_version ( ) ) )
  print ( '  R8_AID evaluates the derivative of the Airy function Ai(x)' )
  print ( '' )
  print ( '             X     AIRY_AID(X)  R8_AID(X)        Diff' )
  print ( '' )

  n_data = 0

  while ( True ):

    n_data, x, fx1 = airy_ai_prime_values ( n_data )

    if ( n_data == 0 ):
      break

    fx2 = r8_aid ( x )

    print ( '  %14.4f  %14.6g  %14.6g  %14.6g' % ( x, fx1, fx2, abs ( fx1 - fx2 ) ) )
#
#  Terminate.
#
  print ( '' )
  print ( 'R8_AID_TEST:' )
  print ( '  Normal end of execution.' )
  return

def r8_aide ( x ):

#*****************************************************************************80
#
## R8_AIDE: exponentially scaled derivative, Airy function Ai of an R8 argument.
#
#  Discussion:
#
#    if X <= 0,
#      R8_AIDE ( X ) = R8_AID ( X )
#    else
#      R8_AIDE ( X ) = R8_AID ( X ) * np.exp ( 2/3 * X^(3/2) )
#
#    Thanks to Aleksandra Piper for pointing out a correction involving 
#    the computation of Z in the last two cases, 02 February 2012.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real VALUE, the exponentially scaled derivative of
#    the Airy function Ai of X.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach

  aifcs = np.array ( [ \
       0.105274612265314088088970057325134114, \
        0.011836136281529978442889292583980840, \
        0.000123281041732256643051689242469164, \
        0.000000622612256381399016825658693579, \
        0.000000001852988878441452950548140821, \
        0.000000000003633288725904357915995625, \
        0.000000000000005046217040440664768330, \
        0.000000000000000005223816555471480985, \
        0.000000000000000000004185745090748989, \
        0.000000000000000000000002672887324883, \
        0.000000000000000000000000001392128006, \
        0.000000000000000000000000000000602653, \
        0.000000000000000000000000000000000220 ] )

  aigcs = np.array ( [ \
        0.0212338781509186668523122276848937, \
        0.0863159303352144067524942809461604, \
        0.0017975947203832313578033963225230, \
        0.0000142654998755506932526620687495, \
        0.0000000594379952836832010488787064, \
        0.0000000001524033664794478945214786, \
        0.0000000000002645876603490435305100, \
        0.0000000000000003315624296815020591, \
        0.0000000000000000003139789757594792, \
        0.0000000000000000000002325767379040, \
        0.0000000000000000000000001384384231, \
        0.0000000000000000000000000000676629, \
        0.0000000000000000000000000000000276 ] )

  aip1cs = np.array ( [ \
       0.0358865097808301537956710489261688, \
       0.0114668575627764898572700883121766, \
      -0.0007592073583861400301335647601603, \
       0.0000869517610893841271948619434021, \
      -0.0000128237294298591691789607600486, \
       0.0000022062695681038336934376250420, \
      -0.0000004222295185920749486945988432, \
       0.0000000874686415726348479356130376, \
      -0.0000000192773588418365388625693417, \
       0.0000000044668460054492719699777137, \
      -0.0000000010790108051948168015747466, \
       0.0000000002700029446696248083071434, \
      -0.0000000000696480108007915257318929, \
       0.0000000000184489907003246687076806, \
      -0.0000000000050027817358071698301149, \
       0.0000000000013852243366012168297298, \
      -0.0000000000003908218466657048253473, \
       0.0000000000001121536072524563451273, \
      -0.0000000000000326861522579502522443, \
       0.0000000000000096619179010090805752, \
      -0.0000000000000028934767442698434271, \
       0.0000000000000008770086661150897069, \
      -0.0000000000000002688046261195853754, \
       0.0000000000000000832498823872342992, \
      -0.0000000000000000260343254786947057, \
       0.0000000000000000082159528142686287, \
      -0.0000000000000000026150406704984940, \
       0.0000000000000000008390563463261051, \
      -0.0000000000000000002712685618629660, \
       0.0000000000000000000883333375271942, \
      -0.0000000000000000000289603206822333, \
       0.0000000000000000000095562185928676, \
      -0.0000000000000000000031727463569051, \
       0.0000000000000000000010595576960768, \
      -0.0000000000000000000003558253765402, \
       0.0000000000000000000001201334680517, \
      -0.0000000000000000000000407666883800, \
       0.0000000000000000000000139016944446, \
      -0.0000000000000000000000047628165730, \
       0.0000000000000000000000016391265551, \
      -0.0000000000000000000000005665491354, \
       0.0000000000000000000000001966381969, \
      -0.0000000000000000000000000685230229, \
       0.0000000000000000000000000239706939, \
      -0.0000000000000000000000000084166831, \
       0.0000000000000000000000000029659364, \
      -0.0000000000000000000000000010487947, \
       0.0000000000000000000000000003721150, \
      -0.0000000000000000000000000001324570, \
       0.0000000000000000000000000000472976, \
      -0.0000000000000000000000000000169405, \
       0.0000000000000000000000000000060855, \
      -0.0000000000000000000000000000021924, \
       0.0000000000000000000000000000007920, \
      -0.0000000000000000000000000000002869, \
       0.0000000000000000000000000000001042, \
      -0.0000000000000000000000000000000379 ] )

  aip2cs = np.array ( [ \
       0.0065457691989713756794276979067064, \
       0.0023833724120774591992772552886923, \
      -0.0000430700770220585862775012110584, \
       0.0000015629125858629202330785369063, \
      -0.0000000815417186162706965112501015, \
       0.0000000054103738056935918208008783, \
      -0.0000000004284130882614696528766222, \
       0.0000000000389497962832286424862198, \
      -0.0000000000039623161264979257658071, \
       0.0000000000004428184214405989602353, \
      -0.0000000000000536296527150689675318, \
       0.0000000000000069649872139936028200, \
      -0.0000000000000009619636286095319210, \
       0.0000000000000001403454967784808032, \
      -0.0000000000000000215097136525875715, \
       0.0000000000000000034471230632678283, \
      -0.0000000000000000005753907621819442, \
       0.0000000000000000000997001165824168, \
      -0.0000000000000000000178811436021458, \
       0.0000000000000000000033110307923551, \
      -0.0000000000000000000006315885529506, \
       0.0000000000000000000001238666952364, \
      -0.0000000000000000000000249324053394, \
       0.0000000000000000000000051426030999, \
      -0.0000000000000000000000010854236402, \
       0.0000000000000000000000002341316852, \
      -0.0000000000000000000000000515542099, \
       0.0000000000000000000000000115758841, \
      -0.0000000000000000000000000026479669, \
       0.0000000000000000000000000006165328, \
      -0.0000000000000000000000000001459931, \
       0.0000000000000000000000000000351331, \
      -0.0000000000000000000000000000085863, \
       0.0000000000000000000000000000021297, \
      -0.0000000000000000000000000000005358, \
       0.0000000000000000000000000000001367, \
      -0.0000000000000000000000000000000353 ] )

  eta = 0.1 * r8_mach ( 3 )
  naif = r8_inits ( aifcs, 13, eta )
  naig = r8_inits ( aigcs, 13, eta )
  naip1 = r8_inits ( aip1cs, 57, eta )
  naip2 = r8_inits ( aip2cs, 37, eta )
  x2sml = np.sqrt ( eta )
  x3sml = eta ** 0.3333
  x32sml = 1.3104 * x3sml * x3sml
  xbig = r8_mach ( 2 ) ** 0.6666

  if ( x < - 1.0 ):
    xn, phi = r8_admp ( x )
    value = xn * np.cos ( phi )
  elif ( abs ( x ) < x2sml ):
    x2 = 0.0
    x3 = 0.0
    value = ( x2 * ( 0.125 + r8_csevl ( x3, aifcs, naif ) ) \
      - r8_csevl ( x3, aigcs, naig ) ) - 0.25
    if ( x32sml < x ):
      value = value * np.exp ( 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( abs ( x ) < x3sml ):
    x2 = x * x
    x3 = 0.0
    value = ( x2 * ( 0.125 + r8_csevl ( x3, aifcs, naif ) ) \
      - r8_csevl ( x3, aigcs, naig ) ) - 0.25
    if ( x32sml < x ):
      value = value * np.exp ( 2.0 * x * np.sqrt ( x ) / 3.0 )
    end
  elif ( x <= 1.0 ):
    x2 = x * x
    x3 = x * x
    value = ( x2 * ( 0.125 + r8_csevl ( x3, aifcs, naif ) ) \
      - r8_csevl ( x3, aigcs, naig ) ) - 0.25
    if ( x32sml < x ):
      value = value * np.exp ( 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( x <= 4.0 ):
    sqrtx = np.sqrt ( x )
    z = ( 16.0  / ( x * sqrtx ) - 9.0 ) / 7.0
    value = ( - 0.28125 - r8_csevl ( z, aip1cs, naip1 ) ) * np.sqrt ( sqrtx )
  elif ( x < xbig ):
    sqrtx = np.sqrt ( x )
    z = 16.0  / ( x * sqrtx ) - 1.0
    value = ( - 0.28125 - r8_csevl ( z, aip2cs, naip2 ) ) * np.sqrt ( sqrtx )
  else:
    sqrtx = np.sqrt ( x )
    z = - 1.0
    value = ( - 0.28125 - r8_csevl ( z, aip2cs, naip2 ) ) * np.sqrt ( sqrtx )

  return value

def r8_aie ( x ):

#*****************************************************************************80
#
## R8_AIE evaluates the exponentially scaled Airy function Ai of an R8 argument.
#
#  Discussion:
#
#    if X <= 0,
#      R8_AIE ( X ) = R8_AI ( X )
#    else
#      R8_AIE ( X ) = R8_AI ( X ) * np.exp ( 2/3 * X^(3/2) )
#
#    Thanks to Aleksandra Piper for pointing out a correction involving a
#    missing assignment to SQRTX, 27 January 2012.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real VALUE, the exponentially scaled Airy
#    function Ai of X.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach

  aifcs = np.array ( [ \
      -0.37971358496669997496197089469414E-01, \
      +0.59191888537263638574319728013777E-01, \
      +0.98629280577279975365603891044060E-03, \
      +0.68488438190765667554854830182412E-05, \
      +0.25942025962194713019489279081403E-07, \
      +0.61766127740813750329445749697236E-10, \
      +0.10092454172466117901429556224601E-12, \
      +0.12014792511179938141288033225333E-15, \
      +0.10882945588716991878525295466666E-18, \
      +0.77513772196684887039238400000000E-22, \
      +0.44548112037175638391466666666666E-25, \
      +0.21092845231692343466666666666666E-28, \
      +0.83701735910741333333333333333333E-32 ] )

  aigcs = np.array ( [ \
      +0.18152365581161273011556209957864E-01, \
      +0.21572563166010755534030638819968E-01, \
      +0.25678356987483249659052428090133E-03, \
      +0.14265214119792403898829496921721E-05, \
      +0.45721149200180426070434097558191E-08, \
      +0.95251708435647098607392278840592E-11, \
      +0.13925634605771399051150420686190E-13, \
      +0.15070999142762379592306991138666E-16, \
      +0.12559148312567778822703205333333E-19, \
      +0.83063073770821340343829333333333E-23, \
      +0.44657538493718567445333333333333E-26, \
      +0.19900855034518869333333333333333E-29, \
      +0.74702885256533333333333333333333E-33 ] )

  aip1cs = np.array ( [ \
      -0.2146951858910538455460863467778E-01, \
      -0.7535382535043301166219720865565E-02, \
      +0.5971527949026380852035388881994E-03, \
      -0.7283251254207610648502368291548E-04, \
      +0.1110297130739299666517381821140E-04, \
      -0.1950386152284405710346930314033E-05, \
      +0.3786973885159515193885319670057E-06, \
      -0.7929675297350978279039072879154E-07, \
      +0.1762247638674256075568420122202E-07, \
      -0.4110767539667195045029896593893E-08, \
      +0.9984770057857892247183414107544E-09, \
      -0.2510093251387122211349867730034E-09, \
      +0.6500501929860695409272038601725E-10, \
      -0.1727818405393616515478877107366E-10, \
      +0.4699378842824512578362292872307E-11, \
      -0.1304675656297743914491241246272E-11, \
      +0.3689698478462678810473948382282E-12, \
      -0.1061087206646806173650359679035E-12, \
      +0.3098414384878187438660210070110E-13, \
      -0.9174908079824139307833423547851E-14, \
      +0.2752049140347210895693579062271E-14, \
      -0.8353750115922046558091393301880E-15, \
      +0.2563931129357934947568636168612E-15, \
      -0.7950633762598854983273747289822E-16, \
      +0.2489283634603069977437281175644E-16, \
      -0.7864326933928735569664626221296E-17, \
      +0.2505687311439975672324470645019E-17, \
      -0.8047420364163909524537958682241E-18, \
      +0.2604097118952053964443401104392E-18, \
      -0.8486954164056412259482488834184E-19, \
      +0.2784706882142337843359429186027E-19, \
      -0.9195858953498612913687224151354E-20, \
      +0.3055304318374238742247668225583E-20, \
      -0.1021035455479477875902177048439E-20, \
      +0.3431118190743757844000555680836E-21, \
      -0.1159129341797749513376922463109E-21, \
      +0.3935772844200255610836268229154E-22, \
      -0.1342880980296717611956718989038E-22, \
      +0.4603287883520002741659190305314E-23, \
      -0.1585043927004064227810772499387E-23, \
      +0.5481275667729675908925523755008E-24, \
      -0.1903349371855047259064017948945E-24, \
      +0.6635682302374008716777612115968E-25, \
      -0.2322311650026314307975200986453E-25, \
      +0.8157640113429179313142743695359E-26, \
      -0.2875824240632900490057489929557E-26, \
      +0.1017329450942901435079714319018E-26, \
      -0.3610879108742216446575703490559E-27, \
      +0.1285788540363993421256640342698E-27, \
      -0.4592901037378547425160693022719E-28, \
      +0.1645597033820713725812102485333E-28, \
      -0.5913421299843501842087920271360E-29, \
      +0.2131057006604993303479369509546E-29, \
      -0.7701158157787598216982761745066E-30, \
      +0.2790533307968930417581783777280E-30, \
      -0.1013807715111284006452241367039E-30, \
      +0.3692580158719624093658286216533E-31 ] )

  aip2cs = np.array ( [ \
      -0.174314496929375513390355844011E-02, \
      -0.167893854325541671632190613480E-02, \
      +0.359653403352166035885983858114E-04, \
      -0.138081860273922835457399383100E-05, \
      +0.741122807731505298848699095233E-07, \
      -0.500238203900133013130422866325E-08, \
      +0.400693917417184240675446866355E-09, \
      -0.367331242795905044199318496207E-10, \
      +0.376034439592373852439592002918E-11, \
      -0.422321332718747538026564938968E-12, \
      +0.513509454033657070919618754120E-13, \
      -0.669095850390477595651681356676E-14, \
      +0.926667545641290648239550724382E-15, \
      -0.135514382416070576333397356591E-15, \
      +0.208115496312830995299006549335E-16, \
      -0.334116499159176856871277570256E-17, \
      +0.558578584585924316868032946585E-18, \
      -0.969219040152365247518658209109E-19, \
      +0.174045700128893206465696557738E-19, \
      -0.322640979731130400247846333098E-20, \
      +0.616074471106625258533259618986E-21, \
      -0.120936347982490059076420676266E-21, \
      +0.243632763310138108261570095786E-22, \
      -0.502914221497457468943403144533E-23, \
      +0.106224175543635689495470626133E-23, \
      -0.229284284895989241509856324266E-24, \
      +0.505181733929503744986884778666E-25, \
      -0.113498123714412404979793920000E-25, \
      +0.259765565985606980698374144000E-26, \
      -0.605124621542939506172231679999E-27, \
      +0.143359777966772800720295253333E-27, \
      -0.345147757060899986280721066666E-28, \
      +0.843875190213646740427025066666E-29, \
      -0.209396142298188169434453333333E-29, \
      +0.527008873478945503182848000000E-30, \
      -0.134457433014553385789030399999E-30, \
      +0.347570964526601147340117333333E-31 ] )

  eta = 0.1 * r8_mach ( 3 )
  naif = r8_inits ( aifcs, 13, eta )
  naig = r8_inits ( aigcs, 13, eta )
  naip1 = r8_inits ( aip1cs, 57, eta )
  naip2 = r8_inits ( aip2cs, 37, eta )
  x3sml = eta ** 0.3333
  x32sml = 1.3104 * x3sml * x3sml
  xbig = r8_mach ( 2 ) ** 0.6666

  if ( x < - 1.0 ):
    xm, theta = r8_aimp ( x )
    value = xm * np.cos ( theta )
  elif ( 0.0 <= x and x <= x32sml ):
    z = 0.0
    value = 0.3750 + ( r8_csevl ( z, aifcs, naif ) \
      - x * ( 0.25 + r8_csevl ( z, aigcs, naig ) ) )
  elif ( abs ( x ) <= x3sml ):
    z = 0.0
    value = 0.3750 + ( r8_csevl ( z, aifcs, naif ) \
      - x * ( 0.25 + r8_csevl ( z, aigcs, naig ) ) )
    value = value * np.exp ( 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( x <= 1.0 ):
    z = x * x * x
    value = 0.3750 + ( r8_csevl ( z, aifcs, naif ) \
      - x * ( 0.25 + r8_csevl ( z, aigcs, naig ) ) )
    value = value * np.exp ( 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( x <= 4.0 ):
    sqrtx = np.sqrt ( x )
    z = ( 16.0 / ( x * sqrtx ) - 9.0 ) / 7.0
    value = ( 0.28125 + r8_csevl ( z, aip1cs, naip1 ) ) \
      / np.sqrt ( sqrtx )
  elif ( x < xbig ):
    sqrtx = np.sqrt ( x )
    z = 16.0 / ( x * sqrtx ) - 1.0
    value = ( 0.28125 + r8_csevl ( z, aip2cs, naip2 ) ) \
      / np.sqrt ( sqrtx )
  else:
    sqrtx = np.sqrt ( x )
    z = - 1.0
    value = ( 0.28125 + r8_csevl ( z, aip2cs, naip2 ) ) \
      / np.sqrt ( sqrtx )

  return value

def r8_aimp ( x ):

#*****************************************************************************80
#
## R8_AIMP evaluates the modulus and phase of the Airy function.
#
#  Description:
#
#    This function must only be called when X <= -1.0.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real AMPL, PHI, the modulus and phase of the
#    Airy function.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach
  from sys import exit

  am20cs = np.array ( [ \
      +0.108716749086561856615730588125E-01, \
      +0.369489228982663555091728665146E-03, \
      +0.440680100484689563667507001327E-05, \
      +0.143686762361911153929183952833E-06, \
      +0.824275552390078308670628855353E-08, \
      +0.684426758893661606173927278180E-09, \
      +0.739566697282739287731004740213E-10, \
      +0.974595633696825017638702600847E-11, \
      +0.150076885829405775650973119497E-11, \
      +0.262147910221527634206252854802E-12, \
      +0.508354111376487180357278966914E-13, \
      +0.107684753358811440492985997070E-13, \
      +0.246091286618433429335914062617E-14, \
      +0.600786380358656418436110373550E-15, \
      +0.155449156102388071150651388384E-15, \
      +0.423535125035576604426382780182E-16, \
      +0.120862166289299840154401109189E-16, \
      +0.359609651214658240861499706423E-17, \
      +0.111134218386395638261774604677E-17, \
      +0.355559532432366609893680289225E-18, \
      +0.117433021600139309998766947387E-18, \
      +0.399397454661077561389162200966E-19, \
      +0.139576671528916310425606325640E-19, \
      +0.500240055309236041393459280716E-20, \
      +0.183552760958132679184834866457E-20, \
      +0.688490998179202743197790112404E-21, \
      +0.263631035611417012359996885105E-21, \
      +0.102924890237338360287153563785E-21, \
      +0.409246966671594885489762960571E-22, \
      +0.165558573406734651039727903828E-22, \
      +0.680797467063033356116599685727E-23, \
      +0.284326559934079832419751134476E-23, \
      +0.120507398348965255097287818819E-23, \
      +0.517961243287505217976613610424E-24, \
      +0.225622613427562816303268640887E-24, \
      +0.995418801147745168832117078246E-25, \
      +0.444551696397342424308280582053E-25, \
      +0.200865195461501101425916097338E-25, \
      +0.917786344151775165973885645402E-26, \
      +0.423872958105589240661672197948E-26, \
      +0.197789272007846092370846251490E-26, \
      +0.932116351284620665680435253373E-27, \
      +0.443482133249918099955611379722E-27, \
      +0.212945672365573895594589552837E-27, \
      +0.103158569651075977552209344907E-27, \
      +0.504023773022591199157904590029E-28, \
      +0.248301304570155945304046541005E-28, \
      +0.123301783128562196054198238560E-28, \
      +0.617033449920521746121976730507E-29, \
      +0.311092617415918897233869792213E-29, \
      +0.157983085201706173015269071503E-29, \
      +0.807931987538283607678121339092E-30, \
      +0.415997394138667562722951360052E-30, \
      +0.215610934097716900471935862504E-30, \
      +0.112468857265869178296752823613E-30, \
      +0.590331560632838091123040811797E-31, \
      +0.311735667692928562046280505333E-31 ] )

  am21cs = np.array ( [ \
      +0.592790266721309588375717482814E-02, \
      +0.200569405393165186428695217690E-02, \
      +0.911081850262275893553072526291E-04, \
      +0.849894306372047155633172107475E-05, \
      +0.113297908976913076637929215494E-05, \
      +0.187517946100666496180950627804E-06, \
      +0.359306519018245832699035211192E-07, \
      +0.765757714071683864039093517470E-08, \
      +0.176999967168039173925953460744E-08, \
      +0.436259555654598932720546585535E-09, \
      +0.113291641337853230035520085219E-09, \
      +0.307257690982419244137868398126E-10, \
      +0.864482416482201075541200465766E-11, \
      +0.251015250060924402115104562212E-11, \
      +0.749102496764440371601802227751E-12, \
      +0.228996928487994073089565214432E-12, \
      +0.715113658927987694949327491175E-13, \
      +0.227607924959566841946395165061E-13, \
      +0.736942142760886513969953227782E-14, \
      +0.242328675267827490463991742006E-14, \
      +0.808153774548239869283406558403E-15, \
      +0.273008079804356086659174563386E-15, \
      +0.933236070891385318473519474326E-16, \
      +0.322508099681084622213867546973E-16, \
      +0.112581932346444541217757573416E-16, \
      +0.396699463986938821660259459530E-17, \
      +0.141006567944319504660865034527E-17, \
      +0.505302086537851213375537393032E-18, \
      +0.182461523215945141197999102789E-18, \
      +0.663584568262130466928029121642E-19, \
      +0.242963731631276179741747455826E-19, \
      +0.895238915123687802013669922963E-20, \
      +0.331845289350050791260229250755E-20, \
      +0.123706196188658315384437905922E-20, \
      +0.463636677012390840306767734243E-21, \
      +0.174653135947764475469758765989E-21, \
      +0.661116810234991176307910643111E-22, \
      +0.251409918994072486176125666459E-22, \
      +0.960274995571732568694034386998E-23, \
      +0.368324952289296395686436898078E-23, \
      +0.141843138269159136145535939553E-23, \
      +0.548342674276935830106345800990E-24, \
      +0.212761054623118806650372562616E-24, \
      +0.828443700849418591487734760953E-25, \
      +0.323670563926127001421028600927E-25, \
      +0.126868882963286057355055062493E-25, \
      +0.498843818992121626935068934362E-26, \
      +0.196734584467649390967119381790E-26, \
      +0.778135971020326957713212064836E-27, \
      +0.308633941498911152919192968451E-27, \
      +0.122744647045453119789338037234E-27, \
      +0.489431279134292205885241216204E-28, \
      +0.195646879802909821175925099724E-28, \
      +0.783988952922426171166311492266E-29, \
      +0.314896914002484223748298978099E-29, \
      +0.126769763137250681307067842559E-29, \
      +0.511470691906900141641632107724E-30, \
      +0.206801709795538770250900316706E-30, \
      +0.837891344768519001325996867583E-31, \
      +0.340168991971489802052339079577E-31 ] )

  am22cs = np.array ( [ \
      -0.156284448062534112753545828583E-01, \
      +0.778336445239681307018943100334E-02, \
      +0.867057770477189528406072812110E-03, \
      +0.156966273156113719469953482266E-03, \
      +0.356396257143286511324100666302E-04, \
      +0.924598335425043154495080090994E-05, \
      +0.262110161850422389523194982066E-05, \
      +0.791882216516012561489469982263E-06, \
      +0.251041527921011847803162690862E-06, \
      +0.826522320665407734472997712940E-07, \
      +0.280571166281305264396384290014E-07, \
      +0.976821090484680786674631273890E-08, \
      +0.347407923227710343287279035573E-08, \
      +0.125828132169836914219092738164E-08, \
      +0.462988260641895264497330784625E-09, \
      +0.172728258813604072468143128696E-09, \
      +0.652319200131154135148574124970E-10, \
      +0.249047168520982056019881087112E-10, \
      +0.960156820553765948078189890126E-11, \
      +0.373448002067726856974776596757E-11, \
      +0.146417565032053391722216189678E-11, \
      +0.578265471168512825475827881553E-12, \
      +0.229915407244706118560254184494E-12, \
      +0.919780711231997257150883662365E-13, \
      +0.370060068813090065807504045556E-13, \
      +0.149675761698672987823326345205E-13, \
      +0.608361194938461148720451399443E-14, \
      +0.248404087115121397635425326873E-14, \
      +0.101862476526769080727914465339E-14, \
      +0.419383856352753989429640310957E-15, \
      +0.173318901762930756149702493501E-15, \
      +0.718821902388508517820445406811E-16, \
      +0.299123633598403607712470896113E-16, \
      +0.124868990433238627855713110880E-16, \
      +0.522829344609483661928651193632E-17, \
      +0.219532961724713396595998454359E-17, \
      +0.924298325229777281154410024332E-18, \
      +0.390157708236091407825543197309E-18, \
      +0.165093892693863707213759030367E-18, \
      +0.700221815715994367565716554487E-19, \
      +0.297651833616786915573214963506E-19, \
      +0.126796539086902072571134261229E-19, \
      +0.541243400697077628687581725061E-20, \
      +0.231487350218155252296382133283E-20, \
      +0.991920288386566563462623851167E-21, \
      +0.425803015323732357158897608174E-21, \
      +0.183101842973024501678402003088E-21, \
      +0.788678712311075375564526811022E-22, \
      +0.340254607386229874956582997235E-22, \
      +0.147020881405712530791860892535E-22, \
      +0.636211018324916957733348071767E-23, \
      +0.275707050680980721919395987768E-23, \
      +0.119645858090104071356261780457E-23, \
      +0.519912545729242147981768210567E-24, \
      +0.226217674847104475260575286850E-24, \
      +0.985526113754431819448565068283E-25, \
      +0.429870630332508717223681286187E-25, \
      +0.187723641661580639829657670189E-25, \
      +0.820721941772842137268801052115E-26, \
      +0.359214665604615507812767944463E-26, \
      +0.157390594612773315611458940587E-26, \
      +0.690329781039333834965319153586E-27, \
      +0.303092079078968534607859331415E-27, \
      +0.133204934160481219185689121944E-27, \
      +0.585978836851523490117937981442E-28, \
      +0.258016868489487806338425080457E-28, \
      +0.113712433637283667223632182863E-28, \
      +0.501592557226068509236430548549E-29, \
      +0.221445829395509373322569708484E-29, \
      +0.978470283886507289984691416411E-30, \
      +0.432695414934180170112000952983E-30, \
      +0.191497288193994570612929860440E-30, \
      +0.848164622402392354171298331562E-31, \
      +0.375947065173955919947455052934E-31 ] )

  ath0cs = np.array ( [ \
      -0.8172601764161634499840208700543E-01, \
      -0.8004012824788273287596481113068E-03, \
      -0.3186525268782113203795553628242E-05, \
      -0.6688388266477509330741698865033E-07, \
      -0.2931759284994564516506822463184E-08, \
      -0.2011263760883621669049030307186E-09, \
      -0.1877522678055973426074008166652E-10, \
      -0.2199637137704601251899002199848E-11, \
      -0.3071616682592272449025746605586E-12, \
      -0.4936140553673418361025600985389E-13, \
      -0.8902833722583660416935236969866E-14, \
      -0.1768987764615272613656814199467E-14, \
      -0.3817868689032277014678199609600E-15, \
      -0.8851159014819947594156286509984E-16, \
      -0.2184818181414365953149677679568E-16, \
      -0.5700849046986452380599442295119E-17, \
      -0.1563121122177875392516031795495E-17, \
      -0.4481437996768995067906688776353E-18, \
      -0.1337794883736188022044566044098E-18, \
      -0.4143340036874114453776852445442E-19, \
      -0.1327263385718805025080481164652E-19, \
      -0.4385728589128440522215756835955E-20, \
      -0.1491360695952818067686201743956E-20, \
      -0.5208104738630711377154238188773E-21, \
      -0.1864382222390498923872526604979E-21, \
      -0.6830263751167969012975435381881E-22, \
      -0.2557117058029329629296207591347E-22, \
      -0.9770158640254300218246907254046E-23, \
      -0.3805161433416679084068428254886E-23, \
      -0.1509022750737054063493926482995E-23, \
      -0.6087551341242424929005568014525E-24, \
      -0.2495879513809711495425982124058E-24, \
      -0.1039157654581920948909588084274E-24, \
      -0.4390235913976846536974594969051E-25, \
      -0.1880790678447990211675826820582E-25, \
      -0.8165070764199462948863022205753E-26, \
      -0.3589944503749750514266435585041E-26, \
      -0.1597658126632132872981291608708E-26, \
      -0.7193250175703823969113802835305E-27, \
      -0.3274943012727856506209351132721E-27, \
      -0.1507042445783690665816975047272E-27, \
      -0.7006624198319904717843967949140E-28, \
      -0.3289907402983718226528815678356E-28, \
      -0.1559518084365146526445322711496E-28, \
      -0.7460690508208254582833851119721E-29, \
      -0.3600877034824662020563277249431E-29, \
      -0.1752851437473772257350402219197E-29, \
      -0.8603275775188512909623778628724E-30, \
      -0.4256432603226946534668039480105E-30, \
      -0.2122161865044262927723650698206E-30, \
      -0.1065996156704879052472060798561E-30, \
      -0.5393568608816949116410688086892E-31, \
      -0.2748174851043954822278496517870E-31 ] )

  ath1cs = np.array ( [ \
      -0.6972849916208883845888148415037E-01, \
      -0.5108722790650044987073448077961E-02, \
      -0.8644335996989755094525334749512E-04, \
      -0.5604720044235263542188698916125E-05, \
      -0.6045735125623897409156376640077E-06, \
      -0.8639802632488334393219721138499E-07, \
      -0.1480809484309927157147782480780E-07, \
      -0.2885809334577236039999449908712E-08, \
      -0.6191631975665699609309191231800E-09, \
      -0.1431992808860957830931365259879E-09, \
      -0.3518141102137214721504616874321E-10, \
      -0.9084761919955078290070339808051E-11, \
      -0.2446171672688598449343283664767E-11, \
      -0.6826083203213446240828996710264E-12, \
      -0.1964579931194940171278546257802E-12, \
      -0.5808933227139693164009191265856E-13, \
      -0.1759042249527441992795400959024E-13, \
      -0.5440902932714896613632538945319E-14, \
      -0.1715247407486806802622358519451E-14, \
      -0.5500929233576991546871101847161E-15, \
      -0.1791878287739317259495152638754E-15, \
      -0.5920372520086694197778411062231E-16, \
      -0.1981713027876483962470972206590E-16, \
      -0.6713232347016352262049984343790E-17, \
      -0.2299450243658281116122358619832E-17, \
      -0.7957300928236376595304637145634E-18, \
      -0.2779994027291784157172290233739E-18, \
      -0.9798924361326985224406795480814E-19, \
      -0.3482717006061574386702645565849E-19, \
      -0.1247489122558599057173300058084E-19, \
      -0.4501210041478228113487751824452E-20, \
      -0.1635346244013352135596114164667E-20, \
      -0.5980102897780336268098762265941E-21, \
      -0.2200246286286123454028196295475E-21, \
      -0.8142463073515085897408205291519E-22, \
      -0.3029924773660042537432330709674E-22, \
      -0.1133390098574623537722943969689E-22, \
      -0.4260766024749295719283049889791E-23, \
      -0.1609363396278189718797500634453E-23, \
      -0.6106377190825026293045330444287E-24, \
      -0.2326954318021694061836577887573E-24, \
      -0.8903987877472252604474129558186E-25, \
      -0.3420558530005675024117914752341E-25, \
      -0.1319026715257272659017212100607E-25, \
      -0.5104899493612043091316191177386E-26, \
      -0.1982599478474547451242444663466E-26, \
      -0.7725702356880830535636111851519E-27, \
      -0.3020234733664680100815776863573E-27, \
      -0.1184379739074169993712946380800E-27, \
      -0.4658430227922308520573252840106E-28, \
      -0.1837554188100384647157502006613E-28, \
      -0.7268566894427990953321876684800E-29, \
      -0.2882863120391468135527089875626E-29, \
      -0.1146374629459906350417591664639E-29, \
      -0.4570031437748533058179991688533E-30, \
      -0.1826276602045346104809934028799E-30, \
      -0.7315349993385250469111066350933E-31, \
      -0.2936925599971429781637815773866E-31 ] )

  ath2cs = np.array ( [ \
      +0.4405273458718778997061127057775E-02, \
      -0.3042919452318454608483844239873E-01, \
      -0.1385653283771793791602692842653E-02, \
      -0.1804443908954952302670486910952E-03, \
      -0.3380847108327308671057465323618E-04, \
      -0.7678183535229023055257676817765E-05, \
      -0.1967839443716035324690935417077E-05, \
      -0.5483727115877700361586143659281E-06, \
      -0.1625461550532612452712696212258E-06, \
      -0.5053049981268895015277637842078E-07, \
      -0.1631580701124066881183851715617E-07, \
      -0.5434204112348517507963436694817E-08, \
      -0.1857398556409900325763850109630E-08, \
      -0.6489512033326108816213513640676E-09, \
      -0.2310594885800944720482995987079E-09, \
      -0.8363282183204411682819329546745E-10, \
      -0.3071196844890191462660661303891E-10, \
      -0.1142367142432716819409514579892E-10, \
      -0.4298116066345803065822470108971E-11, \
      -0.1633898699596715440601646086632E-11, \
      -0.6269328620016619432123443754076E-12, \
      -0.2426052694816257357356159203991E-12, \
      -0.9461198321624039090742527765052E-13, \
      -0.3716060313411504806847798281269E-13, \
      -0.1469155684097526763170138810309E-13, \
      -0.5843694726140911944556401363094E-14, \
      -0.2337502595591951298832675034934E-14, \
      -0.9399231371171435401160167358411E-15, \
      -0.3798014669372894500076335263715E-15, \
      -0.1541731043984972524883443681775E-15, \
      -0.6285287079535307162925662365202E-16, \
      -0.2572731812811455424755383992774E-16, \
      -0.1057098119354017809340974866555E-16, \
      -0.4359080267402696966695992699964E-17, \
      -0.1803634315959978013953176945540E-17, \
      -0.7486838064380536821719431676914E-18, \
      -0.3117261367347604656799597209985E-18, \
      -0.1301687980927700734792871620696E-18, \
      -0.5450527587519522468973883909909E-19, \
      -0.2288293490114231872268635931903E-19, \
      -0.9631059503829538655655060440088E-20, \
      -0.4063281001524614089092195416434E-20, \
      -0.1718203980908026763900413858510E-20, \
      -0.7281574619892536367415322473328E-21, \
      -0.3092352652680643127960680345790E-21, \
      -0.1315917855965440490383417023254E-21, \
      -0.5610606786087055512664907412668E-22, \
      -0.2396621894086355206020304337895E-22, \
      -0.1025574332390581200832954423924E-22, \
      -0.4396264138143656476403607323663E-23, \
      -0.1887652998372577373342508719450E-23, \
      -0.8118140359576807603579433230445E-24, \
      -0.3496734274366286856375952089214E-24, \
      -0.1508402925156873215171751475867E-24, \
      -0.6516268284778671059787773834341E-25, \
      -0.2818945797529207424505942114583E-25, \
      -0.1221127596512262744598094464505E-25, \
      -0.5296674341169867168620011705073E-26, \
      -0.2300359270773673431358870971744E-26, \
      -0.1000279482355367494781220348930E-26, \
      -0.4354760404180879394806893162179E-27, \
      -0.1898056134741477522515482827030E-27, \
      -0.8282111868712974697554009309315E-28, \
      -0.3617815493066569006586213484374E-28, \
      -0.1582018896178003654858941843636E-28, \
      -0.6925068597802270011772820383247E-29, \
      -0.3034390239778629128908629727335E-29, \
      -0.1330889568166725224761977446509E-29, \
      -0.5842848522173090120487606971706E-30, \
      -0.2567488423238302631121274357678E-30, \
      -0.1129232322268882185791505819151E-30, \
      -0.4970947029753336916550570105023E-31 ] )

  eta = 0.1 * r8_mach ( 3 )
  nam20 = r8_inits ( am20cs, 57, eta )
  nath0 = r8_inits ( ath0cs, 53, eta )
  nam21 = r8_inits ( am21cs, 60, eta )
  nath1 = r8_inits ( ath1cs, 58, eta )
  nam22 = r8_inits ( am22cs, 74, eta )
  nath2 = r8_inits ( ath2cs, 72, eta )
  xsml = - ( 128.0 / r8_mach ( 3 ) ) ** 0.3333

  if ( x <= xsml ):
    z = 1.0
    ampl = 0.3125 + r8_csevl ( z, am20cs, nam20 )
    theta = - 0.625 + r8_csevl ( z, ath0cs, nath0 )
  elif ( x < - 4.0 ):
    z = 128.0 / x / x / x + 1.0
    ampl = 0.3125 + r8_csevl ( z, am20cs, nam20 )
    theta = - 0.625 + r8_csevl ( z, ath0cs, nath0 )
  elif ( x < - 2.0 ):
    z = ( 128.0 / x / x / x + 9.0 ) / 7.0
    ampl = 0.3125 + r8_csevl ( z, am21cs, nam21 )
    theta = - 0.625 + r8_csevl ( z, ath1cs, nath1 )
  elif ( x <= - 1.0 ):
    z = ( 16.0 / x / x / x + 9.0 ) / 7.0
    ampl = 0.3125 + r8_csevl ( z, am22cs, nam22 )
    theta = - 0.625 + r8_csevl ( z, ath2cs, nath2 )
  else:
    print ( '' )
    print ( 'R8_AIMP - Fatal error!' )
    print ( '  -1.0 < X.' )
    exit ( 'R8_AIMP - Fatal error!' )

  sqrtx = np.sqrt ( - x )
  ampl = np.sqrt ( ampl / sqrtx )
  theta = 0.25 * np.pi - x * sqrtx * theta

  return ampl, theta

def r8_bi ( x ):

#*****************************************************************************80
#
## R8_BI evaluates the Airy function Bi of an R8 argument.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real VALUE, the Airy function Bi of X.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach

  bifcs = np.array ( [ \
    -0.16730216471986649483537423928176E-01, \
    +0.10252335834249445611426362777757, \
    +0.17083092507381516539429650242013E-02, \
    +0.11862545467744681179216459210040E-04, \
    +0.44932907017792133694531887927242E-07, \
    +0.10698207143387889067567767663628E-09, \
    +0.17480643399771824706010517628573E-12, \
    +0.20810231071761711025881891834399E-15, \
    +0.18849814695665416509927971733333E-18, \
    +0.13425779173097804625882666666666E-21, \
    +0.77159593429658887893333333333333E-25, \
    +0.36533879617478566399999999999999E-28, \
    +0.14497565927953066666666666666666E-31 ] )

  bif2cs = np.array ( [ \
    +0.0998457269381604104468284257993, \
    +0.47862497786300553772211467318231, \
    +0.25155211960433011771324415436675E-01, \
    +0.58206938852326456396515697872216E-03, \
    +0.74997659644377865943861457378217E-05, \
    +0.61346028703493836681403010356474E-07, \
    +0.34627538851480632900434268733359E-09, \
    +0.14288910080270254287770846748931E-11, \
    +0.44962704298334641895056472179200E-14, \
    +0.11142323065833011708428300106666E-16, \
    +0.22304791066175002081517866666666E-19, \
    +0.36815778736393142842922666666666E-22, \
    +0.50960868449338261333333333333333E-25, \
    +0.60003386926288554666666666666666E-28, \
    +0.60827497446570666666666666666666E-31 ] )

  bigcs = np.array ( [ \
    +0.22466223248574522283468220139024E-01, \
    +0.37364775453019545441727561666752E-01, \
    +0.44476218957212285696215294326639E-03, \
    +0.24708075636329384245494591948882E-05, \
    +0.79191353395149635134862426285596E-08, \
    +0.16498079851827779880887872402706E-10, \
    +0.24119906664835455909247501122841E-13, \
    +0.26103736236091436985184781269333E-16, \
    +0.21753082977160323853123792000000E-19, \
    +0.14386946400390433219483733333333E-22, \
    +0.77349125612083468629333333333333E-26, \
    +0.34469292033849002666666666666666E-29, \
    +0.12938919273216000000000000000000E-32 ] )

  big2cs = np.array ( [ \
    +0.033305662145514340465176188111647, \
    +0.161309215123197067613287532084943, \
    +0.631900730961342869121615634921173E-02, \
    +0.118790456816251736389780192304567E-03, \
    +0.130453458862002656147116485012843E-05, \
    +0.937412599553521729546809615508936E-08, \
    +0.474580188674725153788510169834595E-10, \
    +0.178310726509481399800065667560946E-12, \
    +0.516759192784958180374276356640000E-15, \
    +0.119004508386827125129496251733333E-17, \
    +0.222982880666403517277063466666666E-20, \
    +0.346551923027689419722666666666666E-23, \
    +0.453926336320504514133333333333333E-26, \
    +0.507884996513522346666666666666666E-29, \
    +0.491020674696533333333333333333333E-32 ] )

  eta = 0.1 * r8_mach ( 3 )
  nbif = r8_inits ( bifcs, 13, eta )
  nbig = r8_inits ( bigcs, 13, eta )
  nbif2 = r8_inits ( bif2cs, 15, eta )
  nbig2 = r8_inits ( big2cs, 15, eta )
  x3sml = eta ** 0.3333
  xmax = ( 1.5 * np.log ( r8_mach ( 2 ) ) ) ** 0.6666

  if ( x < - 1.0 ):
    xm, theta = r8_aimp ( x )
    value = xm * np.sin ( theta )
  elif ( abs ( x ) <= x3sml ):
    z = 0.0
    value = 0.625 + r8_csevl ( z, bifcs, nbif ) \
      + x * ( 0.4375 + r8_csevl ( z, bigcs, nbig ) )
  elif ( x <= 1.0 ):
    z = x * x * x
    value = 0.625 + r8_csevl ( z, bifcs, nbif ) \
      + x * ( 0.4375 + r8_csevl ( z, bigcs, nbig ) )
  elif ( x <= 2.0 ):
    z = ( 2.0 * x * x * x - 9.0 ) / 7.0
    value = 1.125 + r8_csevl ( z, bif2cs, nbif2 ) \
      + x * ( 0.625 + r8_csevl ( z, big2cs, nbig2 ) )
  else:
    value = r8_bie ( x ) * np.exp ( 2.0 * x * np.sqrt ( x ) / 3.0 )

  return value

def r8_bi_test ( ):

#*****************************************************************************80
#
## R8_BI_TEST tests R8_BI.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    John Burkardt
#
  import platform
  from airy_bi_values import airy_bi_values

  print ( '' )
  print ( 'R8_BI_TEST:' )
  print ( '  Python version: %s' % ( platform.python_version ( ) ) )
  print ( '  R8_BI evaluates the Airy Bi(X) function' )
  print ( '' )
  print ( '             X      AIRY_BI(X)  R8_BI(X)        Diff' )
  print ( '' )

  n_data = 0

  while ( True ):

    n_data, x, fx1 = airy_bi_values ( n_data )

    if ( n_data == 0 ):
      break

    fx2 = r8_bi ( x )

    print ( '  %14.4g  %14.6g  %14.6g  %14.6g' % ( x, fx1, fx2, abs ( fx1 - fx2 ) ) )
#
#  Terminate.
#
  print ( '' )
  print ( 'R8_BI_TEST:' )
  print ( '  Normal end of execution.' )
  return

def r8_bid ( x ):

#*****************************************************************************80
#
## R8_BID evaluates the derivative of the Airy function Bi of an R8 argument.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real VALUE, the derivative of the Airy function Bi of X.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach

  bif2cs = np.array ( [ \
       0.32349398760352203352119193596266015, \
       0.08629787153556355913888835323811100, \
       0.00299402555265539742613821050727155, \
       0.00005143052836466163720464316950821, \
       0.00000052584025003681146026033098613, \
       0.00000000356175137395770028102730600, \
       0.00000000001714686400714584830518308, \
       0.00000000000006166351969232555406693, \
       0.00000000000000017191082154315985806, \
       0.00000000000000000038236889518803943, \
       0.00000000000000000000069424173624884, \
       0.00000000000000000000000104833932510, \
       0.00000000000000000000000000133721972, \
       0.00000000000000000000000000000145986, \
       0.00000000000000000000000000000000138 ] )

  bifcs = np.array ( [ \
       0.115353679082857024267474446284908879, \
       0.020500789404919287530357789445940252, \
       0.000213529027890287581892679619451158, \
       0.000001078396061467683042209155523569, \
       0.000000003209470883320666783353670420, \
       0.000000000006293040671833540390213316, \
       0.000000000000008740304300063083340121, \
       0.000000000000000009047915683496049529, \
       0.000000000000000000007249923164709251, \
       0.000000000000000000000004629576649604, \
       0.000000000000000000000000002411236436, \
       0.000000000000000000000000000001043825, \
       0.000000000000000000000000000000000382 ] )

  big2cs = np.array ( [ \
       1.606299946362129457759284537862622883, \
       0.744908881987608865201476685194753972, \
       0.047013873861027737964095177635353019, \
       0.001228442206254823907016188785848091, \
       0.000017322241225662362670987355613727, \
       0.000000152190165236801893711508366563, \
       0.000000000911356024911957704145528786, \
       0.000000000003954791842356644201722554, \
       0.000000000000013001737033862320007309, \
       0.000000000000000033493506858269079763, \
       0.000000000000000000069419094403694057, \
       0.000000000000000000000118248256604581, \
       0.000000000000000000000000168462493472, \
       0.000000000000000000000000000203684674, \
       0.000000000000000000000000000000211619, \
       0.000000000000000000000000000000000191 ] )

  bigcs = np.array ( [ \
      -0.0971964404164435373897790974606802, \
       0.1495035768431670665710843445326264, \
       0.0031135253871213260419419176839631, \
       0.0000247085705798212967777021920569, \
       0.0000001029496277313786081987324295, \
       0.0000000002639703739869432892676778, \
       0.0000000000004582792707803206608181, \
       0.0000000000000005742829740893447321, \
       0.0000000000000000005438275385238549, \
       0.0000000000000000000004028347267083, \
       0.0000000000000000000000002397823826, \
       0.0000000000000000000000000001171956, \
       0.0000000000000000000000000000000479 ] )

  eta = 0.1 * r8_mach ( 3 )
  nbif = r8_inits ( bifcs, 13, eta )
  nbig = r8_inits ( bigcs, 13, eta )
  nbif2 = r8_inits ( bif2cs, 15, eta )
  nbig2 = r8_inits ( big2cs, 16, eta )
  x2sml = np.sqrt ( eta )
  x3sml = eta ** 0.3333
  xmax = ( 1.5 * np.log ( r8_mach ( 2 ) ) ) ** 0.6666

  if ( x < - 1.0 ):
    xn, phi = r8_admp ( x )
    value = xn * np.sin ( phi )
  elif ( abs ( x ) <= x2sml ):
    x2 = 0.0
    x3 = 0.0
    value = x2 * ( r8_csevl ( x3, bifcs, nbif ) + 0.25 ) \
      + r8_csevl ( x3, bigcs, nbig ) + 0.5
  elif ( abs ( x ) <= x3sml ):
    x2 = x * x
    x3 = 0.0
    value = x2 * ( r8_csevl ( x3, bifcs, nbif ) + 0.25 ) \
      + r8_csevl ( x3, bigcs, nbig ) + 0.5
  elif ( x <= 1.0 ):
    x2 = x * x
    x3 = x * x * x
    value = x2 * ( r8_csevl ( x3, bifcs, nbif ) + 0.25 ) \
      + r8_csevl ( x3, bigcs, nbig ) + 0.5
  elif ( x <= 2.0 ):
    z = ( 2.0 * x * x * x - 9.0 ) / 7.0
    value = x * x * ( r8_csevl ( z, bif2cs, nbif2 ) + 0.25 ) \
      + r8_csevl ( z, big2cs, nbig2 ) + 0.5
  else:
    value = r8_bide ( x ) * np.exp ( 2.0 * x * np.sqrt ( x ) / 3.0 )

  return value

def r8_bid_test ( ):

#*****************************************************************************80
#
## R8_BID_TEST tests R8_BID.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    John Burkardt
#
  import platform
  from airy_bi_prime_values import airy_bi_prime_values

  print ( '' )
  print ( 'R8_BID_TEST:' )
  print ( '  Python version: %s' % ( platform.python_version ( ) ) )
  print ( '  R8_BID evaluates the derivative of the Airy function Bi(X)' )
  print ( '' )
  print ( '             X     AIRY_BID(X)  R8_BID(X)        Diff' )
  print ( '' )

  n_data = 0

  while ( True ):

    n_data, x, fx1 = airy_bi_prime_values ( n_data )

    if ( n_data == 0 ):
      break

    fx2 = r8_bid ( x )

    print ( '  %14.4f  %14.6g  %14.6g  %14.6g' % ( x, fx1, fx2, abs ( fx1 - fx2 ) ) )
#
#  Terminate.
#
  print ( '' )
  print ( 'R8_BID_TEST:' )
  print ( '  Normal end of execution.' )
  return

def r8_bide ( x ):

#*****************************************************************************80
#
## R8_BIDE: exponentially scaled derivative, Airy function Bi of an R8 argument.
#
#  Discussion:
#
#    if X < 0,
#      R8_BIDE ( X ) = R8_BID ( X )
#    else
#      R8_BIDE ( X ) = R8_BID ( X ) * np.exp ( - 2/3 * X^(3/2) )
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real VALUE, the exponentially scaled derivative of
#    the Airy function Bi of X.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach

  atr = 8.75069057084843450880771988210148
  btr = -2.09383632135605431360096498526268

  bif2cs = np.array ( [ \
       0.32349398760352203352119193596266015, \
       0.08629787153556355913888835323811100, \
       0.00299402555265539742613821050727155, \
       0.00005143052836466163720464316950821, \
       0.00000052584025003681146026033098613, \
       0.00000000356175137395770028102730600, \
       0.00000000001714686400714584830518308, \
       0.00000000000006166351969232555406693, \
       0.00000000000000017191082154315985806, \
       0.00000000000000000038236889518803943, \
       0.00000000000000000000069424173624884, \
       0.00000000000000000000000104833932510, \
       0.00000000000000000000000000133721972, \
       0.00000000000000000000000000000145986, \
       0.00000000000000000000000000000000138 ] )

  bifcs = np.array ( [ \
       0.115353679082857024267474446284908879, \
       0.020500789404919287530357789445940252, \
       0.000213529027890287581892679619451158, \
       0.000001078396061467683042209155523569, \
       0.000000003209470883320666783353670420, \
       0.000000000006293040671833540390213316, \
       0.000000000000008740304300063083340121, \
       0.000000000000000009047915683496049529, \
       0.000000000000000000007249923164709251, \
       0.000000000000000000000004629576649604, \
       0.000000000000000000000000002411236436, \
       0.000000000000000000000000000001043825, \
       0.000000000000000000000000000000000382 ] )

  big2cs = np.array ( [ \
       1.606299946362129457759284537862622883, \
       0.744908881987608865201476685194753972, \
       0.047013873861027737964095177635353019, \
       0.001228442206254823907016188785848091, \
       0.000017322241225662362670987355613727, \
       0.000000152190165236801893711508366563, \
       0.000000000911356024911957704145528786, \
       0.000000000003954791842356644201722554, \
       0.000000000000013001737033862320007309, \
       0.000000000000000033493506858269079763, \
       0.000000000000000000069419094403694057, \
       0.000000000000000000000118248256604581, \
       0.000000000000000000000000168462493472, \
       0.000000000000000000000000000203684674, \
       0.000000000000000000000000000000211619, \
       0.000000000000000000000000000000000191 ] )

  bigcs = np.array ( [ \
      -0.0971964404164435373897790974606802, \
       0.1495035768431670665710843445326264, \
       0.0031135253871213260419419176839631, \
       0.0000247085705798212967777021920569, \
       0.0000001029496277313786081987324295, \
       0.0000000002639703739869432892676778, \
       0.0000000000004582792707803206608181, \
       0.0000000000000005742829740893447321, \
       0.0000000000000000005438275385238549, \
       0.0000000000000000000004028347267083, \
       0.0000000000000000000000002397823826, \
       0.0000000000000000000000000001171956, \
       0.0000000000000000000000000000000479 ] )

  bip1cs = np.array ( [ \
      -0.17291873510795537186124679823741003, \
      -0.01493584929846943639486231021818675, \
      -0.00054711049516785663990658697874460, \
       0.00015379662929584083449573727856666, \
       0.00001543534761921794131028948022869, \
      -0.00000654341138519060129226087106765, \
       0.00000037280824078787032232152275240, \
       0.00000020720783881887480080810710514, \
      -0.00000006581733364696191689495883922, \
       0.00000000749267463539288212986048985, \
       0.00000000111013368840707147698890101, \
      -0.00000000072651405529159512323880794, \
       0.00000000017827235598470153962165668, \
      -0.00000000002173463524809506269656807, \
      -0.00000000000203020349653882594017049, \
       0.00000000000193118272294077519319859, \
      -0.00000000000060449525048290296023117, \
       0.00000000000012094496248933664277802, \
      -0.00000000000001251088360074479784619, \
      -0.00000000000000199173832424881344036, \
       0.00000000000000151540816342864303038, \
      -0.00000000000000049768927059816240250, \
       0.00000000000000011545959731810501403, \
      -0.00000000000000001863286862907983871, \
       0.00000000000000000099330392344759104, \
       0.00000000000000000068182083667412417, \
      -0.00000000000000000034854456479650551, \
       0.00000000000000000010860382134235961, \
      -0.00000000000000000002599290185240166, \
       0.00000000000000000000476895370459000, \
      -0.00000000000000000000051946940777177, \
      -0.00000000000000000000005925575044912, \
       0.00000000000000000000005746008970972, \
      -0.00000000000000000000002186119806494, \
       0.00000000000000000000000624124294738, \
      -0.00000000000000000000000146003421785, \
       0.00000000000000000000000027493893904, \
      -0.00000000000000000000000003474678018, \
      -0.00000000000000000000000000109303694, \
       0.00000000000000000000000000261972744, \
      -0.00000000000000000000000000112365018, \
       0.00000000000000000000000000035152059, \
      -0.00000000000000000000000000009167601, \
       0.00000000000000000000000000002040203, \
      -0.00000000000000000000000000000373038, \
       0.00000000000000000000000000000046070, \
       0.00000000000000000000000000000001748 ] )

  bip2cs = np.array ( [ \
      -0.13269705443526630494937031210217135, \
      -0.00568443626045977481306046339037428, \
      -0.00015643601119611609623698471216660, \
      -0.00001136737203679562267336053207940, \
      -0.00000143464350991283669643136951338, \
      -0.00000018098531185164131868746481700, \
       0.00000000926177343610865546229511422, \
       0.00000001710005490720592181887296162, \
       0.00000000476698163503781708252686849, \
      -0.00000000035195022023163141945397159, \
      -0.00000000058890614315886871574147635, \
      -0.00000000006678499607795537597612089, \
       0.00000000006395565101720391190697713, \
       0.00000000001554529427064394106403245, \
      -0.00000000000792396999744612971684001, \
      -0.00000000000258326242689717798947525, \
       0.00000000000121655047787849117978773, \
       0.00000000000038707207172899985942258, \
      -0.00000000000022487045479618229130656, \
      -0.00000000000004953476515684046293493, \
       0.00000000000004563781601526912756017, \
       0.00000000000000332998314345014118494, \
      -0.00000000000000921750185832874202719, \
       0.00000000000000094156670658958205765, \
       0.00000000000000167153952640716157721, \
      -0.00000000000000055134268782182410852, \
      -0.00000000000000022368651572006617795, \
       0.00000000000000017486948976520089209, \
       0.00000000000000000206518666352329750, \
      -0.00000000000000003973060018130712479, \
       0.00000000000000001154836935724892335, \
       0.00000000000000000553906053678276421, \
      -0.00000000000000000457174427396478267, \
       0.00000000000000000026567111858284432, \
       0.00000000000000000101599148154167823, \
      -0.00000000000000000044821231272196246, \
      -0.00000000000000000007959149661617295, \
       0.00000000000000000014583615616165794, \
      -0.00000000000000000004015127893061405, \
      -0.00000000000000000002079152963743616, \
       0.00000000000000000001972630449634388, \
      -0.00000000000000000000336033404001683, \
      -0.00000000000000000000376504832685507, \
       0.00000000000000000000269935508825595, \
      -0.00000000000000000000026985946069808, \
      -0.00000000000000000000061794011788222, \
       0.00000000000000000000038782693311711, \
      -0.00000000000000000000002420094005071, \
      -0.00000000000000000000009844051058925, \
       0.00000000000000000000005954353358494, \
      -0.00000000000000000000000361274446366, \
      -0.00000000000000000000001552634578088, \
       0.00000000000000000000000977819380304, \
      -0.00000000000000000000000092239447509, \
      -0.00000000000000000000000241545903934, \
       0.00000000000000000000000169558652255, \
      -0.00000000000000000000000026762408641, \
      -0.00000000000000000000000036188116265, \
       0.00000000000000000000000030372404951, \
      -0.00000000000000000000000007422876903, \
      -0.00000000000000000000000004930678544, \
       0.00000000000000000000000005468790028, \
      -0.00000000000000000000000001920315188, \
      -0.00000000000000000000000000516335154, \
       0.00000000000000000000000000957723167, \
      -0.00000000000000000000000000463659079, \
      -0.00000000000000000000000000004509226, \
       0.00000000000000000000000000155617519, \
      -0.00000000000000000000000000104156509, \
       0.00000000000000000000000000019565323, \
       0.00000000000000000000000000021335380, \
      -0.00000000000000000000000000021461958, \
       0.00000000000000000000000000007875791, \
       0.00000000000000000000000000001713768, \
      -0.00000000000000000000000000003917137, \
       0.00000000000000000000000000002233559, \
      -0.00000000000000000000000000000269383, \
      -0.00000000000000000000000000000577764, \
       0.00000000000000000000000000000519650, \
      -0.00000000000000000000000000000183361, \
      -0.00000000000000000000000000000045763, \
       0.00000000000000000000000000000099235, \
      -0.00000000000000000000000000000058938, \
       0.00000000000000000000000000000009568, \
       0.00000000000000000000000000000013758, \
      -0.00000000000000000000000000000014066, \
       0.00000000000000000000000000000005964, \
       0.00000000000000000000000000000000437 ] )

  eta = 0.1 * r8_mach ( 3 )
  nbif = r8_inits ( bifcs, 13, eta )
  nbig = r8_inits ( bigcs, 13, eta )
  nbif2 = r8_inits ( bif2cs, 15, eta )
  nbig2 = r8_inits ( big2cs, 16, eta )
  nbip1 = r8_inits ( bip1cs, 47, eta )
  nbip2 = r8_inits ( bip2cs, 88, eta )
  x2sml = np.sqrt ( eta )
  x3sml = eta ** 0.3333
  x32sml = 1.3104 * x3sml * x3sml
  xbig = r8_mach ( 2 ) ** 0.6666

  if ( x < -1.0 ):
    xn, phi = r8_admp ( x )
    value = xn * np.sin ( phi )
  elif ( abs ( x ) <= x2sml ):
    x2 = 0.0
    x3 = 0.0
    value = x2 * ( r8_csevl ( x3, bifcs, nbif ) \
      + 0.25 ) + r8_csevl ( x3, bigcs, nbig ) + 0.5
    if ( x32sml < x ):
      value = value * np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( abs ( x ) <= x3sml ):
    x2 = x * x
    x3 = 0.0
    value = x2 * ( r8_csevl ( x3, bifcs, nbif ) \
      + 0.25 ) + r8_csevl ( x3, bigcs, nbig ) + 0.5
    if ( x32sml < x ):
      value = value * np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( x <= 1.0 ):
    x2 = x * x
    x3 = x * x * x
    value = x2 * ( r8_csevl ( x3, bifcs, nbif ) \
      + 0.25 ) + r8_csevl ( x3, bigcs, nbig ) + 0.5
    if ( x32sml < x ):
      value = value * np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( x <= 2.0 ):
    z = ( 2.0 * x * x * x - 9.0 ) / 7.0
    value = np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 ) \
      * ( x * x * ( 0.25 + r8_csevl ( z, bif2cs, nbif2 ) ) \
      + 0.5 + r8_csevl ( z, big2cs, nbig2 ) )
  elif ( x <= 4.0 ):
    sqrtx = np.sqrt ( x )
    z = atr / x / sqrtx + btr
    value = ( 0.625 + r8_csevl ( z, bip1cs, nbip1 ) ) * np.sqrt ( sqrtx )
  elif ( x <= xbig ):
    sqrtx = np.sqrt ( x )
    z = 16.0 / x / sqrtx - 1.0
    value = ( 0.625 + r8_csevl ( z, bip2cs, nbip2 ) ) * np.sqrt ( sqrtx )
  else:
    sqrtx = np.sqrt ( x )
    z = -1.0
    value = ( 0.625 + r8_csevl ( z, bip2cs, nbip2 ) ) * np.sqrt ( sqrtx )

  return value

def r8_bie ( x ):

#*****************************************************************************80
#
## R8_BIE evaluates the exponentially scaled Airy function Bi of an R8 argument.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    26 April 2016
#
#  Author:
#
#    Original FORTRAN77 version by Wayne Fullerton.
#    Python version by John Burkardt.
#
#  Reference:
#
#    Wayne Fullerton,
#    Portable Special Function Routines,
#    in Portability of Numerical Software,
#    edited by Wayne Cowell,
#    Lecture Notes in Computer Science, Volume 57,
#    Springer 1977,
#    ISBN: 978-3-540-08446-4,
#    LC: QA297.W65.
#
#  Parameters:
#
#    Input, real X, the argument.
#
#    Output, real VALUE, the exponentially scaled Airy function Bi of X.
#
  import numpy as np
  from r8_csevl import r8_csevl
  from r8_inits import r8_inits
  from machine import r8_mach

  atr = 8.75069057084843450880771988210148
  btr = -2.09383632135605431360096498526268

  bif2cs = np.array ( [ \
      +0.0998457269381604104468284257993, \
      +0.47862497786300553772211467318231, \
      +0.25155211960433011771324415436675E-01, \
      +0.58206938852326456396515697872216E-03, \
      +0.74997659644377865943861457378217E-05, \
      +0.61346028703493836681403010356474E-07, \
      +0.34627538851480632900434268733359E-09, \
      +0.14288910080270254287770846748931E-11, \
      +0.44962704298334641895056472179200E-14, \
      +0.11142323065833011708428300106666E-16, \
      +0.22304791066175002081517866666666E-19, \
      +0.36815778736393142842922666666666E-22, \
      +0.50960868449338261333333333333333E-25, \
      +0.60003386926288554666666666666666E-28, \
      +0.60827497446570666666666666666666E-31 ] )

  bifcs = np.array ( [ \
      -0.16730216471986649483537423928176E-01, \
      +0.10252335834249445611426362777757, \
      +0.17083092507381516539429650242013E-02, \
      +0.11862545467744681179216459210040E-04, \
      +0.44932907017792133694531887927242E-07, \
      +0.10698207143387889067567767663628E-09, \
      +0.17480643399771824706010517628573E-12, \
      +0.20810231071761711025881891834399E-15, \
      +0.18849814695665416509927971733333E-18, \
      +0.13425779173097804625882666666666E-21, \
      +0.77159593429658887893333333333333E-25, \
      +0.36533879617478566399999999999999E-28, \
      +0.14497565927953066666666666666666E-31 ] )

  big2cs = np.array ( [ \
      +0.033305662145514340465176188111647, \
      +0.161309215123197067613287532084943, \
      +0.631900730961342869121615634921173E-02, \
      +0.118790456816251736389780192304567E-03, \
      +0.130453458862002656147116485012843E-05, \
      +0.937412599553521729546809615508936E-08, \
      +0.474580188674725153788510169834595E-10, \
      +0.178310726509481399800065667560946E-12, \
      +0.516759192784958180374276356640000E-15, \
      +0.119004508386827125129496251733333E-17, \
      +0.222982880666403517277063466666666E-20, \
      +0.346551923027689419722666666666666E-23, \
      +0.453926336320504514133333333333333E-26, \
      +0.507884996513522346666666666666666E-29, \
      +0.491020674696533333333333333333333E-32 ] )

  bigcs = np.array ( [ \
      +0.22466223248574522283468220139024E-01, \
      +0.37364775453019545441727561666752E-01, \
      +0.44476218957212285696215294326639E-03, \
      +0.24708075636329384245494591948882E-05, \
      +0.79191353395149635134862426285596E-08, \
      +0.16498079851827779880887872402706E-10, \
      +0.24119906664835455909247501122841E-13, \
      +0.26103736236091436985184781269333E-16, \
      +0.21753082977160323853123792000000E-19, \
      +0.14386946400390433219483733333333E-22, \
      +0.77349125612083468629333333333333E-26, \
      +0.34469292033849002666666666666666E-29, \
      +0.12938919273216000000000000000000E-32 ] )

  bip1cs = np.array ( [ \
      -0.83220474779434474687471864707973E-01, \
      +0.11461189273711742889920226128031E-01, \
      +0.42896440718911509494134472566635E-03, \
      -0.14906639379950514017847677732954E-03, \
      -0.13076597267876290663136340998881E-04, \
      +0.63275983961030344754535716032494E-05, \
      -0.42226696982681924884778515889433E-06, \
      -0.19147186298654689632835494181277E-06, \
      +0.64531062845583173611038157880934E-07, \
      -0.78448546771397719289748310448628E-08, \
      -0.96077216623785085879198533565432E-09, \
      +0.70004713316443966339006074402068E-09, \
      -0.17731789132814932022083128056698E-09, \
      +0.22720894783465236347282126389311E-10, \
      +0.16540456313972049847032860681891E-11, \
      -0.18517125559292316390755369896693E-11, \
      +0.59576312477117290165680715534277E-12, \
      -0.12194348147346564781055769498986E-12, \
      +0.13347869253513048815386347813597E-13, \
      +0.17278311524339746664384792889731E-14, \
      -0.14590732013016720735268871713166E-14, \
      +0.49010319927115819978994989520104E-15, \
      -0.11556545519261548129262972762521E-15, \
      +0.19098807367072411430671732441524E-16, \
      -0.11768966854492179886913995957862E-17, \
      -0.63271925149530064474537459677047E-18, \
      +0.33861838880715361614130191322316E-18, \
      -0.10725825321758625254992162219622E-18, \
      +0.25995709605617169284786933115562E-19, \
      -0.48477583571081193660962309494101E-20, \
      +0.55298913982121625361505513198933E-21, \
      +0.49421660826069471371748197444266E-22, \
      -0.55162121924145707458069720814933E-22, \
      +0.21437560417632550086631884499626E-22, \
      -0.61910313387655605798785061137066E-23, \
      +0.14629362707391245659830967336959E-23, \
      -0.27918484471059005576177866069333E-24, \
      +0.36455703168570246150906795349333E-25, \
      +0.58511821906188711839382459733333E-27, \
      -0.24946950487566510969745047551999E-26, \
      +0.10979323980338380977919579477333E-26, \
      -0.34743388345961115015034088106666E-27, \
      +0.91373402635349697363171082240000E-28, \
      -0.20510352728210629186247720959999E-28, \
      +0.37976985698546461748651622399999E-29, \
      -0.48479458497755565887848448000000E-30, \
      -0.10558306941230714314205866666666E-31 ] )

  bip2cs = np.array ( [ \
      -0.11359673758598867913797310895527, \
      +0.41381473947881595760052081171444E-02, \
      +0.13534706221193329857696921727508E-03, \
      +0.10427316653015353405887183456780E-04, \
      +0.13474954767849907889589911958925E-05, \
      +0.16965374054383983356062511163756E-06, \
      -0.10096500865641624301366228396373E-07, \
      -0.16729119493778475127836973095943E-07, \
      -0.45815364485068383217152795613391E-08, \
      +0.37366813665655477274064749384284E-09, \
      +0.57669303201452448119584643502111E-09, \
      +0.62181265087850324095393408792371E-10, \
      -0.63294120282743068241589177281354E-10, \
      -0.14915047908598767633999091989487E-10, \
      +0.78896213942486771938172394294891E-11, \
      +0.24960513721857797984888064000127E-11, \
      -0.12130075287291659477746664734814E-11, \
      -0.37404939108727277887343460402716E-12, \
      +0.22377278140321476798783446931091E-12, \
      +0.47490296312192466341986077472514E-13, \
      -0.45261607991821224810605655831294E-13, \
      -0.30172271841986072645112245876020E-14, \
      +0.91058603558754058327592683478908E-14, \
      -0.98149238033807062926643864207709E-15, \
      -0.16429400647889465253601245251589E-14, \
      +0.55334834214274215451182114635164E-15, \
      +0.21750479864482655984374381998156E-15, \
      -0.17379236200220656971287029558087E-15, \
      -0.10470023471443714959283909313604E-17, \
      +0.39219145986056386925441403311462E-16, \
      -0.11621293686345196925824005665910E-16, \
      -0.54027474491754245533735411307773E-17, \
      +0.45441582123884610882675428553304E-17, \
      -0.28775599625221075729427585480086E-18, \
      -0.10017340927225341243596162960440E-17, \
      +0.44823931215068369856332561906313E-18, \
      +0.76135968654908942328948982366775E-19, \
      -0.14448324094881347238956060145422E-18, \
      +0.40460859449205362251624847392112E-19, \
      +0.20321085700338446891325190707277E-19, \
      -0.19602795471446798718272758041962E-19, \
      +0.34273038443944824263518958211738E-20, \
      +0.37023705853905135480024651593154E-20, \
      -0.26879595172041591131400332966712E-20, \
      +0.28121678463531712209714454683364E-21, \
      +0.60933963636177797173271119680329E-21, \
      -0.38666621897150844994172977893413E-21, \
      +0.25989331253566943450895651927228E-22, \
      +0.97194393622938503767281175216084E-22, \
      -0.59392817834375098415630478204591E-22, \
      +0.38864949977113015409591960439444E-23, \
      +0.15334307393617272869721512868769E-22, \
      -0.97513555209762624036336521409724E-23, \
      +0.96340644440489471424741339383726E-24, \
      +0.23841999400208880109946748792454E-23, \
      -0.16896986315019706184848044205207E-23, \
      +0.27352715888928361222578444801478E-24, \
      +0.35660016185409578960111685025730E-24, \
      -0.30234026608258827249534280666954E-24, \
      +0.75002041605973930653144204823232E-25, \
      +0.48403287575851388827455319838748E-25, \
      -0.54364137654447888432698010297766E-25, \
      +0.19281214470820962653345978809756E-25, \
      +0.50116355020532656659611814172172E-26, \
      -0.95040744582693253786034620869972E-26, \
      +0.46372646157101975948696332245611E-26, \
      +0.21177170704466954163768170577046E-28, \
      -0.15404850268168594303692204548726E-26, \
      +0.10387944293201213662047889194441E-26, \
      -0.19890078156915416751316728235153E-27, \
      -0.21022173878658495471177044522532E-27, \
      +0.21353099724525793150633356670491E-27, \
      -0.79040810747961342319023537632627E-28, \
      -0.16575359960435585049973741763592E-28, \
      +0.38868342850124112587625586496537E-28, \
      -0.22309237330896866182621562424717E-28, \
      +0.27777244420176260265625977404382E-29, \
      +0.57078543472657725368712433782772E-29, \
      -0.51743084445303852800173371555280E-29, \
      +0.18413280751095837198450927071569E-29, \
      +0.44422562390957094598544071068647E-30, \
      -0.98504142639629801547464958226943E-30, \
      +0.58857201353585104884754198881995E-30, \
      -0.97636075440429787961402312628595E-31, \
      -0.13581011996074695047063597884122E-30, \
      +0.13999743518492413270568048380345E-30, \
      -0.59754904545248477620884562981118E-31, \
      -0.40391653875428313641045327529856E-32 ] )

  eta = 0.1  * r8_mach ( 3 )
  nbif = r8_inits ( bifcs, 13, eta )
  nbig = r8_inits ( bigcs, 13, eta )
  nbif2 = r8_inits ( bif2cs, 15, eta )
  nbig2 = r8_inits ( big2cs, 15, eta )
  nbip1 = r8_inits ( bip1cs, 47, eta )
  nbip2 = r8_inits ( bip2cs, 88, eta )
  x3sml = eta ** 0.3333
  x32sml = 1.3104 * x3sml * x3sml
  xbig = r8_mach ( 2 ) ** 0.6666

  if ( x < - 1.0 ):
    xm, theta = r8_aimp ( x )
    value = xm * np.sin ( theta )
  elif ( abs ( x ) <= x3sml ):
    z = 0.0
    value = 0.625 + r8_csevl ( z, bifcs, nbif ) \
      + x * ( 0.4375 + r8_csevl ( z, bigcs, nbig ) )
    if (  x32sml <= x ):
      value = value * np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( x <= 1.0 ):
    z = x * x * x
    value = 0.625 + r8_csevl ( z, bifcs, nbif ) \
      + x * ( 0.4375 + r8_csevl ( z, bigcs, nbig ) )
    if (  x32sml <= x ):
      value = value * np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 )
  elif ( x <= 2.0 ):
    z = ( 2.0 * x * x * x - 9.0 ) / 7.0
    value = np.exp ( - 2.0 * x * np.sqrt ( x ) / 3.0 ) \
      * ( 1.125 + r8_csevl ( z, bif2cs, nbif2 ) \
      + x * ( 0.625 + r8_csevl ( z, big2cs, nbig2 ) ) )
  elif ( x <= 4.0 ):
    sqrtx = np.sqrt ( x )
    z = atr / x / sqrtx + btr
    value = ( 0.625 + r8_csevl ( z, bip1cs, nbip1 ) ) / np.sqrt ( sqrtx )
  elif ( x < xbig ):
    sqrtx = np.sqrt ( x )
    z = 16.0 / ( x * sqrtx ) - 1.0
    value = ( 0.625 + r8_csevl ( z, bip2cs, nbip2 ) ) / np.sqrt ( sqrtx )
  else:
    sqrtx = np.sqrt ( x )
    z = - 1.0
    value = ( 0.625 + r8_csevl ( z, bip2cs, nbip2 ) ) / np.sqrt ( sqrtx )

  return value

if ( __name__ == '__main__' ):
  from timestamp import timestamp
  timestamp ( )
  r8_ai_test ( )
  r8_aid_test ( )
  r8_bi_test ( )
  r8_bid_test ( )
  timestamp ( )
