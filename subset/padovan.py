#! /usr/bin/env python3
#

import numpy as np
import matplotlib.pyplot as plt
import platform
import time
import sys
import os
import math
from mpl_toolkits.mplot3d import Axes3D
from sys import exit

sys.path.append(os.path.join("../"))
from base import plot2d, plotocc
from timestamp.timestamp import timestamp

from i4lib.i4vec_print import i4vec_print
from i4lib.i4mat_print import i4mat_print, i4mat_print_some
from r8lib.r8vec_print import r8vec_print
from r8lib.r8mat_print import r8mat_print, r8mat_print_some
from r8lib.r8mat_write import r8mat_write


def padovan(n):

    # *****************************************************************************80
    #
    # PADOVAN returns the first N values of the Padovan sequence.
    #
    #  Discussion:
    #
    #    The Padovan sequence has the initial values:
    #
    #      P(0) = 1
    #      P(1) = 1
    #      P(2) = 1
    #
    #    and subsequent entries are generated by the recurrence
    #
    #      P(I+1) = P(I-1) + P(I-2)
    #
    #  Example:
    #
    #    0   1
    #    1   1
    #    2   1
    #    3   2
    #    4   2
    #    5   3
    #    6   4
    #    7   5
    #    8   7
    #    9   9
    #   10  12
    #
    #  Licensing:
    #
    #    This code is distributed under the GNU LGPL license.
    #
    #  Modified:
    #
    #    26 May 2015
    #
    #  Author:
    #
    #    John Burkardt
    #
    #  Reference:
    #
    #    Ian Stewart,
    #    "A Neglected Number",
    #    Scientific American, Volume 274, pages 102-102, June 1996.
    #
    #    Ian Stewart,
    #    Math Hysteria,
    #    Oxford, 2004.
    #
    #  Parameters:
    #
    #    Input, integer N, the number of terms.
    #
    #    Output, integer P(N), terms 0 though N-1 of the Perrin sequence.
    #

    p = np.zeros(n)

    if (1 <= n):

        p[0] = 1

        if (2 <= n):

            p[1] = 1

            if (3 <= n):

                p[2] = 1

                for i in range(3, n):
                    p[i] = p[i - 2] + p[i - 3]

    return p


def padovan_test():

    # *****************************************************************************80
    #
    # PADOVAN_TEST tests PADOVAN.
    #
    #  Licensing:
    #
    #    This code is distributed under the GNU LGPL license.
    #
    #  Modified:
    #
    #    26 May 2015
    #
    #  Author:
    #
    #    John Burkardt
    #

    n = 10

    print('')
    print('PADOVAN_TEST')
    print('  Python version: %s' % (platform.python_version()))
    print('  PADOVAN computes the Padovan numbers.')

    p = padovan(n)
    i4vec_print(n, p, '  Initial Padovan sequence:')

    print('')
    print('PADOVAN_TEST:')
    print('  Normal end of execution.')
    return


if (__name__ == '__main__'):
    timestamp()
    padovan_test()
    timestamp()
