Sat Feb  1 15:36:22 2020

FIND_DISTANCES_TEST:
  FIND_DISTANCES takes a candidate location Y
  and determines whether its distance to each point
  in the X array is listed in the L array.

  Initial L array:

     0      13
     1      15
     2      38
     3      90
     4       2
     5      25
     6      77
     7      23
     8      75
     9      52

  Consider Y = 77

  This Y is acceptable.

  New X array:

     0       0
     1      90
     2      77

  New L array:

     0      52
     1      15
     2       2
     3      25
     4      38
     5      23
     6      75

  Consider Y = 35

  This Y is not acceptable.

I4_UNIFORM_AB_TEST
  Python version: 3.6.9
  I4_UNIFORM_AB computes pseudorandom values
  in an interval [A,B].

  The lower endpoint A = -100
  The upper endpoint B = 200
  The initial seed is 123456789

         1       -35
         2       187
         3       149
         4        69
         5        25
         6       -81
         7       -23
         8       -67
         9       -87
        10        90
        11       -82
        12        35
        13        20
        14       127
        15       139
        16      -100
        17       170
        18         5
        19       -72
        20       -96

I4_UNIFORM_AB_TEST:
  Normal end of execution.

I4VEC_MAX_LAST_TEST
  I4VEC_MAX_LAST identifies the largest element in an
  I4VEC, and moves it to the final entry.

  Input vector:

     0       7
     1      29
     2      25
     3      17
     4      13
     5       2
     6       8
     7       4
     8       2
     9      20

  Maximum: 29

  Output vector:

     0       7
     1      25
     2      17
     3      13
     4       2
     5       8
     6       4
     7       2
     8      20
     9      29

I4VEC_PRINT_TEST
  Python version: 3.6.9
  I4VEC_PRINT prints an I4VEC.

  Here is an I4VEC:

     0      91
     1      92
     2      93
     3      94

I4VEC_PRINT_TEST:
  Normal end of execution.

PARTIAL_DIGEST_RECUR_TEST01
  PARTIAL_DIGEST_RECUR generates solutions to the partial
  digest problem, using recursion.

  The number of objects to place is N = 5

  The original placement was 0,3,6,8,10.
  These placements generate the following distances:

  Distance array:

     0       2
     1       2
     2       3
     3       3
     4       4
     5       5
     6       6
     7       7
     8       8
     9      10

  PARTIAL_DIGEST_RECUR may recover the original placements
  from the pairwise distances.  It may also find other
  placements that have the same distance array.

  Solution:

     0       0
     1      10
     2       8
     3       3
     4       6

  Solution:

     0       0
     1      10
     2       2
     3       7
     4       4
Sat Feb  1 15:36:22 2020
