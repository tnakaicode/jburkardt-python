Sun Jan 26 09:13:00 2020

HYPERBALL_MONTE_CARLO_TEST
  Python version: 3.6.9
  Test the HYPERBALL_MONTE_CARLO library.

GAMMA_VALUES_TEST:
  Python version: 3.6.9
  GAMMA_VALUES stores values of the Gamma function.

      X            GAMMA(X)

     -0.500000       -3.5449077018110322
     -0.010000     -100.5871979644108052
      0.010000       99.4325851191506018
      0.100000        9.5135076986687324
      0.200000        4.5908437119988026
      0.400000        2.2181595437576882
      0.500000        1.7724538509055161
      0.600000        1.4891922488128171
      0.800000        1.1642297137253030
      1.000000        1.0000000000000000
      1.100000        0.9513507698668732
      1.200000        0.9181687423997607
      1.300000        0.8974706963062772
      1.400000        0.8872638175030753
      1.500000        0.8862269254527581
      1.600000        0.8935153492876903
      1.700000        0.9086387328532904
      1.800000        0.9313837709802427
      1.900000        0.9617658319073874
      2.000000        1.0000000000000000
      3.000000        2.0000000000000000
      4.000000        6.0000000000000000
     10.000000   362880.0000000000000000
     20.000000  121645100408832000.0000000000000000
     30.000000  8841761993739701898620088352768.0000000000000000

GAMMA_VALUES_TEST:
  Normal end of execution.

HYPERBALL_MONTE_CARLO_TEST01
  Python version: 3.6.9
  Use the Monte Carlo method to estimate integrals
  over the interior of the unit hyperball in M dimensions.

  Spatial dimension M = 3

         N        1              X^2             Y^2
             Z^2             X^4           X^2Y^2           Z^4

         1
         4.18879
         1.03683
        0.117844
        0.541076
        0.256639
       0.0291693
       0.0698921

         2
         4.18879
         1.36177
        0.256214
          2.0108
        0.697316
        0.132907
         1.42693

         4
         4.18879
        0.704532
        0.954586
         1.30536
        0.223317
       0.0771494
        0.450174

         8
         4.18879
        0.911916
         1.05854
        0.430492
        0.318723
        0.213253
        0.178352

        16
         4.18879
         1.30415
        0.592706
         1.11748
        0.664554
        0.101514
        0.465581

        32
         4.18879
        0.800459
         1.04915
         1.11545
        0.280813
        0.172643
        0.570938

        64
         4.18879
        0.920802
        0.881304
          0.8264
        0.408491
        0.137082
         0.32148

       128
         4.18879
        0.883623
        0.884691
        0.665639
        0.402329
        0.134449
        0.242344

       256
         4.18879
        0.840408
        0.888887
        0.835941
        0.369289
        0.119195
        0.361917

       512
         4.18879
        0.947095
        0.772026
        0.835442
        0.450666
        0.119634
        0.364025

      1024
         4.18879
        0.800795
        0.862834
        0.808179
          0.3356
        0.119243
        0.345652

      2048
         4.18879
         0.83901
        0.860449
        0.808435
        0.356888
        0.122752
         0.34544

      4096
         4.18879
        0.859803
        0.838847
        0.859552
         0.36865
        0.124974
         0.37183

      8192
         4.18879
        0.820884
        0.849977
        0.837145
        0.348385
        0.121535
         0.35992

     16384
         4.18879
        0.844762
        0.836117
        0.842941
        0.361521
        0.119839
        0.362152

     32768
         4.18879
        0.839744
        0.837319
        0.836491
        0.361111
        0.120235
        0.357936

     65536
         4.18879
        0.837321
        0.840711
        0.834304
          0.3605
        0.119373
        0.357186


     Exact
         4.18879
        0.837758
        0.837758
        0.837758
        0.359039
         0.11968
        0.359039


HYPERBALL_MONTE_CARLO_TEST01
  Normal end of execution.

HYPERBALL_MONTE_CARLO_TEST02
  Python version: 3.6.9
  Use the Monte Carlo method to estimate integrals
  over the interior of the unit hyperball in M dimensions.

  Spatial dimension M = 6

         N
        1      
        U      
         V^2   
         V^2W^2
         X^4   
         Y^2Z^2
         Z^6


         1
         5.16771
         1.98974
       0.0870753
      0.00673661
       0.0371031
       0.0295722
       0.0955581

         2
         5.16771
        -1.55534
         1.53226
        0.162179
        0.180884
     0.000193646
     3.76486e-07

         4
         5.16771
       -0.686185
        0.314803
       0.0269054
       0.0713516
      0.00392993
       0.0619428

         8
         5.16771
       -0.296541
        0.521006
       0.0693522
       0.0470754
      0.00345459
        0.161042

        16
         5.16771
        0.613805
        0.935487
       0.0886397
        0.435485
        0.011341
       0.0300525

        32
         5.16771
       -0.458592
        0.791475
       0.0687205
        0.258376
       0.0070059
        0.063097

        64
         5.16771
         0.18916
        0.756214
       0.0794278
        0.172308
      0.00492269
       0.0962077

       128
         5.16771
      -0.0305115
        0.543142
       0.0584992
        0.201704
      0.00669747
        0.135852

       256
         5.16771
       0.0675086
        0.729472
        0.079016
        0.164335
      0.00476055
       0.0963603

       512
         5.16771
       0.0738884
        0.699442
       0.0644178
         0.18088
       0.0050392
       0.0786409

      1024
         5.16771
        0.012322
        0.635779
       0.0613443
        0.173965
      0.00516896
       0.0846845

      2048
         5.16771
       0.0725793
        0.617545
       0.0609552
        0.217276
      0.00584118
       0.0763982

      4096
         5.16771
       0.0365121
        0.648452
       0.0613359
        0.187645
      0.00570912
       0.0804734

      8192
         5.16771
      -0.0199676
        0.642256
       0.0627809
        0.186551
      0.00522519
       0.0780286

     16384
         5.16771
     -0.00121468
        0.639601
       0.0641863
        0.197949
      0.00527974
       0.0804025

     32768
         5.16771
     -0.00325038
        0.644074
       0.0635565
        0.195108
      0.00547604
       0.0802482

     65536
         5.16771
     -0.00451174
        0.645414
       0.0640654
        0.192213
       0.0054565
       0.0808224


     Exact
         5.16771
               0
        0.645964
       0.0645964
        0.193789
      0.00538303
       0.0807455


HYPERBALL_MONTE_CARLO_TEST02
  Use the Monte Carlo method to estimate integrals

HYPERBALL01_MONOMIAL_INTEGRAL_TEST
  Python version: 3.6.9
  HYPERBALL01_MONOMIAL_INTEGRAL computes the integral of a monomial
  over the interior of the unit hyperball in M dimensions.
  Compare with a Monte Carlo estimate.

  Spatial dimension M = 3

  Number of sample points used is 4192

  If any exponent is odd, the integral is zero.
  We will restrict this test to randomly chosen even exponents.

  Ex  Ey  Ez     MC-Estimate           Exact      Error

   0
   2
   6
       0.0170667       0.0181333      0.0011
   4
   0
   6
      0.00414237      0.00418461     4.2e-05
   8
   0
   4
      0.00197222      0.00195282     1.9e-05
   4
   8
   8
       1.214e-06     1.31432e-06       1e-07
   0
   0
   6
        0.196024        0.199466      0.0034
   8
   8
   8
     6.61499e-08     6.81499e-08       2e-09
   2
   4
   8
     0.000106993     0.000114872     7.9e-06
   2
   6
   8
     2.76309e-05     3.02293e-05     2.6e-06
   8
   2
   0
       0.0095903      0.00976408     0.00017
   0
   8
   0
        0.128169        0.126933      0.0012
   2
   0
   4
       0.0391635       0.0398932     0.00073
   6
   4
   4
     4.74864e-05     4.92307e-05     1.7e-06
   4
   8
   6
     4.02668e-06     4.31848e-06     2.9e-07
   0
   0
   2
        0.814873        0.837758       0.023
   4
   6
   4
     4.68185e-05     4.92307e-05     2.4e-06
   0
   6
   2
       0.0174937       0.0181333     0.00064
   8
   0
   4
      0.00197222      0.00195282     1.9e-05
   0
   6
   6
      0.00130801      0.00139487     8.7e-05
   6
   2
   4
     0.000272561     0.000278974     6.4e-06
   4
   2
   0
       0.0400729       0.0398932     0.00018

HYPERBALL01_MONOMIAL_INTEGRAL_TEST
  Normal end of execution.

HYPERBALL01_SAMPLE_TEST
  Python version: 3.6.9
  HYPERBALL01_SAMPLE samples the unit hyperball.

  Sample points in the unit hyperball.

  Row: 
      0       
      1       
      2       

  Col
      0 :
    0.497518  
    -0.16773  
    0.359406  

      1 :
    0.756069  
    0.330465  
   -0.384785  

      2 :
    0.280276  
   -0.114567  
    0.901126  

      3 :
    0.523193  
   -0.251279  
    0.401636  

      4 :
  -0.0681996  
    -0.80761  
   -0.532481  

      5 :
    0.152427  
   -0.236512  
    -0.65837  

      6 :
   -0.609231  
   -0.374499  
   -0.606816  

      7 :
     0.42781  
    0.522948  
  -0.0155662  

      8 :
   0.0146253  
   -0.230002  
   -0.122921  

      9 :
    0.231257  
   -0.039156  
     0.11065  


HYPERBALL01_SAMPLE_TEST
  Normal end of execution.

HYPERBALL01_VOLUME_TEST
  Python version: 3.6.9
  HYPERBALL01_VOLUME returns the volume of the unit hyperball
  in M dimensions.

   M  Volume

   1  2
   2  3.14159
   3  4.18879
   4  4.9348
   5  5.26379
   6  5.16771
   7  4.72477
   8  4.05871
   9  3.29851
  10  2.55016

HYPERBALL01_VOLUME_TEST
  Normal end of execution.

I4VEC_PRINT_TEST
  Python version: 3.6.9
  I4VEC_PRINT prints an I4VEC.

  Here is an I4VEC:

     0      91
     1      92
     2      93
     3      94

I4VEC_PRINT_TEST:
  Normal end of execution.

I4VEC_TRANSPOSE_PRINT_TEST
  Python version: 3.6.9
  I4VEC_TRANSPOSE_PRINT prints an I4VEC
  with 5 entries to a row, and an optional title.

  My array:  
       1
       2
       3
       4
       5
       6
       7
       8
       9
      10

      11
      12


I4VEC_TRANSPOSE_PRINT_TEST:
  Normal end of execution.

I4VEC_UNIFORM_AB_TEST
  Python version: 3.6.9
  I4VEC_UNIFORM_AB computes pseudorandom values
  in an interval [A,B].

  The lower endpoint A = -100
  The upper endpoint B = 200
  The initial seed is 123456789


  The random vector:

     0     -35
     1     187
     2     149
     3      69
     4      25
     5     -81
     6     -23
     7     -67
     8     -87
     9      90
    10     -82
    11      35
    12      20
    13     127
    14     139
    15    -100
    16     170
    17       5
    18     -72
    19     -96

I4VEC_UNIFORM_AB_TEST:
  Normal end of execution.

MONOMIAL_VALUE_TEST
  Python version: 3.6.9
  Use monomial_value() to evaluate some monomials
  in dimensions 1 through 3.

  Spatial dimension M =  1

  Exponents:
      -1


   V(X)         
      X(0)


      0.111111  
    9.0000

         0.125  
    8.0000

           0.2  
    5.0000

      0.333333  
    3.0000

            -1  
   -1.0000


  Spatial dimension M =  2

  Exponents:
      -1
      -2


   V(X)         
      X(0)
      X(1)


    -0.0277778  
   -1.0000
    6.0000

     -0.111111  
   -1.0000
    3.0000

    0.00680272  
    3.0000
    7.0000

       0.03125  
    8.0000
   -2.0000

     0.0277778  
    9.0000
    2.0000


  Spatial dimension M =  3

  Exponents:
      -3
      -3
       5


   V(X)         
      X(0)
      X(1)
      X(2)


        0.0625  
    8.0000
   -1.0000
   -2.0000

   -0.00137174  
    1.0000
    9.0000
   -1.0000

   0.000244141  
    2.0000
    8.0000
    1.0000

       1.21363  
    6.0000
    5.0000
    8.0000

      0.158766  
    3.0000
    9.0000
    5.0000


MONOMIAL_VALUE_TEST
  Normal end of execution.

R8_GAMMA_TEST:
  Python version: 3.6.9
  R8_GAMMA evaluates the Gamma function.

      X            GAMMA(X)      R8_GAMMA(X)

          -0.5        -3.544907701811032        -3.544907701811032
         -0.01        -100.5871979644108        -100.5871979644108
          0.01          99.4325851191506          99.4325851191506
           0.1         9.513507698668732         9.513507698668731
           0.2         4.590843711998803         4.590843711998803
           0.4         2.218159543757688         2.218159543757688
           0.5         1.772453850905516         1.772453850905516
           0.6         1.489192248812817         1.489192248812817
           0.8         1.164229713725303         1.164229713725303
             1                         1                         1
           1.1        0.9513507698668732        0.9513507698668732
           1.2        0.9181687423997607        0.9181687423997607
           1.3        0.8974706963062772        0.8974706963062772
           1.4        0.8872638175030753        0.8872638175030754
           1.5        0.8862269254527581        0.8862269254527581
           1.6        0.8935153492876903        0.8935153492876903
           1.7        0.9086387328532904        0.9086387328532904
           1.8        0.9313837709802427        0.9313837709802427
           1.9        0.9617658319073874        0.9617658319073874
             2                         1                         1
             3                         2                         2
             4                         6                         6
            10                    362880                    362880
            20      1.21645100408832e+17     1.216451004088321e+17
            30     8.841761993739702e+30     8.841761993739751e+30

R8_GAMMA_TEST
  Normal end of execution.

R8_NORMAL_01_TEST
  Python version: 3.6.9
  R8_NORMAL_01 generates normally distributed
  random values.
  Using initial random number seed = 123456789

  1.679040
  -0.566060
  1.212934
  1.269381
  -1.666087
  -2.242464
  0.039675
  0.673068
  -0.275127
  2.164005
  0.297785
  2.044536
  1.398819
  -1.242985
  -0.067084
  -0.794396
  -0.523768
  -0.350567
  0.131700
  0.537380

R8_NORMAL_01_TEST
  Normal end of execution.

R8_UNIFORM_01_TEST
  Python version: 3.6.9
  R8_UNIFORM_01 produces a sequence of random values.

  Using random seed 123456789

  SEED  R8_UNIFORM_01(SEED)

     469049721        0.218418
    2053676357        0.956318
    1781357515        0.829509
    1206231778        0.561695
     891865166        0.415307
     141988902        0.066119
     553144097        0.257578
     236130416        0.109957
      94122056        0.043829
    1361431000        0.633966

  Verify that the sequence can be restarted.
  Set the seed back to its original value, and see that
  we generate the same sequence.

  SEED  R8_UNIFORM_01(SEED)

     469049721        0.218418
    2053676357        0.956318
    1781357515        0.829509
    1206231778        0.561695
     891865166        0.415307
     141988902        0.066119
     553144097        0.257578
     236130416        0.109957
      94122056        0.043829
    1361431000        0.633966

R8_UNIFORM_01_TEST
  Normal end of execution.

R8MAT_PRINT_TEST
  Python version: 3.6.9
  R8MAT_PRINT prints an R8MAT.

  Here is an R8MAT:

  Col: 
      0       
      1       
      2       
      3       
      4       

  Row
      0 :
          11  
          12  
          13  
          14  
          15  

      1 :
          21  
          22  
          23  
          24  
          25  

      2 :
          31  
          32  
          33  
          34  
          35  

      3 :
          41  
          42  
          43  
          44  
          45  


  Col: 
      5       

  Row
      0 :
          16  

      1 :
          26  

      2 :
          36  

      3 :
          46  


R8MAT_PRINT_TEST:
  Normal end of execution.

R8MAT_PRINT_SOME_TEST
  Python version: 3.6.9
  R8MAT_PRINT_SOME prints some of an R8MAT.

  Here is an R8MAT:

  Col: 
      3       
      4       
      5       

  Row
      0 :
          14  
          15  
          16  

      1 :
          24  
          25  
          26  

      2 :
          34  
          35  
          36  


R8MAT_PRINT_SOME_TEST:
  Normal end of execution.

R8MAT_TRANSPOSE_PRINT_TEST
  Python version: 3.6.9
  R8MAT_TRANSPOSE_PRINT prints an R8MAT.

  Here is an R8MAT, transposed:

  Row: 
      0       
      1       
      2       
      3       

  Col
      0 :
          11  
          21  
          31  
          41  

      1 :
          12  
          22  
          32  
          42  

      2 :
          13  
          23  
          33  
          43  


R8MAT_TRANSPOSE_PRINT_TEST:
  Normal end of execution.

R8MAT_TRANSPOSE_PRINT_SOME_TEST
  Python version: 3.6.9
  R8MAT_TRANSPOSE_PRINT_SOME prints some of an R8MAT, transposed.

  R8MAT, rows 0:2, cols 3:5:

  Row: 
      0       
      1       
      2       

  Col
      3 :
          14  
          24  
          34  

      4 :
          15  
          25  
          35  

      5 :
          16  
          26  
          36  


R8MAT_TRANSPOSE_PRINT_SOME_TEST:
  Normal end of execution.

R8MAT_UNIFORM_01_TEST
  Python version: 3.6.9
  R8MAT_UNIFORM_01 computes a random R8MAT.

  0 <= X <= 1
  Initial seed is 123456789

  Random R8MAT:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
    0.218418  
   0.0661187  
   0.0617272  
  0.00183837  

      1 :
    0.956318  
    0.257578  
    0.449539  
    0.897504  

      2 :
    0.829509  
    0.109957  
    0.401306  
    0.350752  

      3 :
    0.561695  
    0.043829  
    0.754673  
   0.0945448  

      4 :
    0.415307  
    0.633966  
    0.797287  
   0.0136169  


R8MAT_UNIFORM_01_TEST:
  Normal end of execution.

R8MAT_UNIFORM_AB_TEST
  R8MAT_UNIFORM_AB computes a random R8MAT.

  -1 <= X <= 5
  Initial seed is 123456789

  Random R8MAT:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
     0.31051  
   -0.603288  
   -0.629637  
    -0.98897  

      1 :
     4.73791  
    0.545467  
     1.69723  
     4.38502  

      2 :
     3.97706  
   -0.340259  
     1.40784  
     1.10451  

      3 :
     2.37017  
   -0.737026  
     3.52804  
   -0.432731  

      4 :
     1.49184  
     2.80379  
     3.78372  
   -0.918299  


R8MAT_UNIFORM_AB_TEST:
  Normal end of execution.

R8VEC_NORM_TEST
  Python version: 3.6.9
  R8VEC_NORM computes the L2 norm of an R8VEC.

  Input vector:

     0:      0.218418
     1:      0.956318
     2:      0.829509
     3:      0.561695
     4:      0.415307
     5:     0.0661187
     6:      0.257578
     7:      0.109957
     8:      0.043829
     9:      0.633966

  L2 norm = 1.62017

R8VEC_NORM_TEST:
  Normal end of execution.

R8VEC_NORMAL_01_TEST
  Python version: 3.6.9
  R8VEC_NORMAL_01 returns a vector of Normal 01 values

  SEED = 123456789

  Vector:

     0:       1.67904
     1:      -0.56606
     2:       1.21293
     3:       1.26938
     4:      -1.66609
     5:      -2.24246
     6:     0.0396749
     7:      0.673068
     8:     -0.275127
     9:         2.164

R8VEC_NORMAL_01_TEST:
  Normal end of execution.

R8VEC_PRINT_TEST
  Python version: 3.6.9
  R8VEC_PRINT prints an R8VEC.

  Here is an R8VEC:

     0:       123.456
     1:         5e-06
     2:        -1e+06
     3:       3.14159

R8VEC_PRINT_TEST:
  Normal end of execution.

R8VEC_UNIFORM_01_TEST
  Python version: 3.6.9
  R8VEC_UNIFORM_01 computes a random R8VEC.

  Initial seed is 123456789

  Random R8VEC:

     0:      0.218418
     1:      0.956318
     2:      0.829509
     3:      0.561695
     4:      0.415307
     5:     0.0661187
     6:      0.257578
     7:      0.109957
     8:      0.043829
     9:      0.633966

R8VEC_UNIFORM_01_TEST:
  Normal end of execution.

HYPERBALL_MONTE_CARLO_TEST
  Normal end of execution.
Sun Jan 26 09:13:11 2020
