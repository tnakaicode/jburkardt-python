Sun Jan 19 19:18:48 2020

CUBE_GRID_TEST
  Python version: 3.6.9
  Test the CUBE_GRID library.

R83COL_PRINT_PART_TEST
  Python version: 3.6.9
  R83COL_PRINT_PART prints part of an R83COL.

  Output with MAX_PRINT = 2

     0              11              12              13
     1              21              22              23  ...more entries...

  Output with MAX_PRINT = 5

     0              11              12              13
     1              21              22              23
     2              31              32              33
  ....  ..............  ..............  ..............
     9             101             102             103

  Output with MAX_PRINT = 25

     0              11              12              13
     1              21              22              23
     2              31              32              33
     3              41              42              43
     4              51              52              53
     5              61              62              63
     6              71              72              73
     7              81              82              83
     8              91              92              93
     9             101             102             103

R83COL_PRINT_PART_TEST:
  Normal end of execution.

R8MAT_WRITE_TEST:
  Python version: 3.6.9
  Test R8MAT_WRITE, which writes an R8MAT to a file.

  Created file "r8mat_write.txt".

R8MAT_WRITE_TEST:
  Normal end of execution.

TIMESTAMP_TEST:
  Python version: 3.6.9
  TIMESTAMP prints a timestamp of the current date and time.

Sun Jan 19 19:18:48 2020

TIMESTAMP_TEST:
  Normal end of execution.

CUBE_GRID_DISPLAY_TEST:
  Python version: 3.6.9
  CUBE_GRID_DISPLAY can display a grid of points in a cube.

CUBE_GRID_DISPLAY_TEST:
  Normal end of execution.

CUBE_GRID_COUNT_TEST:
  Python version: 3.6.9
  CUBE_GRID_COUNT can count the points in a grid
  over a cube (hexahedron) with NS(I)+1 grid points
  in the I-th direction.

          NS                 NG
  --------------------

  (    1,    2,    4 )       30
  (    1,    2,   10 )       66
  (    1,    3,    4 )       40
  (    1,    3,   10 )       88
  (    2,    2,    4 )       45
  (    2,    2,   10 )       99
  (    2,    3,    4 )       60
  (    2,    3,   10 )      132
  (    4,    2,    4 )       75
  (    4,    2,   10 )      165
  (    4,    3,    4 )      100
  (    4,    3,   10 )      220
  (    8,    2,    4 )      135
  (    8,    2,   10 )      297
  (    8,    3,    4 )      180
  (    8,    3,   10 )      396

CUBE_GRID_COUNT_TEST:
  Normal end of execution.

CUBE_GRID_POINTS_TEST:
  Python version: 3.6.9
  CUBE_GRID_POINTS defines a grid
  with (L,M,N) points on a side.

  Input value of L is 3
  Input value of M is 2
  Input value of N is 2

  Number of grid points will be 36

  Hexahedron vertices:

     0               0               2               5
     1               1               2               5
     2               0               4               5
     3               1               4               5
     4               0               2               8
     5               1               2               8
     6               0               4               8
     7               1               4               8

  Part of the grid point array:

     0               0               2               5
     1        0.333333               2               5
     2        0.666667               2               5
     3               1               2               5
     4               0               3               5
     5        0.333333               3               5
     6        0.666667               3               5
     7               1               3               5
     8               0               4               5
     9        0.333333               4               5
    10        0.666667               4               5
    11               1               4               5
    12               0               2             6.5
    13        0.333333               2             6.5
    14        0.666667               2             6.5
    15               1               2             6.5
    16               0               3             6.5
    17        0.333333               3             6.5
  ....  ..............  ..............  ..............
    35               1               4               8

  Data written to the file "cube_grid_points.xyz".

  Plot written to the file "cube_grid_points.png".

CUBE_GRID_POINTS_TEST:
  Normal end of execution.

CUBE_GRID_TEST:
  Normal end of execution.
Sun Jan 19 19:18:49 2020
