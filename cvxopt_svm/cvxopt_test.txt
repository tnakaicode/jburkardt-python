Fri Jan 31 10:53:03 2020

cvxopt_test
  Python version: 3.6.9

cvxopt_test1
  Python version: 3.6.9
  Test a very artificial, but large, example.
     pcost       dcost       gap    pres   dres   k/t
 0:  3.9117e+02  1.2507e+02  3e+02  8e-17  3e-15  1e+00
 1:  3.9729e+02  1.7946e+02  2e+02  3e-16  2e-14  8e-01
 2:  4.1565e+02  2.2255e+02  2e+02  3e-16  2e-14  6e-01
 3:  4.1293e+02  2.4965e+02  2e+02  4e-16  2e-14  4e-01
 4:  4.0336e+02  2.9330e+02  1e+02  5e-16  1e-14  2e-01
 5:  3.5270e+02  3.2542e+02  3e+01  3e-16  5e-15  5e-02
 6:  3.4295e+02  3.3180e+02  1e+01  6e-16  5e-15  2e-02
 7:  3.3887e+02  3.3453e+02  4e+00  3e-16  6e-15  7e-03
 8:  3.3692e+02  3.3576e+02  1e+00  5e-16  1e-14  2e-03
 9:  3.3645e+02  3.3607e+02  4e-01  6e-16  2e-14  5e-04
10:  3.3628e+02  3.3618e+02  1e-01  3e-16  3e-14  1e-04
11:  3.3624e+02  3.3621e+02  3e-02  3e-16  2e-14  3e-05
12:  3.3623e+02  3.3621e+02  1e-02  5e-16  7e-14  1e-05
13:  3.3622e+02  3.3622e+02  5e-03  4e-16  2e-13  5e-06
14:  3.3622e+02  3.3622e+02  2e-04  4e-16  1e-13  2e-07
Optimal solution found.

cvxopt_test2:
  Python version: 3.6.9
  cvxopt is a quadratic programming package.

  Use it to solve the following system:

  minimize:
    2 x0^2 + x1^2 + x0 x1 + x0 + x1
  subject to:
    x0 >= 0
    x1 >= 0
    x0 + x1 = 1

  Reformulated for cvxopt as follows:

  minimize:
    1/2 x' Q x + p
  subject to: 
    G x <= h
    A x = b
     pcost       dcost       gap    pres   dres
 0:  1.8889e+00  7.7778e-01  1e+00  2e-16  2e+00
 1:  1.8769e+00  1.8320e+00  4e-02  2e-16  6e-02
 2:  1.8750e+00  1.8739e+00  1e-03  2e-16  5e-04
 3:  1.8750e+00  1.8750e+00  1e-05  1e-16  5e-06
 4:  1.8750e+00  1.8750e+00  1e-07  1e-16  5e-08
Optimal solution found.

  Cost is minimized at x = [ 0.2500000952702475 , 0.7499999047297524 ]
  Minimized cost is  1.8750000000000178

cvxopt_test
  Normal end of execution.
Fri Jan 31 10:53:03 2020
